{
  "openapi": "3.1.0",
  "info": {
    "contact": {
      "email": "support@lithic.com"
    },
    "description": "The Lithic Developer API is designed to provide a predictable programmatic interface for accessing your Lithic account through an API and transaction webhooks.\nNote that your API key is a secret and should be treated as such. Don't share it with anyone, including us. We will never ask you for it.\n",
    "termsOfService": "https://lithic.com/legal#terms",
    "title": "Lithic Developer API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "Lithic production API server",
      "url": "https://api.lithic.com/v1"
    },
    {
      "description": "Sandbox environment that provides key functionality mirroring production",
      "url": "https://sandbox.lithic.com/v1"
    }
  ],
  "tags": [
    {
      "name": "3DS"
    },
    {
      "name": "Account"
    },
    {
      "name": "Account Holder"
    },
    {
      "name": "Auth Stream Access (ASA)"
    },
    {
      "name": "Authorization Rules"
    },
    {
      "name": "Balance"
    },
    {
      "name": "Card"
    },
    {
      "name": "Card Product"
    },
    {
      "name": "Dispute"
    },
    {
      "name": "Event"
    },
    {
      "name": "Event Types"
    },
    {
      "name": "External Bank Account"
    },
    {
      "name": "Financial Account"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Responder Endpoints"
    },
    {
      "name": "Settlement Report"
    },
    {
      "name": "Statement"
    },
    {
      "name": "Status"
    },
    {
      "name": "Tokenization"
    },
    {
      "name": "Transaction"
    }
  ],
  "paths": {
    "/account_holders": {
      "get": {
        "description": "Get a list of individual or business account holders and their KYC or KYB evaluation status.",
        "operationId": "getAccountHolders",
        "parameters": [
          {
            "description": "If applicable, represents the external_id associated with the account_holder.",
            "example": "00000000-0000-0000-0000-000000000001",
            "in": "query",
            "name": "external_id",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The number of account_holders to limit the response to.",
            "example": 10,
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAccountHoldersResponse": {
                    "value": {
                      "data": [
                        {
                          "account_token": "6b67b340-ed11-4463-a33d-0d7f7fdcd28c",
                          "business_account_token": "00000000-0000-0000-0000-000000000000",
                          "created": "2024-01-11T19:50:36.105448",
                          "email": "john@appleseed.com",
                          "exemption_type": "AUTHORIZED_USER",
                          "external_id": "5555555555",
                          "individual": {
                            "address": {
                              "address1": "123 Main Street",
                              "city": "New York",
                              "country": "USA",
                              "postal_code": "10128",
                              "state": "NY"
                            },
                            "dob": "2000-01-01",
                            "email": "john@appleseed.com",
                            "first_name": "John",
                            "last_name": "Appleseed",
                            "phone_number": "5555555555"
                          },
                          "phone_number": "5555555555",
                          "status": "ACCEPTED",
                          "token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                          "user_type": "INDIVIDUAL",
                          "verification_application": {
                            "created": "2024-01-11T19:58:24.821848",
                            "status": "ACCEPTED",
                            "status_reasons": [],
                            "updated": "2024-01-11T19:58:24.821848"
                          }
                        },
                        {
                          "account_token": "732f7328-a2d7-4281-a264-e8cb5af8d392",
                          "beneficial_owner_entities": [
                            {
                              "address": {
                                "address1": "22 Street North",
                                "city": "New York",
                                "country": "US",
                                "postal_code": "10004",
                                "state": "NY"
                              },
                              "dba_business_name": "Busy Business, Inc.",
                              "government_id": "98-7654321",
                              "legal_business_name": "Busy Business, Inc.",
                              "parent_company": "Example company",
                              "phone_numbers": ["5555555555"]
                            }
                          ],
                          "business_account_token": "00000000-0000-0000-0000-000000000000",
                          "business_entity": {
                            "address": {
                              "address1": "22 Street North",
                              "city": "New York",
                              "country": "US",
                              "postal_code": "10004",
                              "state": "NY"
                            },
                            "dba_business_name": "Busy Business, Inc.",
                            "government_id": "98-7654321",
                            "legal_business_name": "Busy Business, Inc.",
                            "parent_company": "Example company",
                            "phone_numbers": ["5555555555"]
                          },
                          "control_person": {
                            "address": {
                              "address1": "451 New Forest Way",
                              "city": "Springfield",
                              "country": "US",
                              "postal_code": "68022",
                              "state": "IL"
                            },
                            "dob": "1991-03-08T08:00:00Z",
                            "email": "john@busybusiness.com",
                            "first_name": "John",
                            "last_name": "Appleseed",
                            "phone_number": "5555555555"
                          },
                          "created": "2024-01-11T19:50:36.105449",
                          "exemption_type": "AUTHORIZED_USER",
                          "external_id": "851030f1-9b7b-4939-8ac9-161bd972d26f",
                          "token": "fa68ed76-9d02-4d45-8a3f-782f3b6a8b3f",
                          "user_type": "BUSINESS",
                          "verification_application": {
                            "created": "2024-01-11T19:50:36.105449",
                            "status": "PENDING_DOCUMENT",
                            "status_reasons": [],
                            "updated": "2024-01-11T19:50:36.105449"
                          }
                        }
                      ],
                      "has_more": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "Globally unique identifier for the account.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "beneficial_owner_entities": {
                            "description": "Only present when user_type == \"BUSINESS\". List of all entities with >25% ownership in the company.\n",
                            "items": {
                              "properties": {
                                "address": {
                                  "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                                  "properties": {
                                    "address1": {
                                      "description": "Valid deliverable address (no PO boxes).",
                                      "example": "123 Old Forest Way",
                                      "type": "string"
                                    },
                                    "address2": {
                                      "description": "Unit or apartment number (if applicable).",
                                      "type": "string"
                                    },
                                    "city": {
                                      "description": "Name of city.",
                                      "example": "Omaha",
                                      "type": "string"
                                    },
                                    "country": {
                                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                      "example": "USA",
                                      "type": "string"
                                    },
                                    "postal_code": {
                                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                      "example": "68022",
                                      "type": "string"
                                    },
                                    "state": {
                                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                      "example": "NE",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["address1", "city", "country", "postal_code", "state"],
                                  "type": "object"
                                },
                                "dba_business_name": {
                                  "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                                  "type": "string"
                                },
                                "government_id": {
                                  "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                                  "example": "114-123-1513",
                                  "type": "string"
                                },
                                "legal_business_name": {
                                  "description": "Legal (formal) business name.",
                                  "example": "Acme, Inc.",
                                  "type": "string"
                                },
                                "parent_company": {
                                  "description": "Parent company name (if applicable).",
                                  "type": "string"
                                },
                                "phone_numbers": {
                                  "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                                  "items": {
                                    "description": "Business phone number, entered in E.164 format.",
                                    "example": "+12124007676",
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "type": "array"
                                }
                              },
                              "required": [
                                "address",
                                "government_id",
                                "legal_business_name",
                                "phone_numbers"
                              ],
                              "type": "object"
                            },
                            "minItems": 0,
                            "type": "array"
                          },
                          "beneficial_owner_individuals": {
                            "description": "Only present when user_type == \"BUSINESS\". List of all individuals with >25% ownership in the company.\n",
                            "items": {
                              "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                              "properties": {
                                "address": {
                                  "description": "Individual's current address",
                                  "properties": {
                                    "address1": {
                                      "description": "Valid deliverable address (no PO boxes).",
                                      "example": "123 Old Forest Way",
                                      "type": "string"
                                    },
                                    "address2": {
                                      "description": "Unit or apartment number (if applicable).",
                                      "type": "string"
                                    },
                                    "city": {
                                      "description": "Name of city.",
                                      "example": "Omaha",
                                      "type": "string"
                                    },
                                    "country": {
                                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                      "example": "USA",
                                      "type": "string"
                                    },
                                    "postal_code": {
                                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                      "example": "68022",
                                      "type": "string"
                                    },
                                    "state": {
                                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                      "example": "NE",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["address1", "city", "country", "postal_code", "state"],
                                  "type": "object"
                                },
                                "dob": {
                                  "description": "Individual's date of birth, as an RFC 3339 date.",
                                  "example": "1991-03-08 08:00:00",
                                  "type": "string"
                                },
                                "email": {
                                  "description": "Individual's email address.",
                                  "example": "tom@middle-earth.com",
                                  "type": "string"
                                },
                                "first_name": {
                                  "description": "Individual's first name, as it appears on government-issued identity documents.",
                                  "example": "Tom",
                                  "type": "string"
                                },
                                "last_name": {
                                  "description": "Individual's last name, as it appears on government-issued identity documents.",
                                  "example": "Bombadil",
                                  "type": "string"
                                },
                                "phone_number": {
                                  "description": "Individual's phone number, entered in E.164 format.",
                                  "example": "+12124007676",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "minItems": 0,
                            "type": "array"
                          },
                          "business_account_token": {
                            "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "business_entity": {
                            "properties": {
                              "address": {
                                "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                                "properties": {
                                  "address1": {
                                    "description": "Valid deliverable address (no PO boxes).",
                                    "example": "123 Old Forest Way",
                                    "type": "string"
                                  },
                                  "address2": {
                                    "description": "Unit or apartment number (if applicable).",
                                    "type": "string"
                                  },
                                  "city": {
                                    "description": "Name of city.",
                                    "example": "Omaha",
                                    "type": "string"
                                  },
                                  "country": {
                                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                    "example": "USA",
                                    "type": "string"
                                  },
                                  "postal_code": {
                                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                    "example": "68022",
                                    "type": "string"
                                  },
                                  "state": {
                                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                    "example": "NE",
                                    "type": "string"
                                  }
                                },
                                "required": ["address1", "city", "country", "postal_code", "state"],
                                "type": "object"
                              },
                              "dba_business_name": {
                                "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                                "type": "string"
                              },
                              "government_id": {
                                "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                                "example": "114-123-1513",
                                "type": "string"
                              },
                              "legal_business_name": {
                                "description": "Legal (formal) business name.",
                                "example": "Acme, Inc.",
                                "type": "string"
                              },
                              "parent_company": {
                                "description": "Parent company name (if applicable).",
                                "type": "string"
                              },
                              "phone_numbers": {
                                "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                                "items": {
                                  "description": "Business phone number, entered in E.164 format.",
                                  "example": "+12124007676",
                                  "type": "string"
                                },
                                "minItems": 1,
                                "type": "array"
                              }
                            },
                            "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                            "type": "object",
                            "description": "Only present when user_type == \"BUSINESS\". Information about the business for which the account is being opened and KYB is being run."
                          },
                          "control_person": {
                            "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                            "properties": {
                              "address": {
                                "description": "Individual's current address",
                                "properties": {
                                  "address1": {
                                    "description": "Valid deliverable address (no PO boxes).",
                                    "example": "123 Old Forest Way",
                                    "type": "string"
                                  },
                                  "address2": {
                                    "description": "Unit or apartment number (if applicable).",
                                    "type": "string"
                                  },
                                  "city": {
                                    "description": "Name of city.",
                                    "example": "Omaha",
                                    "type": "string"
                                  },
                                  "country": {
                                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                    "example": "USA",
                                    "type": "string"
                                  },
                                  "postal_code": {
                                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                    "example": "68022",
                                    "type": "string"
                                  },
                                  "state": {
                                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                    "example": "NE",
                                    "type": "string"
                                  }
                                },
                                "required": ["address1", "city", "country", "postal_code", "state"],
                                "type": "object"
                              },
                              "dob": {
                                "description": "Individual's date of birth, as an RFC 3339 date.",
                                "example": "1991-03-08 08:00:00",
                                "type": "string"
                              },
                              "email": {
                                "description": "Individual's email address.",
                                "example": "tom@middle-earth.com",
                                "type": "string"
                              },
                              "first_name": {
                                "description": "Individual's first name, as it appears on government-issued identity documents.",
                                "example": "Tom",
                                "type": "string"
                              },
                              "last_name": {
                                "description": "Individual's last name, as it appears on government-issued identity documents.",
                                "example": "Bombadil",
                                "type": "string"
                              },
                              "phone_number": {
                                "description": "Individual's phone number, entered in E.164 format.",
                                "example": "+12124007676",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "created": {
                            "description": "Timestamp of when the account holder was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "email": {
                            "description": "<\n  Deprecated.\n  Use control_person.email when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary email of Account Holder.\n",
                            "example": "+12124007676",
                            "type": "string"
                          },
                          "exemption_type": {
                            "description": "The type of KYC exemption for a KYC-Exempt Account Holder.",
                            "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
                            "type": "string"
                          },
                          "external_id": {
                            "description": "Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.",
                            "format": "string",
                            "type": "string"
                          },
                          "individual": {
                            "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                            "properties": {
                              "address": {
                                "description": "Individual's current address",
                                "properties": {
                                  "address1": {
                                    "description": "Valid deliverable address (no PO boxes).",
                                    "example": "123 Old Forest Way",
                                    "type": "string"
                                  },
                                  "address2": {
                                    "description": "Unit or apartment number (if applicable).",
                                    "type": "string"
                                  },
                                  "city": {
                                    "description": "Name of city.",
                                    "example": "Omaha",
                                    "type": "string"
                                  },
                                  "country": {
                                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                    "example": "USA",
                                    "type": "string"
                                  },
                                  "postal_code": {
                                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                    "example": "68022",
                                    "type": "string"
                                  },
                                  "state": {
                                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                    "example": "NE",
                                    "type": "string"
                                  }
                                },
                                "required": ["address1", "city", "country", "postal_code", "state"],
                                "type": "object"
                              },
                              "dob": {
                                "description": "Individual's date of birth, as an RFC 3339 date.",
                                "example": "1991-03-08 08:00:00",
                                "type": "string"
                              },
                              "email": {
                                "description": "Individual's email address.",
                                "example": "tom@middle-earth.com",
                                "type": "string"
                              },
                              "first_name": {
                                "description": "Individual's first name, as it appears on government-issued identity documents.",
                                "example": "Tom",
                                "type": "string"
                              },
                              "last_name": {
                                "description": "Individual's last name, as it appears on government-issued identity documents.",
                                "example": "Bombadil",
                                "type": "string"
                              },
                              "phone_number": {
                                "description": "Individual's phone number, entered in E.164 format.",
                                "example": "+12124007676",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "nature_of_business": {
                            "description": "Only present when user_type == \"BUSINESS\". User-submitted description of the business.",
                            "format": "string",
                            "type": "string"
                          },
                          "phone_number": {
                            "description": "<\n  Deprecated.\n  Use control_person.phone_number when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary phone of Account Holder, entered in E.164 format.\n",
                            "example": "+12124007676",
                            "type": "string"
                          },
                          "status": {
                            "description": "<Deprecated. Use verification_application.status instead>\nKYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                            "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                            "type": "string"
                          },
                          "status_reasons": {
                            "description": "<Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.",
                            "items": {
                              "enum": [
                                "ADDRESS_VERIFICATION_FAILURE",
                                "AGE_THRESHOLD_FAILURE",
                                "COMPLETE_VERIFICATION_FAILURE",
                                "DOB_VERIFICATION_FAILURE",
                                "ID_VERIFICATION_FAILURE",
                                "MAX_DOCUMENT_ATTEMPTS",
                                "MAX_RESUBMISSION_ATTEMPTS",
                                "NAME_VERIFICATION_FAILURE",
                                "OTHER_VERIFICATION_FAILURE",
                                "RISK_THRESHOLD_FAILURE",
                                "WATCHLIST_ALERT_FAILURE"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "token": {
                            "description": "Globally unique identifier for the account holder.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "user_type": {
                            "description": "The type of Account Holder. If the type is \"INDIVIDUAL\", the \"individual\" attribute will be present.\nIf the type is \"BUSINESS\" then the \"business_entity\", \"control_person\", \"beneficial_owner_individuals\", \"beneficial_owner_entities\",\n\"nature_of_business\", and \"website_url\" attributes will be present.\n",
                            "enum": ["BUSINESS", "INDIVIDUAL"],
                            "type": "string"
                          },
                          "verification_application": {
                            "description": "Information about the most recent identity verification attempt",
                            "properties": {
                              "created": {
                                "description": "Timestamp of when the application was created.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "status": {
                                "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                                "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                                "type": "string"
                              },
                              "status_reasons": {
                                "description": "Reason for the evaluation status.",
                                "items": {
                                  "enum": [
                                    "ADDRESS_VERIFICATION_FAILURE",
                                    "AGE_THRESHOLD_FAILURE",
                                    "COMPLETE_VERIFICATION_FAILURE",
                                    "DOB_VERIFICATION_FAILURE",
                                    "ID_VERIFICATION_FAILURE",
                                    "MAX_DOCUMENT_ATTEMPTS",
                                    "MAX_RESUBMISSION_ATTEMPTS",
                                    "NAME_VERIFICATION_FAILURE",
                                    "OTHER_VERIFICATION_FAILURE",
                                    "RISK_THRESHOLD_FAILURE",
                                    "WATCHLIST_ALERT_FAILURE"
                                  ],
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "updated": {
                                "description": "Timestamp of when the application was last updated.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "website_url": {
                            "description": "Only present when user_type == \"BUSINESS\". Business's primary website.",
                            "format": "string",
                            "type": "string"
                          }
                        },
                        "required": ["token"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Whether there are more accounts to be retrieved.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get a list of individual or businesss account holders",
        "tags": ["Account Holder"]
      },
      "post": {
        "description": "Run an individual or business's information through the Customer Identification Program (CIP) and return an `account_token` if the status is accepted or pending (i.e., further action required).\nAll calls to this endpoint will return an immediate response - though in some cases, the response may indicate the workflow is under review or further action will be needed to complete the account creation process.\nThis endpoint can only be used on accounts that are part of the program that the calling API key manages. ",
        "operationId": "postAccountHolders",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "kybRequest": {
                  "summary": "Create an account holder with KYB workflow",
                  "value": {
                    "beneficial_owner_entities": [
                      {
                        "address": {
                          "address1": "300 Normal Forest Way",
                          "city": "Portland",
                          "country": "USA",
                          "postal_code": "90210",
                          "state": "OR"
                        },
                        "dba_name": "MHoldings",
                        "entity_type": "LLC",
                        "government_id": "98-7654321",
                        "incorporation_country": "US",
                        "incorporation_date": "2015-09-17",
                        "incorporation_state": "NV",
                        "legal_business_name": "Majority Holdings LLC",
                        "phone_numbers": ["+12124007676"]
                      }
                    ],
                    "beneficial_owner_individuals": [
                      {
                        "address": {
                          "address1": "300 Normal Forest Way",
                          "city": "Portland",
                          "country": "USA",
                          "postal_code": "90210",
                          "state": "OR"
                        },
                        "dob": "1991-03-08T08:00:00Z",
                        "email": "tim@left-earth.com",
                        "first_name": "Timmy",
                        "government_id": "211-23-1412",
                        "last_name": "Turner",
                        "phone_number": "+12024007611"
                      }
                    ],
                    "business_entity": {
                      "address": {
                        "address1": "123 Old Forest Way",
                        "city": "Omaha",
                        "country": "USA",
                        "postal_code": "61022",
                        "state": "NE"
                      },
                      "dba_name": "Example Business Solutions",
                      "entity_type": "Corporation",
                      "government_id": "12-3456789",
                      "incorporation_country": "US",
                      "incorporation_date": "2010-06-28",
                      "incorporation_state": "DE",
                      "legal_business_name": "Busy Business, Inc.",
                      "phone_numbers": ["+12124007676"]
                    },
                    "control_person": {
                      "address": {
                        "address1": "451 New Forest Way",
                        "city": "Springfield",
                        "country": "USA",
                        "postal_code": "68022",
                        "state": "IL"
                      },
                      "birthdate": "1980-04-12",
                      "dob": "1991-03-08T08:00:00Z",
                      "email": "tom@middle-pluto.com",
                      "first_name": "Tom",
                      "government_id": "111-23-1412",
                      "last_name": "Timothy",
                      "nationality": "US",
                      "phone_number": "+12024008176",
                      "title": "CEO"
                    },
                    "kyb_passed_timestamp": "2022-03-08T08:00:00Z",
                    "nature_of_business": "Software company selling solutions to the restaurant industry",
                    "tos_timestamp": "2022-03-08T08:00:00Z",
                    "website_url": "https://www.mybusiness.com",
                    "workflow": "KYB_BASIC"
                  }
                },
                "kycExemptRequest": {
                  "summary": "Create an account holder with KYC Exempt workflow",
                  "value": {
                    "address": {
                      "address1": "123 Old Forest Way",
                      "city": "Omaha",
                      "country": "USA",
                      "postal_code": "68022",
                      "state": "NE"
                    },
                    "business_account_token": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                    "email": "tom@middle-earth.com",
                    "first_name": "Tom",
                    "kyc_exemption_type": "AUTHORIZED_USER",
                    "last_name": "Bombadil",
                    "phone_number": "+12124007676",
                    "workflow": "KYC_EXEMPT"
                  }
                },
                "kycRequest": {
                  "summary": "Create an account holder with KYC workflow",
                  "value": {
                    "individual": {
                      "address": {
                        "address1": "123 Old Forest Way",
                        "city": "Omaha",
                        "country": "USA",
                        "postal_code": "68022",
                        "state": "NE"
                      },
                      "dob": "1991-03-08 08:00:00",
                      "email": "tom@middle-earth.com",
                      "first_name": "Tom",
                      "government_id": "111-23-1412",
                      "last_name": "Bombadil",
                      "phone_number": "+12124007676"
                    },
                    "tos_timestamp": "2022-03-08 08:00:00",
                    "workflow": "KYC_ADVANCED"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "beneficial_owner_entities": {
                        "description": "List of all entities with >25% ownership in the company. If no entity or individual owns >25% of the company, and the largest shareholder is an entity, please identify them in this field. See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background. If no business owner is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_individuals` must be populated. on entities that should be included.\n",
                        "items": {
                          "properties": {
                            "address": {
                              "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                              "properties": {
                                "address1": {
                                  "description": "Valid deliverable address (no PO boxes).",
                                  "example": "123 Old Forest Way",
                                  "type": "string"
                                },
                                "address2": {
                                  "description": "Unit or apartment number (if applicable).",
                                  "type": "string"
                                },
                                "city": {
                                  "description": "Name of city.",
                                  "example": "Omaha",
                                  "type": "string"
                                },
                                "country": {
                                  "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                  "example": "USA",
                                  "type": "string"
                                },
                                "postal_code": {
                                  "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                  "example": "68022",
                                  "type": "string"
                                },
                                "state": {
                                  "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                  "example": "NE",
                                  "type": "string"
                                }
                              },
                              "required": ["address1", "city", "country", "postal_code", "state"],
                              "type": "object"
                            },
                            "dba_business_name": {
                              "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                              "type": "string"
                            },
                            "government_id": {
                              "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                              "example": "114-123-1513",
                              "type": "string"
                            },
                            "legal_business_name": {
                              "description": "Legal (formal) business name.",
                              "example": "Acme, Inc.",
                              "type": "string"
                            },
                            "parent_company": {
                              "description": "Parent company name (if applicable).",
                              "type": "string"
                            },
                            "phone_numbers": {
                              "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                              "items": {
                                "description": "Business phone number, entered in E.164 format.",
                                "example": "+12124007676",
                                "type": "string"
                              },
                              "minItems": 1,
                              "type": "array"
                            }
                          },
                          "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                          "type": "object"
                        },
                        "minItems": 0,
                        "type": "array"
                      },
                      "beneficial_owner_individuals": {
                        "description": "List of all individuals with >25% ownership in the company. If no entity or individual owns >25% of the company,\nand the largest shareholder is an individual, please identify them in this field.\nSee [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background on individuals that should be included. If no individual is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_entities` must be populated.\n",
                        "items": {
                          "allOf": [
                            {
                              "properties": {
                                "address": {
                                  "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                                  "properties": {
                                    "address1": {
                                      "description": "Valid deliverable address (no PO boxes).",
                                      "example": "123 Old Forest Way",
                                      "type": "string"
                                    },
                                    "address2": {
                                      "description": "Unit or apartment number (if applicable).",
                                      "type": "string"
                                    },
                                    "city": {
                                      "description": "Name of city.",
                                      "example": "Omaha",
                                      "type": "string"
                                    },
                                    "country": {
                                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                      "example": "USA",
                                      "type": "string"
                                    },
                                    "postal_code": {
                                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                      "example": "68022",
                                      "type": "string"
                                    },
                                    "state": {
                                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                      "example": "NE",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["address1", "city", "country", "postal_code", "state"],
                                  "type": "object"
                                },
                                "dob": {
                                  "description": "Individual's date of birth, as an RFC 3339 date.",
                                  "example": "1991-03-08 08:00:00",
                                  "type": "string"
                                },
                                "email": {
                                  "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                                  "example": "tom@middle-earth.com",
                                  "type": "string"
                                },
                                "first_name": {
                                  "description": "Individual's first name, as it appears on government-issued identity documents.",
                                  "example": "Tom",
                                  "type": "string"
                                },
                                "government_id": {
                                  "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                                  "example": "111-23-1412",
                                  "type": "string"
                                },
                                "last_name": {
                                  "description": "Individual's last name, as it appears on government-issued identity documents.",
                                  "example": "Bombadil",
                                  "type": "string"
                                },
                                "phone_number": {
                                  "description": "Individual's phone number, entered in E.164 format.\n",
                                  "example": "+12124007676",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "required": [
                                "address",
                                "dob",
                                "email",
                                "first_name",
                                "government_id",
                                "last_name"
                              ],
                              "type": "object"
                            }
                          ],
                          "description": "Individuals associated with a KYB application. Phone number is optional."
                        },
                        "minItems": 0,
                        "type": "array"
                      },
                      "business_entity": {
                        "properties": {
                          "address": {
                            "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dba_business_name": {
                            "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                            "type": "string"
                          },
                          "government_id": {
                            "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                            "example": "114-123-1513",
                            "type": "string"
                          },
                          "legal_business_name": {
                            "description": "Legal (formal) business name.",
                            "example": "Acme, Inc.",
                            "type": "string"
                          },
                          "parent_company": {
                            "description": "Parent company name (if applicable).",
                            "type": "string"
                          },
                          "phone_numbers": {
                            "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                            "items": {
                              "description": "Business phone number, entered in E.164 format.",
                              "example": "+12124007676",
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array"
                          }
                        },
                        "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                        "type": "object",
                        "description": "Information for business for which the account is being opened and KYB is being run."
                      },
                      "control_person": {
                        "allOf": [
                          {
                            "properties": {
                              "address": {
                                "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                                "properties": {
                                  "address1": {
                                    "description": "Valid deliverable address (no PO boxes).",
                                    "example": "123 Old Forest Way",
                                    "type": "string"
                                  },
                                  "address2": {
                                    "description": "Unit or apartment number (if applicable).",
                                    "type": "string"
                                  },
                                  "city": {
                                    "description": "Name of city.",
                                    "example": "Omaha",
                                    "type": "string"
                                  },
                                  "country": {
                                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                    "example": "USA",
                                    "type": "string"
                                  },
                                  "postal_code": {
                                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                    "example": "68022",
                                    "type": "string"
                                  },
                                  "state": {
                                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                    "example": "NE",
                                    "type": "string"
                                  }
                                },
                                "required": ["address1", "city", "country", "postal_code", "state"],
                                "type": "object"
                              },
                              "dob": {
                                "description": "Individual's date of birth, as an RFC 3339 date.",
                                "example": "1991-03-08 08:00:00",
                                "type": "string"
                              },
                              "email": {
                                "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                                "example": "tom@middle-earth.com",
                                "type": "string"
                              },
                              "first_name": {
                                "description": "Individual's first name, as it appears on government-issued identity documents.",
                                "example": "Tom",
                                "type": "string"
                              },
                              "government_id": {
                                "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                                "example": "111-23-1412",
                                "type": "string"
                              },
                              "last_name": {
                                "description": "Individual's last name, as it appears on government-issued identity documents.",
                                "example": "Bombadil",
                                "type": "string"
                              },
                              "phone_number": {
                                "description": "Individual's phone number, entered in E.164 format.\n",
                                "example": "+12124007676",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "required": [
                              "address",
                              "dob",
                              "email",
                              "first_name",
                              "government_id",
                              "last_name"
                            ],
                            "type": "object"
                          }
                        ],
                        "description": "Individuals associated with a KYB application. Phone number is optional."
                      },
                      "external_id": {
                        "description": "A user provided id that can be used to link an account holder with an external system",
                        "type": "string"
                      },
                      "kyb_passed_timestamp": {
                        "description": "An RFC 3339 timestamp indicating when precomputed KYC was completed on the business with a pass result.\n\nThis field is required only if workflow type is `KYB_BYO`.\n",
                        "example": "2022-03-08 08:00:00",
                        "type": "string"
                      },
                      "nature_of_business": {
                        "description": "Short description of the company's line of business (i.e., what does the company do?).",
                        "example": "Software company selling solutions to the restaurant industry",
                        "type": "string"
                      },
                      "tos_timestamp": {
                        "description": "An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.",
                        "example": "2022-03-08 08:00:00",
                        "type": "string"
                      },
                      "website_url": {
                        "description": "Company website URL.",
                        "example": "www.mybusiness.com",
                        "type": "string"
                      },
                      "workflow": {
                        "description": "Specifies the type of KYB workflow to run.",
                        "enum": ["KYB_BASIC", "KYB_BYO"],
                        "type": "string"
                      }
                    },
                    "required": [
                      "beneficial_owner_entities",
                      "beneficial_owner_individuals",
                      "business_entity",
                      "control_person",
                      "nature_of_business",
                      "tos_timestamp",
                      "workflow"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "external_id": {
                        "description": "A user provided id that can be used to link an account holder with an external system",
                        "type": "string"
                      },
                      "individual": {
                        "description": "Information on individual for whom the account is being opened and KYC is being run.",
                        "allOf": [
                          {
                            "properties": {
                              "address": {
                                "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                                "properties": {
                                  "address1": {
                                    "description": "Valid deliverable address (no PO boxes).",
                                    "example": "123 Old Forest Way",
                                    "type": "string"
                                  },
                                  "address2": {
                                    "description": "Unit or apartment number (if applicable).",
                                    "type": "string"
                                  },
                                  "city": {
                                    "description": "Name of city.",
                                    "example": "Omaha",
                                    "type": "string"
                                  },
                                  "country": {
                                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                    "example": "USA",
                                    "type": "string"
                                  },
                                  "postal_code": {
                                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                    "example": "68022",
                                    "type": "string"
                                  },
                                  "state": {
                                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                    "example": "NE",
                                    "type": "string"
                                  }
                                },
                                "required": ["address1", "city", "country", "postal_code", "state"],
                                "type": "object"
                              },
                              "dob": {
                                "description": "Individual's date of birth, as an RFC 3339 date.",
                                "example": "1991-03-08 08:00:00",
                                "type": "string"
                              },
                              "email": {
                                "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                                "example": "tom@middle-earth.com",
                                "type": "string"
                              },
                              "first_name": {
                                "description": "Individual's first name, as it appears on government-issued identity documents.",
                                "example": "Tom",
                                "type": "string"
                              },
                              "government_id": {
                                "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                                "example": "111-23-1412",
                                "type": "string"
                              },
                              "last_name": {
                                "description": "Individual's last name, as it appears on government-issued identity documents.",
                                "example": "Bombadil",
                                "type": "string"
                              },
                              "phone_number": {
                                "description": "Individual's phone number, entered in E.164 format.\n",
                                "example": "+12124007676",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "required": [
                              "address",
                              "dob",
                              "email",
                              "first_name",
                              "government_id",
                              "last_name",
                              "phone_number"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "kyc_passed_timestamp": {
                        "description": "An RFC 3339 timestamp indicating when precomputed KYC was completed on the individual with a pass result.\n\nThis field is required only if workflow type is `KYC_BYO`.\n",
                        "type": "string"
                      },
                      "tos_timestamp": {
                        "description": "An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.",
                        "type": "string"
                      },
                      "workflow": {
                        "description": "Specifies the type of KYC workflow to run.",
                        "enum": ["KYC_ADVANCED", "KYC_BASIC", "KYC_BYO"],
                        "type": "string"
                      }
                    },
                    "required": ["individual", "tos_timestamp", "workflow"],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "address": {
                        "description": "KYC Exempt user's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                        "properties": {
                          "address1": {
                            "description": "Valid deliverable address (no PO boxes).",
                            "example": "123 Old Forest Way",
                            "type": "string"
                          },
                          "address2": {
                            "description": "Unit or apartment number (if applicable).",
                            "type": "string"
                          },
                          "city": {
                            "description": "Name of city.",
                            "example": "Omaha",
                            "type": "string"
                          },
                          "country": {
                            "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                            "example": "USA",
                            "type": "string"
                          },
                          "postal_code": {
                            "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                            "example": "68022",
                            "type": "string"
                          },
                          "state": {
                            "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                            "example": "NE",
                            "type": "string"
                          }
                        },
                        "required": ["address1", "city", "country", "postal_code", "state"],
                        "type": "object"
                      },
                      "business_account_token": {
                        "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                        "type": "string"
                      },
                      "email": {
                        "description": "The KYC Exempt user's email",
                        "type": "string"
                      },
                      "external_id": {
                        "description": "A user provided id that can be used to link an account holder with an external system",
                        "type": "string"
                      },
                      "first_name": {
                        "description": "The KYC Exempt user's first name",
                        "type": "string"
                      },
                      "kyc_exemption_type": {
                        "description": "Specifies the type of KYC Exempt user",
                        "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
                        "type": "string"
                      },
                      "last_name": {
                        "description": "The KYC Exempt user's last name",
                        "type": "string"
                      },
                      "phone_number": {
                        "description": "The KYC Exempt user's phone number",
                        "type": "string"
                      },
                      "workflow": {
                        "description": "Specifies the workflow type. This must be 'KYC_EXEMPT'",
                        "enum": ["KYC_EXEMPT"],
                        "type": "string"
                      }
                    },
                    "required": [
                      "email",
                      "first_name",
                      "kyc_exemption_type",
                      "last_name",
                      "phone_number",
                      "workflow"
                    ],
                    "type": "object"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "acceptedEvaluationResponse": {
                    "summary": "Accepted KYC/KYB evaluation response",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "business_account_token": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                      "status": "ACCEPTED",
                      "status_reasons": [],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  },
                  "pendingResubmitResponse": {
                    "summary": "Pending resubmit KYC evaluation response",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "status": "PENDING_RESUBMIT",
                      "status_reasons": ["NAME_VERIFICATION_FAILURE"],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when the account holder was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "external_id": {
                      "description": "Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.",
                      "format": "string",
                      "type": "string"
                    },
                    "status": {
                      "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                      "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                      "type": "string"
                    },
                    "status_reasons": {
                      "description": "Reason for the evaluation status.",
                      "items": {
                        "enum": [
                          "ADDRESS_VERIFICATION_FAILURE",
                          "AGE_THRESHOLD_FAILURE",
                          "COMPLETE_VERIFICATION_FAILURE",
                          "DOB_VERIFICATION_FAILURE",
                          "ID_VERIFICATION_FAILURE",
                          "MAX_DOCUMENT_ATTEMPTS",
                          "MAX_RESUBMISSION_ATTEMPTS",
                          "NAME_VERIFICATION_FAILURE",
                          "OTHER_VERIFICATION_FAILURE",
                          "RISK_THRESHOLD_FAILURE",
                          "WATCHLIST_ALERT_FAILURE"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier for the account holder.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": ["account_token", "status", "status_reasons", "token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create an individual or business account holder",
        "tags": ["Account Holder"]
      }
    },
    "/account_holders/{account_holder_token}": {
      "get": {
        "description": "Get an Individual or Business Account Holder and/or their KYC or KYB evaluation status.",
        "operationId": "getAccountHolder",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "acceptedEvaluationResponse": {
                    "summary": "Accepted KYC evaluation response",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "business_account_token": "6b67b340-ed11-4463-a33d-0d7f7fdcd28c",
                      "email": "test@lithic.com",
                      "phone_number": "5555555555",
                      "status": "ACCEPTED",
                      "status_reasons": [],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  },
                  "pendingDocumentResponse": {
                    "summary": "Pending document submission KYC evaluation response",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "status": "PENDING_DOCUMENT",
                      "status_reasons": ["DOB_VERIFICATION_FAILURE"],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "beneficial_owner_entities": {
                      "description": "Only present when user_type == \"BUSINESS\". List of all entities with >25% ownership in the company.\n",
                      "items": {
                        "properties": {
                          "address": {
                            "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dba_business_name": {
                            "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                            "type": "string"
                          },
                          "government_id": {
                            "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                            "example": "114-123-1513",
                            "type": "string"
                          },
                          "legal_business_name": {
                            "description": "Legal (formal) business name.",
                            "example": "Acme, Inc.",
                            "type": "string"
                          },
                          "parent_company": {
                            "description": "Parent company name (if applicable).",
                            "type": "string"
                          },
                          "phone_numbers": {
                            "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                            "items": {
                              "description": "Business phone number, entered in E.164 format.",
                              "example": "+12124007676",
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array"
                          }
                        },
                        "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    },
                    "beneficial_owner_individuals": {
                      "description": "Only present when user_type == \"BUSINESS\". List of all individuals with >25% ownership in the company.\n",
                      "items": {
                        "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                        "properties": {
                          "address": {
                            "description": "Individual's current address",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dob": {
                            "description": "Individual's date of birth, as an RFC 3339 date.",
                            "example": "1991-03-08 08:00:00",
                            "type": "string"
                          },
                          "email": {
                            "description": "Individual's email address.",
                            "example": "tom@middle-earth.com",
                            "type": "string"
                          },
                          "first_name": {
                            "description": "Individual's first name, as it appears on government-issued identity documents.",
                            "example": "Tom",
                            "type": "string"
                          },
                          "last_name": {
                            "description": "Individual's last name, as it appears on government-issued identity documents.",
                            "example": "Bombadil",
                            "type": "string"
                          },
                          "phone_number": {
                            "description": "Individual's phone number, entered in E.164 format.",
                            "example": "+12124007676",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    },
                    "business_account_token": {
                      "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "business_entity": {
                      "properties": {
                        "address": {
                          "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dba_business_name": {
                          "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                          "type": "string"
                        },
                        "government_id": {
                          "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                          "example": "114-123-1513",
                          "type": "string"
                        },
                        "legal_business_name": {
                          "description": "Legal (formal) business name.",
                          "example": "Acme, Inc.",
                          "type": "string"
                        },
                        "parent_company": {
                          "description": "Parent company name (if applicable).",
                          "type": "string"
                        },
                        "phone_numbers": {
                          "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                          "items": {
                            "description": "Business phone number, entered in E.164 format.",
                            "example": "+12124007676",
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        }
                      },
                      "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                      "type": "object",
                      "description": "Only present when user_type == \"BUSINESS\". Information about the business for which the account is being opened and KYB is being run."
                    },
                    "control_person": {
                      "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                      "properties": {
                        "address": {
                          "description": "Individual's current address",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dob": {
                          "description": "Individual's date of birth, as an RFC 3339 date.",
                          "example": "1991-03-08 08:00:00",
                          "type": "string"
                        },
                        "email": {
                          "description": "Individual's email address.",
                          "example": "tom@middle-earth.com",
                          "type": "string"
                        },
                        "first_name": {
                          "description": "Individual's first name, as it appears on government-issued identity documents.",
                          "example": "Tom",
                          "type": "string"
                        },
                        "last_name": {
                          "description": "Individual's last name, as it appears on government-issued identity documents.",
                          "example": "Bombadil",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Individual's phone number, entered in E.164 format.",
                          "example": "+12124007676",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "created": {
                      "description": "Timestamp of when the account holder was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "<\n  Deprecated.\n  Use control_person.email when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary email of Account Holder.\n",
                      "example": "+12124007676",
                      "type": "string"
                    },
                    "exemption_type": {
                      "description": "The type of KYC exemption for a KYC-Exempt Account Holder.",
                      "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
                      "type": "string"
                    },
                    "external_id": {
                      "description": "Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.",
                      "format": "string",
                      "type": "string"
                    },
                    "individual": {
                      "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                      "properties": {
                        "address": {
                          "description": "Individual's current address",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dob": {
                          "description": "Individual's date of birth, as an RFC 3339 date.",
                          "example": "1991-03-08 08:00:00",
                          "type": "string"
                        },
                        "email": {
                          "description": "Individual's email address.",
                          "example": "tom@middle-earth.com",
                          "type": "string"
                        },
                        "first_name": {
                          "description": "Individual's first name, as it appears on government-issued identity documents.",
                          "example": "Tom",
                          "type": "string"
                        },
                        "last_name": {
                          "description": "Individual's last name, as it appears on government-issued identity documents.",
                          "example": "Bombadil",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Individual's phone number, entered in E.164 format.",
                          "example": "+12124007676",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "nature_of_business": {
                      "description": "Only present when user_type == \"BUSINESS\". User-submitted description of the business.",
                      "format": "string",
                      "type": "string"
                    },
                    "phone_number": {
                      "description": "<\n  Deprecated.\n  Use control_person.phone_number when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary phone of Account Holder, entered in E.164 format.\n",
                      "example": "+12124007676",
                      "type": "string"
                    },
                    "status": {
                      "description": "<Deprecated. Use verification_application.status instead>\nKYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                      "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                      "type": "string"
                    },
                    "status_reasons": {
                      "description": "<Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.",
                      "items": {
                        "enum": [
                          "ADDRESS_VERIFICATION_FAILURE",
                          "AGE_THRESHOLD_FAILURE",
                          "COMPLETE_VERIFICATION_FAILURE",
                          "DOB_VERIFICATION_FAILURE",
                          "ID_VERIFICATION_FAILURE",
                          "MAX_DOCUMENT_ATTEMPTS",
                          "MAX_RESUBMISSION_ATTEMPTS",
                          "NAME_VERIFICATION_FAILURE",
                          "OTHER_VERIFICATION_FAILURE",
                          "RISK_THRESHOLD_FAILURE",
                          "WATCHLIST_ALERT_FAILURE"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier for the account holder.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "user_type": {
                      "description": "The type of Account Holder. If the type is \"INDIVIDUAL\", the \"individual\" attribute will be present.\nIf the type is \"BUSINESS\" then the \"business_entity\", \"control_person\", \"beneficial_owner_individuals\", \"beneficial_owner_entities\",\n\"nature_of_business\", and \"website_url\" attributes will be present.\n",
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "type": "string"
                    },
                    "verification_application": {
                      "description": "Information about the most recent identity verification attempt",
                      "properties": {
                        "created": {
                          "description": "Timestamp of when the application was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "status": {
                          "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                          "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                          "type": "string"
                        },
                        "status_reasons": {
                          "description": "Reason for the evaluation status.",
                          "items": {
                            "enum": [
                              "ADDRESS_VERIFICATION_FAILURE",
                              "AGE_THRESHOLD_FAILURE",
                              "COMPLETE_VERIFICATION_FAILURE",
                              "DOB_VERIFICATION_FAILURE",
                              "ID_VERIFICATION_FAILURE",
                              "MAX_DOCUMENT_ATTEMPTS",
                              "MAX_RESUBMISSION_ATTEMPTS",
                              "NAME_VERIFICATION_FAILURE",
                              "OTHER_VERIFICATION_FAILURE",
                              "RISK_THRESHOLD_FAILURE",
                              "WATCHLIST_ALERT_FAILURE"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "updated": {
                          "description": "Timestamp of when the application was last updated.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "website_url": {
                      "description": "Only present when user_type == \"BUSINESS\". Business's primary website.",
                      "format": "string",
                      "type": "string"
                    }
                  },
                  "required": ["token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get an individual or business account holder",
        "tags": ["Account Holder"]
      },
      "patch": {
        "description": "Update the information associated with a particular account holder.",
        "operationId": "patchAccountHolder",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "business_account_token": {
                    "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                    "type": "string"
                  },
                  "email": {
                    "description": "Account holder's email address. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.",
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "Account holder's phone number, entered in E.164 format. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "business_account_token": {
                      "description": "Only applicable for customers using the KYC-Exempt workflow to enroll businesses with authorized users. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                      "type": "string"
                    },
                    "email": {
                      "description": "The newly updated email for the account holder",
                      "type": "string"
                    },
                    "phone_number": {
                      "description": "The newly updated phone_number for the account holder",
                      "type": "string"
                    },
                    "token": {
                      "description": "The token for the account holder that was updated",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          }
        },
        "summary": "Update account holder information",
        "tags": ["Account Holder"]
      }
    },
    "/account_holders/{account_holder_token}/documents": {
      "get": {
        "description": "Retrieve the status of account holder document uploads, or retrieve the upload URLs to process your image uploads.\n\nNote that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).\n\nIn the event your upload URLs have expired, calling this endpoint will refresh them.\nSimilarly, in the event a previous account holder document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.\n\nWhen a new document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` list\nin a `PENDING` state for the corresponding `image_type`.\n",
        "operationId": "getAccountHolderDocuments",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Describes the document and the required document image uploads required to re-run KYC.",
                        "example": {
                          "account_holder_token": "aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149",
                          "document_type": "drivers_license",
                          "required_document_uploads": [
                            {
                              "image_type": "front",
                              "status": "PENDING",
                              "status_reasons": [],
                              "upload_url": "https://lithic-document-verification-uploads.com"
                            },
                            {
                              "image_type": "back",
                              "status": "UPLOADED",
                              "status_reasons": [],
                              "upload_url": "https://lithic-document-verification-uploads.com"
                            }
                          ],
                          "token": "12345678-3630-4cd0-bbec-1a0fa5c7e149"
                        },
                        "properties": {
                          "account_holder_token": {
                            "description": "Globally unique identifier for the account holder.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "document_type": {
                            "description": "Type of documentation to be submitted for verification.",
                            "enum": [
                              "commercial_license",
                              "drivers_license",
                              "passport",
                              "passport_card",
                              "visa"
                            ],
                            "type": "string"
                          },
                          "required_document_uploads": {
                            "items": {
                              "description": "Represents a single image of the document to upload.",
                              "properties": {
                                "image_type": {
                                  "description": "Type of image to upload.",
                                  "enum": ["back", "front"],
                                  "type": "string"
                                },
                                "status": {
                                  "description": "Status of document image upload.",
                                  "enum": ["COMPLETED", "FAILED", "PENDING", "UPLOADED"],
                                  "type": "string"
                                },
                                "status_reasons": {
                                  "items": {
                                    "description": "Reasons for document image upload status.",
                                    "enum": [
                                      "BACK_IMAGE_BLURRY",
                                      "FILE_SIZE_TOO_LARGE",
                                      "FRONT_IMAGE_BLURRY",
                                      "FRONT_IMAGE_GLARE",
                                      "INVALID_FILE_TYPE",
                                      "UNKNOWN_ERROR"
                                    ],
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "upload_url": {
                                  "description": "URL to upload document image to.\n\nNote that the upload URLs expire after 7 days. If an upload URL expires, you can\nrefresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.\n",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "token": {
                            "description": "Globally unique identifier for the document.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get account holder document uploads",
        "tags": ["Account Holder"]
      },
      "post": {
        "description": "Use this endpoint to identify which type of supported government-issued documentation you will upload for further verification.\nIt will return two URLs to upload your document images to - one for the front image and one for the back image.\n\nThis endpoint is only valid for evaluations in a `PENDING_DOCUMENT` state.\n\nUploaded images must either be a `jpg` or `png` file, and each must be less than 15 MiB. Once both required uploads have been successfully completed, your document will be run through KYC verification.\n\nIf you have registered a webhook, you will receive evaluation updates for any document submission evaluations, as well as for any failed document uploads.\n\nTwo document submission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended. Currently only one type of\naccount holder document is supported per KYC verification.\n",
        "operationId": "postAccountHolderDocuments",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "recieveLinkForDriversLicense": {
                  "summary": "Initiate account holder document upload",
                  "value": {
                    "document_type": "drivers_license"
                  }
                }
              },
              "schema": {
                "properties": {
                  "document_type": {
                    "description": "Type of the document to upload.",
                    "enum": ["commercial_license", "drivers_license", "passport", "passport_card", "visa"],
                    "type": "string"
                  }
                },
                "required": ["document_type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Describes the document and the required document image uploads required to re-run KYC.",
                  "example": {
                    "account_holder_token": "aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149",
                    "document_type": "drivers_license",
                    "required_document_uploads": [
                      {
                        "image_type": "front",
                        "status": "PENDING",
                        "status_reasons": [],
                        "upload_url": "https://lithic-document-verification-uploads.com"
                      },
                      {
                        "image_type": "back",
                        "status": "UPLOADED",
                        "status_reasons": [],
                        "upload_url": "https://lithic-document-verification-uploads.com"
                      }
                    ],
                    "token": "12345678-3630-4cd0-bbec-1a0fa5c7e149"
                  },
                  "properties": {
                    "account_holder_token": {
                      "description": "Globally unique identifier for the account holder.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "document_type": {
                      "description": "Type of documentation to be submitted for verification.",
                      "enum": ["commercial_license", "drivers_license", "passport", "passport_card", "visa"],
                      "type": "string"
                    },
                    "required_document_uploads": {
                      "items": {
                        "description": "Represents a single image of the document to upload.",
                        "properties": {
                          "image_type": {
                            "description": "Type of image to upload.",
                            "enum": ["back", "front"],
                            "type": "string"
                          },
                          "status": {
                            "description": "Status of document image upload.",
                            "enum": ["COMPLETED", "FAILED", "PENDING", "UPLOADED"],
                            "type": "string"
                          },
                          "status_reasons": {
                            "items": {
                              "description": "Reasons for document image upload status.",
                              "enum": [
                                "BACK_IMAGE_BLURRY",
                                "FILE_SIZE_TOO_LARGE",
                                "FRONT_IMAGE_BLURRY",
                                "FRONT_IMAGE_GLARE",
                                "INVALID_FILE_TYPE",
                                "UNKNOWN_ERROR"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "upload_url": {
                            "description": "URL to upload document image to.\n\nNote that the upload URLs expire after 7 days. If an upload URL expires, you can\nrefresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.\n",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier for the document.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Initiate account holder document upload",
        "tags": ["Account Holder"]
      }
    },
    "/account_holders/{account_holder_token}/documents/{document_token}": {
      "get": {
        "description": "Check the status of an account holder document upload, or retrieve the upload URLs to process your image uploads.\n\nNote that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).\n\nIn the event your upload URLs have expired, calling this endpoint will refresh them.\nSimilarly, in the event a document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.\n\nWhen a new account holder document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` array\nin a `PENDING` state for the corresponding `image_type`.\n",
        "operationId": "getAccountHolderDocumentByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for the document.",
            "examples": {
              "documentTokenExample": {
                "summary": "A sample document token",
                "value": "76ca80c3-bf90-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "document_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Describes the document and the required document image uploads required to re-run KYC.",
                  "example": {
                    "account_holder_token": "aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149",
                    "document_type": "drivers_license",
                    "required_document_uploads": [
                      {
                        "image_type": "front",
                        "status": "PENDING",
                        "status_reasons": [],
                        "upload_url": "https://lithic-document-verification-uploads.com"
                      },
                      {
                        "image_type": "back",
                        "status": "UPLOADED",
                        "status_reasons": [],
                        "upload_url": "https://lithic-document-verification-uploads.com"
                      }
                    ],
                    "token": "12345678-3630-4cd0-bbec-1a0fa5c7e149"
                  },
                  "properties": {
                    "account_holder_token": {
                      "description": "Globally unique identifier for the account holder.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "document_type": {
                      "description": "Type of documentation to be submitted for verification.",
                      "enum": ["commercial_license", "drivers_license", "passport", "passport_card", "visa"],
                      "type": "string"
                    },
                    "required_document_uploads": {
                      "items": {
                        "description": "Represents a single image of the document to upload.",
                        "properties": {
                          "image_type": {
                            "description": "Type of image to upload.",
                            "enum": ["back", "front"],
                            "type": "string"
                          },
                          "status": {
                            "description": "Status of document image upload.",
                            "enum": ["COMPLETED", "FAILED", "PENDING", "UPLOADED"],
                            "type": "string"
                          },
                          "status_reasons": {
                            "items": {
                              "description": "Reasons for document image upload status.",
                              "enum": [
                                "BACK_IMAGE_BLURRY",
                                "FILE_SIZE_TOO_LARGE",
                                "FRONT_IMAGE_BLURRY",
                                "FRONT_IMAGE_GLARE",
                                "INVALID_FILE_TYPE",
                                "UNKNOWN_ERROR"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "upload_url": {
                            "description": "URL to upload document image to.\n\nNote that the upload URLs expire after 7 days. If an upload URL expires, you can\nrefresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.\n",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier for the document.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get account holder document upload status",
        "tags": ["Account Holder"]
      }
    },
    "/account_holders/{account_holder_token}/resubmit": {
      "post": {
        "description": "Resubmit a KYC submission. This endpoint should be used in cases where a KYC submission returned a `PENDING_RESUBMIT` result,\nmeaning one or more critical KYC fields may have been mis-entered and the individual's identity has not yet been successfully verified.\nThis step must be completed in order to proceed with the KYC evaluation.\n\nTwo resubmission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended.\n",
        "operationId": "postAccountHolderResubmit",
        "parameters": [
          {
            "description": "Globally unique identifier for the account holder.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample account holder token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "account_holder_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "individual": {
                    "description": "Information on individual for whom the account is being opened and KYC is being re-run.",
                    "allOf": [
                      {
                        "properties": {
                          "address": {
                            "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dob": {
                            "description": "Individual's date of birth, as an RFC 3339 date.",
                            "example": "1991-03-08 08:00:00",
                            "type": "string"
                          },
                          "email": {
                            "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                            "example": "tom@middle-earth.com",
                            "type": "string"
                          },
                          "first_name": {
                            "description": "Individual's first name, as it appears on government-issued identity documents.",
                            "example": "Tom",
                            "type": "string"
                          },
                          "government_id": {
                            "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                            "example": "111-23-1412",
                            "type": "string"
                          },
                          "last_name": {
                            "description": "Individual's last name, as it appears on government-issued identity documents.",
                            "example": "Bombadil",
                            "type": "string"
                          },
                          "phone_number": {
                            "description": "Individual's phone number, entered in E.164 format.\n",
                            "example": "+12124007676",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "required": [
                          "address",
                          "dob",
                          "email",
                          "first_name",
                          "government_id",
                          "last_name",
                          "phone_number"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "tos_timestamp": {
                    "description": "An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.",
                    "example": "2022-03-08 08:00:00",
                    "type": "string"
                  },
                  "workflow": {
                    "default": "KYC_ADVANCED",
                    "enum": ["KYC_ADVANCED"],
                    "type": "string"
                  }
                },
                "required": ["individual", "tos_timestamp", "workflow"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "acceptedEvaluationResponse": {
                    "summary": "Accepted KYC evaluation response",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "status": "ACCEPTED",
                      "status_reasons": [],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  },
                  "maxSubmissions": {
                    "summary": "KYC rejected for too many resubmissions",
                    "value": {
                      "account_token": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "status": "REJECTED",
                      "status_reasons": ["MAX_RESUBMISSION_ATTEMPTS"],
                      "token": "12345678-aa69-4cbc-a946-30d90181b621"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "beneficial_owner_entities": {
                      "description": "Only present when user_type == \"BUSINESS\". List of all entities with >25% ownership in the company.\n",
                      "items": {
                        "properties": {
                          "address": {
                            "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dba_business_name": {
                            "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                            "type": "string"
                          },
                          "government_id": {
                            "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                            "example": "114-123-1513",
                            "type": "string"
                          },
                          "legal_business_name": {
                            "description": "Legal (formal) business name.",
                            "example": "Acme, Inc.",
                            "type": "string"
                          },
                          "parent_company": {
                            "description": "Parent company name (if applicable).",
                            "type": "string"
                          },
                          "phone_numbers": {
                            "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                            "items": {
                              "description": "Business phone number, entered in E.164 format.",
                              "example": "+12124007676",
                              "type": "string"
                            },
                            "minItems": 1,
                            "type": "array"
                          }
                        },
                        "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    },
                    "beneficial_owner_individuals": {
                      "description": "Only present when user_type == \"BUSINESS\". List of all individuals with >25% ownership in the company.\n",
                      "items": {
                        "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                        "properties": {
                          "address": {
                            "description": "Individual's current address",
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "123 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "type": "string"
                              },
                              "city": {
                                "description": "Name of city.",
                                "example": "Omaha",
                                "type": "string"
                              },
                              "country": {
                                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                                "example": "68022",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                                "example": "NE",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          },
                          "dob": {
                            "description": "Individual's date of birth, as an RFC 3339 date.",
                            "example": "1991-03-08 08:00:00",
                            "type": "string"
                          },
                          "email": {
                            "description": "Individual's email address.",
                            "example": "tom@middle-earth.com",
                            "type": "string"
                          },
                          "first_name": {
                            "description": "Individual's first name, as it appears on government-issued identity documents.",
                            "example": "Tom",
                            "type": "string"
                          },
                          "last_name": {
                            "description": "Individual's last name, as it appears on government-issued identity documents.",
                            "example": "Bombadil",
                            "type": "string"
                          },
                          "phone_number": {
                            "description": "Individual's phone number, entered in E.164 format.",
                            "example": "+12124007676",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "minItems": 0,
                      "type": "array"
                    },
                    "business_account_token": {
                      "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "business_entity": {
                      "properties": {
                        "address": {
                          "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dba_business_name": {
                          "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                          "type": "string"
                        },
                        "government_id": {
                          "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                          "example": "114-123-1513",
                          "type": "string"
                        },
                        "legal_business_name": {
                          "description": "Legal (formal) business name.",
                          "example": "Acme, Inc.",
                          "type": "string"
                        },
                        "parent_company": {
                          "description": "Parent company name (if applicable).",
                          "type": "string"
                        },
                        "phone_numbers": {
                          "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                          "items": {
                            "description": "Business phone number, entered in E.164 format.",
                            "example": "+12124007676",
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        }
                      },
                      "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
                      "type": "object",
                      "description": "Only present when user_type == \"BUSINESS\". Information about the business for which the account is being opened and KYB is being run."
                    },
                    "control_person": {
                      "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                      "properties": {
                        "address": {
                          "description": "Individual's current address",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dob": {
                          "description": "Individual's date of birth, as an RFC 3339 date.",
                          "example": "1991-03-08 08:00:00",
                          "type": "string"
                        },
                        "email": {
                          "description": "Individual's email address.",
                          "example": "tom@middle-earth.com",
                          "type": "string"
                        },
                        "first_name": {
                          "description": "Individual's first name, as it appears on government-issued identity documents.",
                          "example": "Tom",
                          "type": "string"
                        },
                        "last_name": {
                          "description": "Individual's last name, as it appears on government-issued identity documents.",
                          "example": "Bombadil",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Individual's phone number, entered in E.164 format.",
                          "example": "+12124007676",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "created": {
                      "description": "Timestamp of when the account holder was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "email": {
                      "description": "<\n  Deprecated.\n  Use control_person.email when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary email of Account Holder.\n",
                      "example": "+12124007676",
                      "type": "string"
                    },
                    "exemption_type": {
                      "description": "The type of KYC exemption for a KYC-Exempt Account Holder.",
                      "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
                      "type": "string"
                    },
                    "external_id": {
                      "description": "Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.",
                      "format": "string",
                      "type": "string"
                    },
                    "individual": {
                      "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
                      "properties": {
                        "address": {
                          "description": "Individual's current address",
                          "properties": {
                            "address1": {
                              "description": "Valid deliverable address (no PO boxes).",
                              "example": "123 Old Forest Way",
                              "type": "string"
                            },
                            "address2": {
                              "description": "Unit or apartment number (if applicable).",
                              "type": "string"
                            },
                            "city": {
                              "description": "Name of city.",
                              "example": "Omaha",
                              "type": "string"
                            },
                            "country": {
                              "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                              "example": "USA",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                              "example": "68022",
                              "type": "string"
                            },
                            "state": {
                              "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                              "example": "NE",
                              "type": "string"
                            }
                          },
                          "required": ["address1", "city", "country", "postal_code", "state"],
                          "type": "object"
                        },
                        "dob": {
                          "description": "Individual's date of birth, as an RFC 3339 date.",
                          "example": "1991-03-08 08:00:00",
                          "type": "string"
                        },
                        "email": {
                          "description": "Individual's email address.",
                          "example": "tom@middle-earth.com",
                          "type": "string"
                        },
                        "first_name": {
                          "description": "Individual's first name, as it appears on government-issued identity documents.",
                          "example": "Tom",
                          "type": "string"
                        },
                        "last_name": {
                          "description": "Individual's last name, as it appears on government-issued identity documents.",
                          "example": "Bombadil",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Individual's phone number, entered in E.164 format.",
                          "example": "+12124007676",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "nature_of_business": {
                      "description": "Only present when user_type == \"BUSINESS\". User-submitted description of the business.",
                      "format": "string",
                      "type": "string"
                    },
                    "phone_number": {
                      "description": "<\n  Deprecated.\n  Use control_person.phone_number when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary phone of Account Holder, entered in E.164 format.\n",
                      "example": "+12124007676",
                      "type": "string"
                    },
                    "status": {
                      "description": "<Deprecated. Use verification_application.status instead>\nKYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                      "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                      "type": "string"
                    },
                    "status_reasons": {
                      "description": "<Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.",
                      "items": {
                        "enum": [
                          "ADDRESS_VERIFICATION_FAILURE",
                          "AGE_THRESHOLD_FAILURE",
                          "COMPLETE_VERIFICATION_FAILURE",
                          "DOB_VERIFICATION_FAILURE",
                          "ID_VERIFICATION_FAILURE",
                          "MAX_DOCUMENT_ATTEMPTS",
                          "MAX_RESUBMISSION_ATTEMPTS",
                          "NAME_VERIFICATION_FAILURE",
                          "OTHER_VERIFICATION_FAILURE",
                          "RISK_THRESHOLD_FAILURE",
                          "WATCHLIST_ALERT_FAILURE"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier for the account holder.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "user_type": {
                      "description": "The type of Account Holder. If the type is \"INDIVIDUAL\", the \"individual\" attribute will be present.\nIf the type is \"BUSINESS\" then the \"business_entity\", \"control_person\", \"beneficial_owner_individuals\", \"beneficial_owner_entities\",\n\"nature_of_business\", and \"website_url\" attributes will be present.\n",
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "type": "string"
                    },
                    "verification_application": {
                      "description": "Information about the most recent identity verification attempt",
                      "properties": {
                        "created": {
                          "description": "Timestamp of when the application was created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "status": {
                          "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                          "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                          "type": "string"
                        },
                        "status_reasons": {
                          "description": "Reason for the evaluation status.",
                          "items": {
                            "enum": [
                              "ADDRESS_VERIFICATION_FAILURE",
                              "AGE_THRESHOLD_FAILURE",
                              "COMPLETE_VERIFICATION_FAILURE",
                              "DOB_VERIFICATION_FAILURE",
                              "ID_VERIFICATION_FAILURE",
                              "MAX_DOCUMENT_ATTEMPTS",
                              "MAX_RESUBMISSION_ATTEMPTS",
                              "NAME_VERIFICATION_FAILURE",
                              "OTHER_VERIFICATION_FAILURE",
                              "RISK_THRESHOLD_FAILURE",
                              "WATCHLIST_ALERT_FAILURE"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "updated": {
                          "description": "Timestamp of when the application was last updated.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "website_url": {
                      "description": "Only present when user_type == \"BUSINESS\". Business's primary website.",
                      "format": "string",
                      "type": "string"
                    }
                  },
                  "required": ["token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Resubmit account holder information",
        "tags": ["Account Holder"]
      }
    },
    "/accounts": {
      "get": {
        "description": "List account configurations.\n",
        "operationId": "getAccounts",
        "parameters": [
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAccounts": {
                    "summary": "List accounts",
                    "value": {
                      "data": [
                        {
                          "spend_limit": {
                            "daily": 1000,
                            "lifetime": 10000,
                            "monthly": 4000
                          },
                          "state": "ACTIVE",
                          "token": "b68b7424-aa69-4cbc-a946-30d90181b621"
                        }
                      ],
                      "has_more": false
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_holder": {
                            "properties": {
                              "business_account_token": {
                                "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.",
                                "example": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                                "type": "string"
                              },
                              "email": {
                                "description": "Email address.",
                                "example": "jack@lithic.com",
                                "type": "string"
                              },
                              "phone_number": {
                                "description": "Phone number of the individual.",
                                "example": "+12124007676",
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier for the account holder.",
                                "example": "95e5f1b7-cfd5-4520-aa3c-2451bab8608d",
                                "type": "string"
                              }
                            },
                            "required": ["business_account_token", "email", "phone_number", "token"],
                            "type": "object"
                          },
                          "auth_rule_tokens": {
                            "description": "List of identifiers for the Auth Rule(s) that are applied on the account.\n",
                            "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "spend_limit": {
                            "description": "Spend limit information for the user containing the daily, monthly, and lifetime spend limit of the account. Any charges to a card owned by this account will be declined once their transaction volume has surpassed the value in the applicable time limit (rolling). A lifetime limit of 0 indicates that the lifetime limit feature is disabled.\n",
                            "properties": {
                              "daily": {
                                "description": "Daily spend limit (in cents).",
                                "example": 10000,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "lifetime": {
                                "description": "Total spend limit over account lifetime (in cents).",
                                "example": 100000,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "monthly": {
                                "description": "Monthly spend limit (in cents).",
                                "example": 40000,
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": ["daily", "lifetime", "monthly"],
                            "type": "object"
                          },
                          "state": {
                            "description": "Account state:\n  * `ACTIVE` - Account is able to transact and create new cards.\n  * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.\n",
                            "enum": ["ACTIVE", "PAUSED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for the account. This is the same as the account_token returned by the enroll endpoint. If using this parameter, do not include pagination.\n",
                            "example": "b68b7424-aa69-4cbc-a946-30d90181b621",
                            "format": "uuid",
                            "type": "string"
                          },
                          "verification_address": {
                            "properties": {
                              "address1": {
                                "description": "Valid deliverable address (no PO boxes).",
                                "example": "124 Old Forest Way",
                                "type": "string"
                              },
                              "address2": {
                                "description": "Unit or apartment number (if applicable).",
                                "example": "Apt 21",
                                "type": "string"
                              },
                              "city": {
                                "description": "City name.",
                                "example": "Seattle",
                                "type": "string"
                              },
                              "country": {
                                "description": "Country name. Only USA is currently supported.",
                                "example": "USA",
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.",
                                "example": "98109",
                                "type": "string"
                              },
                              "state": {
                                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.",
                                "example": "WA",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "type": "object"
                          }
                        },
                        "required": ["spend_limit", "state", "token"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Whether there are more accounts to be retrieved.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List accounts",
        "tags": ["Account"]
      }
    },
    "/accounts/{account_token}": {
      "get": {
        "description": "Get account configuration such as spend limits.",
        "operationId": "getAccountByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for account.",
            "examples": {
              "accountTokenExample": {
                "summary": "A sample account token",
                "value": "d86a0a4d-7459-471a-83b4-431136320828"
              }
            },
            "in": "path",
            "name": "account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_holder": {
                      "properties": {
                        "business_account_token": {
                          "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.",
                          "example": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                          "type": "string"
                        },
                        "email": {
                          "description": "Email address.",
                          "example": "jack@lithic.com",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Phone number of the individual.",
                          "example": "+12124007676",
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier for the account holder.",
                          "example": "95e5f1b7-cfd5-4520-aa3c-2451bab8608d",
                          "type": "string"
                        }
                      },
                      "required": ["business_account_token", "email", "phone_number", "token"],
                      "type": "object"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the account.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "spend_limit": {
                      "description": "Spend limit information for the user containing the daily, monthly, and lifetime spend limit of the account. Any charges to a card owned by this account will be declined once their transaction volume has surpassed the value in the applicable time limit (rolling). A lifetime limit of 0 indicates that the lifetime limit feature is disabled.\n",
                      "properties": {
                        "daily": {
                          "description": "Daily spend limit (in cents).",
                          "example": 10000,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "lifetime": {
                          "description": "Total spend limit over account lifetime (in cents).",
                          "example": 100000,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "monthly": {
                          "description": "Monthly spend limit (in cents).",
                          "example": 40000,
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "required": ["daily", "lifetime", "monthly"],
                      "type": "object"
                    },
                    "state": {
                      "description": "Account state:\n  * `ACTIVE` - Account is able to transact and create new cards.\n  * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.\n",
                      "enum": ["ACTIVE", "PAUSED"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the account. This is the same as the account_token returned by the enroll endpoint. If using this parameter, do not include pagination.\n",
                      "example": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "format": "uuid",
                      "type": "string"
                    },
                    "verification_address": {
                      "properties": {
                        "address1": {
                          "description": "Valid deliverable address (no PO boxes).",
                          "example": "124 Old Forest Way",
                          "type": "string"
                        },
                        "address2": {
                          "description": "Unit or apartment number (if applicable).",
                          "example": "Apt 21",
                          "type": "string"
                        },
                        "city": {
                          "description": "City name.",
                          "example": "Seattle",
                          "type": "string"
                        },
                        "country": {
                          "description": "Country name. Only USA is currently supported.",
                          "example": "USA",
                          "type": "string"
                        },
                        "postal_code": {
                          "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.",
                          "example": "98109",
                          "type": "string"
                        },
                        "state": {
                          "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.",
                          "example": "WA",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "type": "object"
                    }
                  },
                  "required": ["spend_limit", "state", "token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get account",
        "tags": ["Account"]
      },
      "patch": {
        "description": "Update account configuration such as spend limits and verification address. Can only be run on accounts that are part of the program managed by this API key.\n\nAccounts that are in the `PAUSED` state will not be able to transact or create new cards.\n",
        "operationId": "patchAccountByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for account.",
            "examples": {
              "accountTokenExample": {
                "summary": "A sample account token",
                "value": "d86a0a4d-7459-471a-83b4-431136320828"
              }
            },
            "in": "path",
            "name": "account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "setDailySpendLimit": {
                  "summary": "Update daily spend limit",
                  "value": {
                    "daily_spend_limit": 1000
                  }
                }
              },
              "schema": {
                "properties": {
                  "daily_spend_limit": {
                    "default": 125000,
                    "description": "Amount (in cents) for the account's daily spend limit.\nBy default the daily spend limit is set to $1,250.\n",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "lifetime_spend_limit": {
                    "default": 0,
                    "description": "Amount (in cents) for the account's lifetime spend limit. Once this limit is reached, no transactions will be accepted on any card created for this account until the limit is updated.\nNote that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the account limit. This behavior differs from the daily spend limit and the monthly spend limit.\n",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "monthly_spend_limit": {
                    "default": 500000,
                    "description": "Amount (in cents) for the account's monthly spend limit.\nBy default the monthly spend limit is set to $5,000.\n",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "state": {
                    "description": "Account states.",
                    "enum": ["ACTIVE", "PAUSED"],
                    "type": "string"
                  },
                  "verification_address": {
                    "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                    "properties": {
                      "address1": {
                        "type": "string"
                      },
                      "address2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "postal_code": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "exampleResponse": {
                    "value": {
                      "spend_limit": {
                        "daily": 1000,
                        "lifetime": 100000,
                        "monthly": 40000
                      },
                      "state": "ACTIVE",
                      "token": "ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1",
                      "verification_address": {
                        "address1": "5 Broad Street",
                        "address2": "",
                        "city": "New York",
                        "country": "USA",
                        "postal_code": "10001",
                        "state": "NY"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "account_holder": {
                      "properties": {
                        "business_account_token": {
                          "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.",
                          "example": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                          "type": "string"
                        },
                        "email": {
                          "description": "Email address.",
                          "example": "jack@lithic.com",
                          "type": "string"
                        },
                        "phone_number": {
                          "description": "Phone number of the individual.",
                          "example": "+12124007676",
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier for the account holder.",
                          "example": "95e5f1b7-cfd5-4520-aa3c-2451bab8608d",
                          "type": "string"
                        }
                      },
                      "required": ["business_account_token", "email", "phone_number", "token"],
                      "type": "object"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the account.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "spend_limit": {
                      "description": "Spend limit information for the user containing the daily, monthly, and lifetime spend limit of the account. Any charges to a card owned by this account will be declined once their transaction volume has surpassed the value in the applicable time limit (rolling). A lifetime limit of 0 indicates that the lifetime limit feature is disabled.\n",
                      "properties": {
                        "daily": {
                          "description": "Daily spend limit (in cents).",
                          "example": 10000,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "lifetime": {
                          "description": "Total spend limit over account lifetime (in cents).",
                          "example": 100000,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "monthly": {
                          "description": "Monthly spend limit (in cents).",
                          "example": 40000,
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "required": ["daily", "lifetime", "monthly"],
                      "type": "object"
                    },
                    "state": {
                      "description": "Account state:\n  * `ACTIVE` - Account is able to transact and create new cards.\n  * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.\n",
                      "enum": ["ACTIVE", "PAUSED"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the account. This is the same as the account_token returned by the enroll endpoint. If using this parameter, do not include pagination.\n",
                      "example": "b68b7424-aa69-4cbc-a946-30d90181b621",
                      "format": "uuid",
                      "type": "string"
                    },
                    "verification_address": {
                      "properties": {
                        "address1": {
                          "description": "Valid deliverable address (no PO boxes).",
                          "example": "124 Old Forest Way",
                          "type": "string"
                        },
                        "address2": {
                          "description": "Unit or apartment number (if applicable).",
                          "example": "Apt 21",
                          "type": "string"
                        },
                        "city": {
                          "description": "City name.",
                          "example": "Seattle",
                          "type": "string"
                        },
                        "country": {
                          "description": "Country name. Only USA is currently supported.",
                          "example": "USA",
                          "type": "string"
                        },
                        "postal_code": {
                          "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.",
                          "example": "98109",
                          "type": "string"
                        },
                        "state": {
                          "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.",
                          "example": "WA",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "type": "object"
                    }
                  },
                  "required": ["spend_limit", "state", "token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update account",
        "tags": ["Account"]
      }
    },
    "/accounts/{account_token}/credit_configuration": {
      "get": {
        "description": "Get an Account's credit configuration",
        "operationId": "getAccountCreditConfiguration",
        "parameters": [
          {
            "description": "Globally unique identifier for account.",
            "examples": {
              "accountTokenExample": {
                "summary": "A sample account token",
                "value": "d86a0a4d-7459-471a-83b4-431136320828"
              }
            },
            "in": "path",
            "name": "account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "collections_configuration": {
                      "properties": {
                        "billing_period": {
                          "description": "Number of days within the billing period",
                          "type": "integer"
                        },
                        "external_bank_account_token": {
                          "description": "The external bank account token to use for auto-collections",
                          "format": "uuid",
                          "type": "string"
                        },
                        "payment_period": {
                          "description": "Number of days after the billing period ends that a payment is required",
                          "type": "integer"
                        }
                      },
                      "required": ["billing_period", "payment_period"],
                      "type": "object"
                    },
                    "credit_limit": {
                      "description": "Credit limit extended to the Account",
                      "type": "integer"
                    },
                    "token": {
                      "description": "Account token",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": ["token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client is not authorized to call the endpoint\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get account's credit configuration",
        "tags": ["Account"]
      },
      "patch": {
        "description": "Update a Business Accounts credit configuration",
        "operationId": "patchAccountCreditConfiguration",
        "parameters": [
          {
            "description": "Globally unique identifier for account.",
            "examples": {
              "accountTokenExample": {
                "summary": "A sample account token",
                "value": "d86a0a4d-7459-471a-83b4-431136320828"
              }
            },
            "in": "path",
            "name": "account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "billing_period": {
                    "description": "Number of days within the billing period",
                    "type": "integer"
                  },
                  "credit_limit": {
                    "description": "Credit limit extended to the Business Account",
                    "type": "integer"
                  },
                  "external_bank_account_token": {
                    "description": "The external bank account token to use for auto-collections",
                    "format": "uuid",
                    "type": "string"
                  },
                  "payment_period": {
                    "description": "Number of days after the billing period ends that a payment is required",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "collections_configuration": {
                      "properties": {
                        "billing_period": {
                          "description": "Number of days within the billing period",
                          "type": "integer"
                        },
                        "external_bank_account_token": {
                          "description": "The external bank account token to use for auto-collections",
                          "format": "uuid",
                          "type": "string"
                        },
                        "payment_period": {
                          "description": "Number of days after the billing period ends that a payment is required",
                          "type": "integer"
                        }
                      },
                      "required": ["billing_period", "payment_period"],
                      "type": "object"
                    },
                    "credit_limit": {
                      "description": "Credit limit extended to the Account",
                      "type": "integer"
                    },
                    "token": {
                      "description": "Account token",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": ["token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client is not authorized to call the endpoint\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update business account's credit configuration",
        "tags": ["Account"]
      }
    },
    "/accounts/{account_token}/spend_limits": {
      "get": {
        "description": "Get an Account's available spend limits, which is based on the spend limit configured on the Account and the amount already spent over the spend limit's duration. For example, if the Account has a daily spend limit of $1000 configured, and has spent $600 in the last 24 hours, the available spend limit returned would be $400.",
        "operationId": "getAccountSpendLimits",
        "parameters": [
          {
            "description": "Globally unique identifier for account.",
            "examples": {
              "accountTokenExample": {
                "summary": "A sample account token",
                "value": "d86a0a4d-7459-471a-83b4-431136320828"
              }
            },
            "in": "path",
            "name": "account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available_spend_limit": {
                      "properties": {
                        "daily": {
                          "description": "The available spend limit relative to the daily limit configured on the Account.",
                          "example": 100000,
                          "type": "integer"
                        },
                        "lifetime": {
                          "description": "The available spend limit relative to the lifetime limit configured on the Account.",
                          "example": 300000,
                          "type": "integer"
                        },
                        "monthly": {
                          "description": "The available spend limit relative to the monthly limit configured on the Account.",
                          "example": 200000,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": ["available_spend_limit"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client is not authorized to call the endpoint\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get account's available spend limits",
        "tags": ["Account"]
      }
    },
    "/aggregate_balances": {
      "get": {
        "description": "Get the aggregated balance across all end-user accounts by financial account type",
        "operationId": "getAggregateBalances",
        "parameters": [
          {
            "description": "Get the aggregate balance for a given Financial Account type.",
            "in": "query",
            "name": "financial_account_type",
            "schema": {
              "enum": ["ISSUING", "OPERATING", "RESERVE"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Aggregate Balance across all end-user accounts",
                        "properties": {
                          "available_amount": {
                            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time for when the balance was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                            "type": "string"
                          },
                          "financial_account_type": {
                            "description": "Type of financial account",
                            "enum": ["ISSUING", "OPERATING", "RESERVE"],
                            "type": "string"
                          },
                          "last_financial_account_token": {
                            "description": "Globally unique identifier for the financial account that had its balance updated most recently",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_event_token": {
                            "description": "Globally unique identifier for the last transaction event that impacted this balance",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_token": {
                            "description": "Globally unique identifier for the last transaction that impacted this balance",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pending_amount": {
                            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "total_amount": {
                            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "updated": {
                            "description": "Date and time for when the balance was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "available_amount",
                          "created",
                          "currency",
                          "financial_account_type",
                          "last_financial_account_token",
                          "last_transaction_event_token",
                          "last_transaction_token",
                          "pending_amount",
                          "total_amount",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List aggregate balances",
        "tags": ["Balance"]
      }
    },
    "/auth_rules": {
      "get": {
        "description": "Return all of the Auth Rules under the program.\n",
        "operationId": "getAuthRules",
        "parameters": [
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "account_tokens": {
                                "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "allowed_countries": {
                                "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                                "example": ["MEX"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "allowed_mcc": {
                                "description": "Merchant category codes for which the Auth Rule permits transactions.",
                                "example": ["3000"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "blocked_countries": {
                                "description": "Countries in which the Auth Rule automatically declines transactions.",
                                "example": ["CAN", "USA"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "blocked_mcc": {
                                "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                                "example": ["5811", "5812"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "card_tokens": {
                                "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "program_level": {
                                "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                                "example": false,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "state": {
                                "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                                "enum": ["ACTIVE", "INACTIVE"],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier.",
                                "format": "uuid",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Indicates whether there are more Auth Rules to be retrieved.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List authorization rule(s)",
        "tags": ["Authorization Rules"]
      },
      "post": {
        "description": "Creates an authorization rule (Auth Rule) and applies it at the program, account, or card level.",
        "operationId": "postAuthRules",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "authRule": {
                  "summary": "Create an authorization rule at the program level",
                  "value": {
                    "allowed_countries": ["CAN", "USA"],
                    "allowed_mcc": ["3000"],
                    "program_level": true
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "account_tokens": {
                        "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                        "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "allowed_countries": {
                        "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                        "example": ["MEX"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "allowed_mcc": {
                        "description": "Merchant category codes for which the Auth Rule permits transactions.",
                        "example": ["3000"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_countries": {
                        "description": "Countries in which the Auth Rule automatically declines transactions.",
                        "example": ["CAN", "USA"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_mcc": {
                        "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                        "example": ["5811", "5812"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "card_tokens": {
                        "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                        "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "program_level": {
                        "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                        "example": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "account_tokens": {
                          "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_countries": {
                          "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                          "example": ["MEX"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_mcc": {
                          "description": "Merchant category codes for which the Auth Rule permits transactions.",
                          "example": ["3000"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_countries": {
                          "description": "Countries in which the Auth Rule automatically declines transactions.",
                          "example": ["CAN", "USA"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_mcc": {
                          "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                          "example": ["5811", "5812"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "card_tokens": {
                          "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "program_level": {
                          "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                          "example": false,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "state": {
                          "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                          "enum": ["ACTIVE", "INACTIVE"],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier.",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create authorization rule",
        "tags": ["Authorization Rules"]
      }
    },
    "/auth_rules/remove": {
      "delete": {
        "description": "Remove an existing authorization rule (Auth Rule) from an program, account, or card-level.",
        "operationId": "deleteAuthRuleRemove",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "removeAuthRule": {
                  "summary": "Remove an authorization rule from program level",
                  "value": {
                    "program_level": false
                  }
                }
              },
              "schema": {
                "properties": {
                  "account_tokens": {
                    "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to.\nNote that only this field or `card_tokens` can be provided for a given Auth Rule.\n",
                    "format": "uuid",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "card_tokens": {
                    "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to.\nNote that only this field or `account_tokens` can be provided for a given Auth Rule.\n",
                    "format": "uuid",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "program_level": {
                    "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_tokens": {
                      "example": ["ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_tokens": {
                      "example": ["ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "program_level": {
                      "example": false,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Remove authorization rule",
        "tags": ["Authorization Rules"]
      }
    },
    "/auth_rules/{auth_rule_token}": {
      "get": {
        "description": "Detail the properties and entities (program, accounts, and cards) associated with an existing authorization rule (Auth Rule).\n",
        "operationId": "getAuthRuleByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for the Auth Rule.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample authorization rule token",
                "value": "50ca12c3-ae11-513b-20e0-e55421f8b2ab"
              }
            },
            "in": "path",
            "name": "auth_rule_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "account_tokens": {
                                "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "allowed_countries": {
                                "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                                "example": ["MEX"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "allowed_mcc": {
                                "description": "Merchant category codes for which the Auth Rule permits transactions.",
                                "example": ["3000"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "blocked_countries": {
                                "description": "Countries in which the Auth Rule automatically declines transactions.",
                                "example": ["CAN", "USA"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "blocked_mcc": {
                                "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                                "example": ["5811", "5812"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "card_tokens": {
                                "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "program_level": {
                                "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                                "example": false,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "properties": {
                              "state": {
                                "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                                "enum": ["ACTIVE", "INACTIVE"],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier.",
                                "format": "uuid",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get authorization rule by token",
        "tags": ["Authorization Rules"]
      },
      "put": {
        "description": "Update the properties associated with an existing authorization rule (Auth Rule).",
        "operationId": "putAuthRuleByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for the Auth Rule.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample authorization rule token",
                "value": "50ca12c3-ae11-513b-20e0-e55421f8b2ab"
              }
            },
            "in": "path",
            "name": "auth_rule_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "authRule": {
                  "summary": "Update an existing authorization rule",
                  "value": {
                    "allowed_countries": ["USA"],
                    "allowed_mcc": ["3000", "3001"]
                  }
                }
              },
              "schema": {
                "properties": {
                  "allowed_countries": {
                    "description": "Array of country codes for which the Auth Rule will permit transactions.\nNote that only this field or `blocked_countries` can be used for a given Auth Rule.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "allowed_mcc": {
                    "description": "Array of merchant category codes for which the Auth Rule will permit transactions.\nNote that only this field or `blocked_mcc` can be used for a given Auth Rule.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "blocked_countries": {
                    "description": "Array of country codes for which the Auth Rule will automatically decline transactions.\nNote that only this field or `allowed_countries` can be used for a given Auth Rule.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "blocked_mcc": {
                    "description": "Array of merchant category codes for which the Auth Rule will automatically decline transactions.\nNote that only this field or `allowed_mcc` can be used for a given Auth Rule.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "account_tokens": {
                          "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_countries": {
                          "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                          "example": ["MEX"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_mcc": {
                          "description": "Merchant category codes for which the Auth Rule permits transactions.",
                          "example": ["3000"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_countries": {
                          "description": "Countries in which the Auth Rule automatically declines transactions.",
                          "example": ["CAN", "USA"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_mcc": {
                          "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                          "example": ["5811", "5812"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "card_tokens": {
                          "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "program_level": {
                          "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                          "example": false,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "state": {
                          "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                          "enum": ["ACTIVE", "INACTIVE"],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier.",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update authorization rule",
        "tags": ["Authorization Rules"]
      }
    },
    "/auth_rules/{auth_rule_token}/apply": {
      "post": {
        "description": "Applies an existing authorization rule (Auth Rule) to an program, account, or card level.",
        "operationId": "postAuthRuleByTokenApply",
        "parameters": [
          {
            "description": "Globally unique identifier for the Auth Rule.",
            "examples": {
              "accountHolderTokenExample": {
                "summary": "A sample authorization rule token",
                "value": "50ca12c3-ae11-513b-20e0-e55421f8b2ab"
              }
            },
            "in": "path",
            "name": "auth_rule_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "applyAuthRule": {
                  "summary": "Apply an existing authorization rule at the card level",
                  "value": {
                    "card_tokens": [
                      "1336a403-2447-4b36-a009-6fbb852ee675",
                      "df942c4e-9130-4ab5-b067-778a2c55b357"
                    ]
                  }
                }
              },
              "schema": {
                "properties": {
                  "account_tokens": {
                    "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to.\nNote that only this field or `card_tokens` can be provided for a given Auth Rule.\n",
                    "format": "uuid",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "card_tokens": {
                    "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to.\nNote that only this field or `account_tokens` can be provided for a given Auth Rule.\n",
                    "format": "uuid",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "program_level": {
                    "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "account_tokens": {
                          "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_countries": {
                          "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                          "example": ["MEX"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "allowed_mcc": {
                          "description": "Merchant category codes for which the Auth Rule permits transactions.",
                          "example": ["3000"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_countries": {
                          "description": "Countries in which the Auth Rule automatically declines transactions.",
                          "example": ["CAN", "USA"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "blocked_mcc": {
                          "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                          "example": ["5811", "5812"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "card_tokens": {
                          "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                          "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "program_level": {
                          "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                          "example": false,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "state": {
                          "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                          "enum": ["ACTIVE", "INACTIVE"],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier.",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Apply existing authorization rule",
        "tags": ["Authorization Rules"]
      }
    },
    "/auth_stream/secret": {
      "get": {
        "description": "Retrieve the ASA HMAC secret key. If one does not exist for your program yet, calling this endpoint will create one for you. The headers (which you can use to verify webhooks) will begin appearing shortly after calling this endpoint for the first time. See [this page](https://docs.lithic.com/docs/auth-stream-access-asa#asa-webhook-verification) for more detail about verifying ASA webhooks.\n",
        "operationId": "getAuthStreamSecret",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "The shared HMAC ASA secret",
                      "example": "whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Retrieve the ASA HMAC secret key",
        "tags": ["Auth Stream Access (ASA)"]
      }
    },
    "/auth_stream/secret/rotate": {
      "post": {
        "description": "Generate a new ASA HMAC secret key. The old ASA HMAC secret key will be deactivated 24 hours after a successful request to this endpoint. Make a [`GET /auth_stream/secret`](https://docs.lithic.com/reference/getauthstreamsecret) request to retrieve the new secret key.\n",
        "operationId": "rotateAuthStreamSecret",
        "responses": {
          "204": {
            "description": "We have successfully rotated the secret key."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Rotate the ASA HMAC secret key",
        "tags": ["Auth Stream Access (ASA)"]
      }
    },
    "/balances": {
      "get": {
        "description": "Get the balances for a program or a given end-user account",
        "operationId": "getBalances",
        "parameters": [
          {
            "description": "List balances for all financial accounts of a given account_token.",
            "in": "query",
            "name": "account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "UTC date and time of the balances to retrieve. Defaults to latest available balances",
            "in": "query",
            "name": "balance_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "List balances for a given Financial Account type.",
            "in": "query",
            "name": "financial_account_type",
            "schema": {
              "enum": ["ISSUING", "OPERATING", "RESERVE"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Balance of a Financial Account",
                        "properties": {
                          "available_amount": {
                            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time for when the balance was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                            "type": "string"
                          },
                          "financial_account_token": {
                            "description": "Globally unique identifier for the financial account that holds this balance.",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "format": "uuid",
                            "type": "string"
                          },
                          "financial_account_type": {
                            "description": "Type of financial account.",
                            "enum": ["ISSUING", "OPERATING", "RESERVE"],
                            "type": "string"
                          },
                          "last_transaction_event_token": {
                            "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_token": {
                            "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pending_amount": {
                            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "total_amount": {
                            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "updated": {
                            "description": "Date and time for when the balance was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "available_amount",
                          "created",
                          "currency",
                          "financial_account_token",
                          "financial_account_type",
                          "last_transaction_event_token",
                          "last_transaction_token",
                          "pending_amount",
                          "total_amount",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List balances",
        "tags": ["Balance"]
      }
    },
    "/card_product/credit_detail": {
      "get": {
        "description": "Get the Credit Detail for the card product",
        "operationId": "getCreditDetail",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "credit_extended": {
                      "description": "The amount of credit extended within the program",
                      "type": "integer"
                    },
                    "credit_limit": {
                      "description": "The total credit limit of the program",
                      "type": "integer"
                    }
                  },
                  "required": ["credit_extended", "credit_limit"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client is not authorized to call the endpoint\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get credit detail for the card product",
        "tags": ["Card Product"]
      }
    },
    "/card_programs": {
      "get": {
        "description": "List card programs.",
        "operationId": "getCardPrograms",
        "parameters": [
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "created": {
                            "description": "Timestamp of when the card program was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the card program.",
                            "example": "My Prepaid Program",
                            "type": "string"
                          },
                          "pan_range_end": {
                            "description": "The first digits of the card number that this card program ends with.",
                            "example": "52304803",
                            "type": "string"
                          },
                          "pan_range_start": {
                            "description": "The first digits of the card number that this card program starts with.",
                            "example": "52304803",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "required": ["created", "name", "pan_range_end", "pan_range_start", "token"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List card programs",
        "tags": ["Card"]
      }
    },
    "/card_programs/{card_program_token}": {
      "get": {
        "description": "Get card program.",
        "operationId": "getCardProgram",
        "parameters": [
          {
            "description": "Globally unique identifier for the card program.",
            "examples": {
              "cardProgramTokenExample": {
                "summary": "A sample card program token",
                "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_program_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created": {
                      "description": "Timestamp of when the card program was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the card program.",
                      "example": "My Prepaid Program",
                      "type": "string"
                    },
                    "pan_range_end": {
                      "description": "The first digits of the card number that this card program ends with.",
                      "example": "52304803",
                      "type": "string"
                    },
                    "pan_range_start": {
                      "description": "The first digits of the card number that this card program starts with.",
                      "example": "52304803",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": ["created", "name", "pan_range_end", "pan_range_start", "token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card program",
        "tags": ["Card"]
      }
    },
    "/cards": {
      "get": {
        "description": "List cards.",
        "operationId": "getCards",
        "parameters": [
          {
            "description": "Returns cards associated with the specified account.\n",
            "in": "query",
            "name": "account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Returns cards with the specified state.\n",
            "in": "query",
            "name": "state",
            "schema": {
              "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "Globally unique identifier for the account to which the card belongs.",
                            "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                            "format": "uuid",
                            "type": "string"
                          },
                          "auth_rule_tokens": {
                            "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                            "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "card_program_token": {
                            "description": "Globally unique identifier for the card program on which the card exists.",
                            "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created": {
                            "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                            "example": "2021-06-28T22:53:15Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "cvv": {
                            "description": "Three digit cvv printed on the back of the card.",
                            "example": "776",
                            "maxLength": 3,
                            "minLength": 3,
                            "type": "string",
                            "x-lithic-tag": "Enterprise"
                          },
                          "digital_card_art_token": {
                            "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                            "example": "00000000-0000-0000-1000-000000000000",
                            "format": "uuid",
                            "type": "string"
                          },
                          "exp_month": {
                            "description": "Two digit (MM) expiry month.",
                            "example": "06",
                            "maxLength": 2,
                            "minLength": 2,
                            "type": "string",
                            "x-lithic-tag": "Enterprise"
                          },
                          "exp_year": {
                            "description": "Four digit (yyyy) expiry year.",
                            "example": "2027",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string",
                            "x-lithic-tag": "Enterprise"
                          },
                          "funding": {
                            "properties": {
                              "account_name": {
                                "description": "Account name identifying the funding source. This may be `null`.",
                                "type": "string"
                              },
                              "created": {
                                "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "last_four": {
                                "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                                "maxLength": 4,
                                "minLength": 4,
                                "type": "string"
                              },
                              "nickname": {
                                "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                              },
                              "state": {
                                "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                                "enum": ["DELETED", "ENABLED", "PENDING"],
                                "type": "string"
                              },
                              "token": {
                                "description": "A globally unique identifier for this FundingAccount.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "type": {
                                "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                                "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                                "type": "string"
                              }
                            },
                            "required": ["created", "last_four", "state", "token", "type"],
                            "type": "object"
                          },
                          "hostname": {
                            "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                            "type": "string"
                          },
                          "last_four": {
                            "description": "Last four digits of the card number.",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string"
                          },
                          "memo": {
                            "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                            "example": "New Card",
                            "type": "string"
                          },
                          "pan": {
                            "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                            "example": "4111111289144142",
                            "maxLength": 16,
                            "minLength": 16,
                            "type": "string",
                            "x-lithic-tag": "Enterprise"
                          },
                          "product_id": {
                            "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                            "example": "1",
                            "type": "string"
                          },
                          "spend_limit": {
                            "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                            "example": 1000,
                            "type": "integer"
                          },
                          "spend_limit_duration": {
                            "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                            "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                            "type": "string"
                          },
                          "state": {
                            "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                            "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                            "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                            "type": "string"
                          }
                        },
                        "required": [
                          "account_token",
                          "card_program_token",
                          "created",
                          "funding",
                          "last_four",
                          "spend_limit",
                          "spend_limit_duration",
                          "state",
                          "token",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List cards",
        "tags": ["Card"]
      },
      "post": {
        "description": "Create a new virtual or physical card. Parameters `pin`, `shipping_address`, and `product_id` only apply to physical cards.\n",
        "operationId": "postCards",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "createCard": {
                  "summary": "Create card",
                  "value": {
                    "memo": "New Card",
                    "spend_limit": 1000,
                    "spend_limit_duration": "TRANSACTION",
                    "state": "OPEN",
                    "type": "VIRTUAL"
                  }
                },
                "createPhysicalCard": {
                  "summary": "Create a physical card",
                  "value": {
                    "carrier": {
                      "qr_code_url": "https://lithic.com/activate-card/1"
                    },
                    "memo": "New physical card",
                    "product_id": "783991122",
                    "shipping_address": {
                      "address1": "123",
                      "city": "NEW YORK",
                      "country": "USA",
                      "first_name": "Johnny",
                      "last_name": "Appleseed",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "state": "OPEN",
                    "type": "PHYSICAL"
                  }
                }
              },
              "schema": {
                "properties": {
                  "account_token": {
                    "description": "Globally unique identifier for the account that the card will be associated with. Required for programs enrolling users using the [/account\\_holders endpoint](https://docs.lithic.com/docs/account-holders-kyc). See [Managing Your Program](doc:managing-your-program) for more information.\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "card_program_token": {
                    "description": "For card programs with more than one BIN range. This must be configured with Lithic before use. Identifies the card program/BIN range under which to create the card. If omitted, will utilize the program's default `card_program_token`. In Sandbox, use 00000000-0000-0000-1000-000000000000 and 00000000-0000-0000-2000-000000000000 to test creating cards on specific card programs.",
                    "example": "00000000-0000-0000-1000-000000000000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "carrier": {
                    "properties": {
                      "qr_code_url": {
                        "description": "QR code url to display on the card carrier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "digital_card_art_token": {
                    "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                    "example": "00000000-0000-0000-1000-000000000000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "exp_month": {
                    "description": "Two digit (MM) expiry month. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.",
                    "example": "06",
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit (yyyy) expiry year. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.",
                    "example": "2027",
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string"
                  },
                  "memo": {
                    "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                    "example": "New Card",
                    "type": "string"
                  },
                  "pin": {
                    "description": "Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block-enterprise).",
                    "type": "string"
                  },
                  "product_id": {
                    "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                    "example": "1",
                    "type": "string"
                  },
                  "replacement_for": {
                    "description": "Only applicable to cards of type `PHYSICAL`. Globally unique identifier for the card that this physical card will replace.",
                    "example": "00000000-0000-0000-1000-000000000000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "shipping_address": {
                    "properties": {
                      "address1": {
                        "description": "Valid USPS routable address.",
                        "example": "5 Broad Street",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "address2": {
                        "description": "Unit number (if applicable).",
                        "example": "Unit 25A",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "city": {
                        "description": "City",
                        "example": "NEW YORK",
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string"
                      },
                      "country": {
                        "description": "Uppercase ISO 3166-1 alpha-3 three character abbreviation.",
                        "example": "USA",
                        "maxLength": 3,
                        "minLength": 3,
                        "type": "string"
                      },
                      "email": {
                        "description": "Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "johnny@appleseed.com",
                        "maxLength": 50,
                        "minLength": 5,
                        "type": "string"
                      },
                      "first_name": {
                        "description": "Customer's first name. This will be the first name printed on the physical card.",
                        "example": "Michael",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "last_name": {
                        "description": "Customer's surname (family name). This will be the last name printed on the physical card.",
                        "example": "Bluth",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line2_text": {
                        "description": "Text to be printed on line two of the physical card. Use of this field requires additional permissions.",
                        "example": "The Bluth Company",
                        "maxLength": 26,
                        "minLength": 0,
                        "type": "string"
                      },
                      "phone_number": {
                        "description": "Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "+12124007676",
                        "maxLength": 16,
                        "minLength": 8,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Postal code (formerly zipcode). For US addresses, either five-digit zipcode or nine-digit \"ZIP+4\".",
                        "example": "10001-1809",
                        "maxLength": 12,
                        "minLength": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.",
                        "example": "NY",
                        "maxLength": 24,
                        "minLength": 0,
                        "type": "string"
                      }
                    },
                    "required": [
                      "address1",
                      "city",
                      "country",
                      "first_name",
                      "last_name",
                      "postal_code",
                      "state"
                    ],
                    "type": "object"
                  },
                  "shipping_method": {
                    "description": "Shipping method for the card. Only applies to cards of type PHYSICAL. Use of options besides `STANDARD` require additional permissions.\n* `STANDARD` - USPS regular mail or similar international option, with no tracking\n* `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking\n* `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking\n* `EXPRESS` - FedEx Express, 3-day shipping, with tracking\n* `2_DAY` - FedEx 2-day shipping, with tracking\n* `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking\n",
                    "enum": [
                      "2_DAY",
                      "EXPEDITED",
                      "EXPRESS",
                      "PRIORITY",
                      "STANDARD",
                      "STANDARD_WITH_TRACKING"
                    ],
                    "type": "string"
                  },
                  "spend_limit": {
                    "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.",
                    "example": 0,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "spend_limit_duration": {
                    "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                    "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                    "type": "string"
                  },
                  "state": {
                    "description": "Card state values:\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n",
                    "enum": ["OPEN", "PAUSED"],
                    "type": "string"
                  },
                  "type": {
                    "default": "VIRTUAL",
                    "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                    "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                    "type": "string"
                  }
                },
                "required": ["type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "f3f4918c-dee9-464d-a819-4aa42901d624",
                  "card_program_token": "5e9483eb-8103-4e16-9794-2106111b2eca",
                  "created": "2021-06-28T22:53:15Z",
                  "cvv": "776",
                  "exp_month": "06",
                  "exp_year": "2027",
                  "funding": {
                    "account_name": "Sandbox",
                    "created": "2020-07-08T17:57:36Z",
                    "last_four": "5263",
                    "nickname": "checking account",
                    "state": "ENABLED",
                    "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                    "type": "DEPOSITORY_CHECKING"
                  },
                  "hostname": "",
                  "last_four": "4142",
                  "memo": "New Card",
                  "pan": "4111111289144142",
                  "spend_limit": 1000,
                  "spend_limit_duration": "TRANSACTION",
                  "state": "OPEN",
                  "token": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                  "type": "VIRTUAL"
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create card",
        "tags": ["Card"]
      }
    },
    "/cards/aggregate_balances": {
      "get": {
        "description": "Get the aggregated card balance across all end-user accounts.",
        "operationId": "getCardAggregateBalances",
        "parameters": [
          {
            "description": "Cardholder to retrieve aggregate balances for.",
            "in": "query",
            "name": "account_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Business to retrieve aggregate balances for.",
            "in": "query",
            "name": "business_account_token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Card Aggregate Balance across all end-user accounts",
                        "properties": {
                          "available_amount": {
                            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time for when the balance was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                            "type": "string"
                          },
                          "last_card_token": {
                            "description": "Globally unique identifier for the card that had its balance updated most recently",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_event_token": {
                            "description": "Globally unique identifier for the last transaction event that impacted this balance",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_token": {
                            "description": "Globally unique identifier for the last transaction that impacted this balance",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pending_amount": {
                            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "total_amount": {
                            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "updated": {
                            "description": "Date and time for when the balance was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "available_amount",
                          "created",
                          "currency",
                          "last_card_token",
                          "last_transaction_event_token",
                          "last_transaction_token",
                          "pending_amount",
                          "total_amount",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List card aggregate balances",
        "tags": ["Card"]
      }
    },
    "/cards/search_by_pan": {
      "post": {
        "description": "Get card configuration such as spend limit and state. Customers must be PCI compliant to use this endpoint. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n*Note: this is a `POST` endpoint because it is more secure to send sensitive data in a request body than in a URL.* ",
        "operationId": "searchCardByPan",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "searchCardByPan": {
                  "summary": "Search for card for by PAN.",
                  "value": {
                    "pan": "4111111289144142"
                  }
                }
              },
              "schema": {
                "properties": {
                  "pan": {
                    "description": "The PAN for the card being retrieved.",
                    "example": "4111111289144142",
                    "type": "string"
                  }
                },
                "required": ["pan"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Search for card by PAN",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}": {
      "get": {
        "description": "Get card configuration such as spend limit and state.",
        "operationId": "getCardByToken",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card",
        "tags": ["Card"]
      },
      "patch": {
        "description": "Update the specified properties of the card. Unsupplied properties will remain unchanged. `pin` parameter only applies to physical cards.\n\n*Note: setting a card to a `CLOSED` state is a final action that cannot be undone.*\n",
        "operationId": "patchCardByToken",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "updateCard": {
                  "summary": "Update card",
                  "value": {
                    "memo": "Updated Name",
                    "spend_limit": 100,
                    "spend_limit_duration": "FOREVER",
                    "state": "OPEN"
                  }
                }
              },
              "schema": {
                "properties": {
                  "auth_rule_token": {
                    "description": "Identifier for any Auth Rules that will be applied to transactions taking place with the card.\n",
                    "type": "string"
                  },
                  "digital_card_art_token": {
                    "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                    "example": "00000000-0000-0000-1000-000000000000",
                    "format": "uuid",
                    "type": "string"
                  },
                  "memo": {
                    "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                    "example": "New Card",
                    "type": "string"
                  },
                  "pin": {
                    "description": "Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block-enterprise).",
                    "type": "string"
                  },
                  "spend_limit": {
                    "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.",
                    "example": 0,
                    "type": "integer"
                  },
                  "spend_limit_duration": {
                    "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                    "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                    "type": "string"
                  },
                  "state": {
                    "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n",
                    "enum": ["CLOSED", "OPEN", "PAUSED"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "f3f4918c-dee9-464d-a819-4aa42901d624",
                  "card_program_token": "5e9483eb-8103-4e16-9794-2106111b2eca",
                  "created": "2021-06-28T22:53:15Z",
                  "cvv": "742",
                  "exp_month": "05",
                  "exp_year": "2027",
                  "funding": {
                    "account_name": "Sandbox",
                    "created": "2020-07-08 17:57:36",
                    "last_four": "5263",
                    "nickname": "checking account",
                    "state": "ENABLED",
                    "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                    "type": "DEPOSITORY_CHECKING"
                  },
                  "hostname": "",
                  "last_four": "4938",
                  "memo": "Updated Name",
                  "pan": "4111111289144142",
                  "spend_limit": 100,
                  "spend_limit_duration": "FOREVER",
                  "state": "OPEN",
                  "token": "f5f905f5-8a8e-49bf-a9b4-c0adaa401456",
                  "type": "VIRTUAL"
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update card",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/balances": {
      "get": {
        "description": "Get the balances for a given card.",
        "operationId": "getCardBalance",
        "parameters": [
          {
            "description": "UTC date of the balance to retrieve. Defaults to latest available balance",
            "in": "query",
            "name": "balance_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Balance after a given financial event occured.\nFor example, passing the event_token of a $5 CARD_CLEARING financial event will return a balance decreased by $5\n",
            "in": "query",
            "name": "last_transaction_event_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Balance of a Financial Account",
                        "properties": {
                          "available_amount": {
                            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time for when the balance was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                            "type": "string"
                          },
                          "financial_account_token": {
                            "description": "Globally unique identifier for the financial account that holds this balance.",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "format": "uuid",
                            "type": "string"
                          },
                          "financial_account_type": {
                            "description": "Type of financial account.",
                            "enum": ["ISSUING", "OPERATING", "RESERVE"],
                            "type": "string"
                          },
                          "last_transaction_event_token": {
                            "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_token": {
                            "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pending_amount": {
                            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "total_amount": {
                            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "updated": {
                            "description": "Date and time for when the balance was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "available_amount",
                          "created",
                          "currency",
                          "financial_account_token",
                          "financial_account_type",
                          "last_transaction_event_token",
                          "last_transaction_token",
                          "pending_amount",
                          "total_amount",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card balances",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/financial_transactions": {
      "get": {
        "description": "List the financial transactions for a given card.",
        "operationId": "getCardFinancialTransactions",
        "parameters": [
          {
            "description": "Financial Transaction category to be returned.",
            "in": "query",
            "name": "category",
            "schema": {
              "enum": ["CARD", "TRANSFER"],
              "type": "string"
            }
          },
          {
            "description": "Financial Transaction result to be returned.",
            "in": "query",
            "name": "result",
            "schema": {
              "enum": ["APPROVED", "DECLINED"],
              "type": "string"
            }
          },
          {
            "description": "Financial Transaction status to be returned.",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": ["DECLINED", "EXPIRED", "PENDING", "RETURNED", "SETTLED", "VOIDED"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "category": {
                            "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                            "enum": ["ACH", "CARD", "TRANSFER"],
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                            "type": "string"
                          },
                          "descriptor": {
                            "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of all financial events that have modified this financial transaction.",
                            "items": {
                              "properties": {
                                "amount": {
                                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                  "type": "integer"
                                },
                                "created": {
                                  "description": "Date and time when the financial event occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                  "enum": ["APPROVED", "DECLINED"],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier.",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                  "enum": [
                                    "ACH_INSUFFICIENT_FUNDS",
                                    "ACH_ORIGINATION_PENDING",
                                    "ACH_ORIGINATION_RELEASED",
                                    "ACH_RECEIPT_PENDING",
                                    "ACH_RECEIPT_RELEASED",
                                    "ACH_RETURN",
                                    "AUTHORIZATION",
                                    "AUTHORIZATION_ADVICE",
                                    "AUTHORIZATION_EXPIRY",
                                    "AUTHORIZATION_REVERSAL",
                                    "BALANCE_INQUIRY",
                                    "CLEARING",
                                    "CORRECTION_CREDIT",
                                    "CORRECTION_DEBIT",
                                    "CREDIT_AUTHORIZATION",
                                    "CREDIT_AUTHORIZATION_ADVICE",
                                    "FINANCIAL_AUTHORIZATION",
                                    "FINANCIAL_CREDIT_AUTHORIZATION",
                                    "RETURN",
                                    "RETURN_REVERSAL",
                                    "TRANSFER",
                                    "TRANSFER_INSUFFICIENT_FUNDS"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pending_amount": {
                            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                            "type": "integer"
                          },
                          "result": {
                            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "settled_amount": {
                            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "category",
                          "created",
                          "currency",
                          "descriptor",
                          "events",
                          "pending_amount",
                          "result",
                          "settled_amount",
                          "status",
                          "token",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List card financial transactions",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/financial_transactions/{financial_transaction_token}": {
      "get": {
        "description": "Get the card financial transaction for the provided token.",
        "operationId": "getCardFinancialTransactionByToken",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial transaction token.",
            "examples": {
              "financialTransactionTokenExample": {
                "summary": "A sample financial transaction token",
                "value": "18394f8e-711b-4b3e-ae21-d35a9eafe7d1"
              }
            },
            "in": "path",
            "name": "financial_transaction_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "category": {
                      "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                      "enum": ["ACH", "CARD", "TRANSFER"],
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "currency": {
                      "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                      "type": "string"
                    },
                    "descriptor": {
                      "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                      "type": "string"
                    },
                    "events": {
                      "description": "A list of all financial events that have modified this financial transaction.",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time when the financial event occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "result": {
                            "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                            "enum": [
                              "ACH_INSUFFICIENT_FUNDS",
                              "ACH_ORIGINATION_PENDING",
                              "ACH_ORIGINATION_RELEASED",
                              "ACH_RECEIPT_PENDING",
                              "ACH_RECEIPT_RELEASED",
                              "ACH_RETURN",
                              "AUTHORIZATION",
                              "AUTHORIZATION_ADVICE",
                              "AUTHORIZATION_EXPIRY",
                              "AUTHORIZATION_REVERSAL",
                              "BALANCE_INQUIRY",
                              "CLEARING",
                              "CORRECTION_CREDIT",
                              "CORRECTION_DEBIT",
                              "CREDIT_AUTHORIZATION",
                              "CREDIT_AUTHORIZATION_ADVICE",
                              "FINANCIAL_AUTHORIZATION",
                              "FINANCIAL_CREDIT_AUTHORIZATION",
                              "RETURN",
                              "RETURN_REVERSAL",
                              "TRANSFER",
                              "TRANSFER_INSUFFICIENT_FUNDS"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pending_amount": {
                      "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                      "type": "integer"
                    },
                    "result": {
                      "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                      "enum": ["APPROVED", "DECLINED"],
                      "type": "string"
                    },
                    "settled_amount": {
                      "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                      "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "updated": {
                      "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "category",
                    "created",
                    "currency",
                    "descriptor",
                    "events",
                    "pending_amount",
                    "result",
                    "settled_amount",
                    "status",
                    "token",
                    "updated"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card financial transaction",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/provision": {
      "post": {
        "description": "Allow your cardholders to directly add payment cards to the device's digital wallet (e.g. Apple Pay) with one touch from your app.\n\nThis requires some additional setup and configuration. Please [Contact Us](https://lithic.com/contact) or your Customer Success representative for more information.\n",
        "operationId": "postCardProvision",
        "parameters": [
          {
            "description": "The unique token of the card to add to the device's digital wallet.",
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "provisionGoogleCard": {
                  "summary": "Provision a card in Google Pay",
                  "value": {
                    "digital_wallet": "GOOGLE_PAY"
                  }
                }
              },
              "schema": {
                "properties": {
                  "certificate": {
                    "description": "Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Apple's public leaf certificate. Base64 encoded in PEM format with headers `(-----BEGIN CERTIFICATE-----)` and trailers omitted. Provided by the device's wallet.",
                    "format": "byte",
                    "type": "string"
                  },
                  "digital_wallet": {
                    "description": "Name of digital wallet provider.",
                    "enum": ["APPLE_PAY", "GOOGLE_PAY", "SAMSUNG_PAY"],
                    "type": "string"
                  },
                  "nonce": {
                    "description": "Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Base64 cryptographic nonce provided by the device's wallet.",
                    "format": "byte",
                    "type": "string"
                  },
                  "nonce_signature": {
                    "description": "Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Base64 cryptographic nonce provided by the device's wallet.",
                    "format": "byte",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "provisioning_payload": "eyJjYXJ......"
                },
                "schema": {
                  "properties": {
                    "provisioning_payload": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns `provisioning_payload`, a cryptographic payload representing a payment card that can be passed to a device's digital wallet. Each digital wallet has a different API; consult the wallet's documentation for more info.\n"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Provision card (Digital Wallet)",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/reissue": {
      "post": {
        "description": "Initiate print and shipment of a duplicate physical card.\n\nOnly applies to cards of type `PHYSICAL`.\n",
        "operationId": "postCardReissue",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reissueCardNewAddress": {
                  "summary": "Reissue card with a new address",
                  "value": {
                    "carrier": {
                      "qr_code_url": "https://lithic.com/activate-card/1"
                    },
                    "product_id": "100",
                    "shipping_address": {
                      "address1": "5 Broad Street",
                      "address2": "Unit 5A",
                      "city": "NEW YORK",
                      "country": "USA",
                      "first_name": "Janet",
                      "last_name": "Yellen",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "shipping_method": "STANDARD"
                  }
                }
              },
              "schema": {
                "properties": {
                  "carrier": {
                    "properties": {
                      "qr_code_url": {
                        "description": "QR code url to display on the card carrier",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "description": "If omitted, the previous carrier will be used."
                  },
                  "product_id": {
                    "description": "Specifies the configuration (e.g. physical card art) that the card should be manufactured with, and only applies to cards of type `PHYSICAL`. This must be configured with Lithic before use.\n",
                    "type": "string"
                  },
                  "shipping_address": {
                    "properties": {
                      "address1": {
                        "description": "Valid USPS routable address.",
                        "example": "5 Broad Street",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "address2": {
                        "description": "Unit number (if applicable).",
                        "example": "Unit 25A",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "city": {
                        "description": "City",
                        "example": "NEW YORK",
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string"
                      },
                      "country": {
                        "description": "Uppercase ISO 3166-1 alpha-3 three character abbreviation.",
                        "example": "USA",
                        "maxLength": 3,
                        "minLength": 3,
                        "type": "string"
                      },
                      "email": {
                        "description": "Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "johnny@appleseed.com",
                        "maxLength": 50,
                        "minLength": 5,
                        "type": "string"
                      },
                      "first_name": {
                        "description": "Customer's first name. This will be the first name printed on the physical card.",
                        "example": "Michael",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "last_name": {
                        "description": "Customer's surname (family name). This will be the last name printed on the physical card.",
                        "example": "Bluth",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line2_text": {
                        "description": "Text to be printed on line two of the physical card. Use of this field requires additional permissions.",
                        "example": "The Bluth Company",
                        "maxLength": 26,
                        "minLength": 0,
                        "type": "string"
                      },
                      "phone_number": {
                        "description": "Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "+12124007676",
                        "maxLength": 16,
                        "minLength": 8,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Postal code (formerly zipcode). For US addresses, either five-digit zipcode or nine-digit \"ZIP+4\".",
                        "example": "10001-1809",
                        "maxLength": 12,
                        "minLength": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.",
                        "example": "NY",
                        "maxLength": 24,
                        "minLength": 0,
                        "type": "string"
                      }
                    },
                    "required": [
                      "address1",
                      "city",
                      "country",
                      "first_name",
                      "last_name",
                      "postal_code",
                      "state"
                    ],
                    "type": "object",
                    "description": "If omitted, the previous shipping address will be used."
                  },
                  "shipping_method": {
                    "description": "Shipping method for the card. Use of options besides `STANDARD` require additional permissions.\n* `STANDARD` - USPS regular mail or similar international option, with no tracking\n* `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking\n* `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking\n* `EXPRESS` - FedEx Express, 3-day shipping, with tracking\n* `2_DAY` - FedEx 2-day shipping, with tracking\n* `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking\n",
                    "enum": [
                      "2-DAY",
                      "EXPEDITED",
                      "EXPRESS",
                      "PRIORITY",
                      "STANDARD",
                      "STANDARD_WITH_TRACKING"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "f3f4918c-dee9-464d-a819-4aa42901d624",
                  "card_program_token": "5e9483eb-8103-4e16-9794-2106111b2eca",
                  "created": "2021-06-28T22:53:15Z",
                  "cvv": "742",
                  "exp_month": "05",
                  "exp_year": "2027",
                  "funding": {
                    "account_name": "Sandbox",
                    "created": "2020-07-08 17:57:36",
                    "last_four": "5263",
                    "nickname": "checking account",
                    "state": "ENABLED",
                    "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                    "type": "DEPOSITORY_CHECKING"
                  },
                  "hostname": "",
                  "last_four": "4938",
                  "memo": "Updated Name",
                  "pan": "4111111289144142",
                  "spend_limit": 100,
                  "spend_limit_duration": "FOREVER",
                  "state": "OPEN",
                  "token": "f5f905f5-8a8e-49bf-a9b4-c0adaa401456",
                  "type": "VIRTUAL"
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Reissue physical card",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/renew": {
      "post": {
        "description": "Initiate print and shipment of a renewed physical card.\n\nOnly applies to cards of type `PHYSICAL`.\n",
        "operationId": "postCardRenew",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "renewCardNewAddress": {
                  "summary": "Renew card with a new address",
                  "value": {
                    "carrier": {
                      "qr_code_url": "https://lithic.com/activate-card/1"
                    },
                    "product_id": "100",
                    "shipping_address": {
                      "address1": "5 Broad Street",
                      "address2": "Unit 5A",
                      "city": "NEW YORK",
                      "country": "USA",
                      "first_name": "Janet",
                      "last_name": "Yellen",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "shipping_method": "STANDARD"
                  }
                }
              },
              "schema": {
                "properties": {
                  "carrier": {
                    "properties": {
                      "qr_code_url": {
                        "description": "QR code url to display on the card carrier",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "description": "If omitted, the previous carrier will be used."
                  },
                  "exp_month": {
                    "description": "Two digit (MM) expiry month. If neither `exp_month` nor `exp_year` is provided, an expiration date six years in the future will be generated.",
                    "example": "06",
                    "maxLength": 2,
                    "minLength": 2,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit (yyyy) expiry year. If neither `exp_month` nor `exp_year` is provided, an expiration date six years in the future will be generated.",
                    "example": "2027",
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string"
                  },
                  "product_id": {
                    "description": "Specifies the configuration (e.g. physical card art) that the card should be manufactured with, and only applies to cards of type `PHYSICAL`. This must be configured with Lithic before use.\n",
                    "type": "string"
                  },
                  "shipping_address": {
                    "properties": {
                      "address1": {
                        "description": "Valid USPS routable address.",
                        "example": "5 Broad Street",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "address2": {
                        "description": "Unit number (if applicable).",
                        "example": "Unit 25A",
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string"
                      },
                      "city": {
                        "description": "City",
                        "example": "NEW YORK",
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string"
                      },
                      "country": {
                        "description": "Uppercase ISO 3166-1 alpha-3 three character abbreviation.",
                        "example": "USA",
                        "maxLength": 3,
                        "minLength": 3,
                        "type": "string"
                      },
                      "email": {
                        "description": "Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "johnny@appleseed.com",
                        "maxLength": 50,
                        "minLength": 5,
                        "type": "string"
                      },
                      "first_name": {
                        "description": "Customer's first name. This will be the first name printed on the physical card.",
                        "example": "Michael",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "last_name": {
                        "description": "Customer's surname (family name). This will be the last name printed on the physical card.",
                        "example": "Bluth",
                        "maxLength": 26,
                        "minLength": 1,
                        "type": "string"
                      },
                      "line2_text": {
                        "description": "Text to be printed on line two of the physical card. Use of this field requires additional permissions.",
                        "example": "The Bluth Company",
                        "maxLength": 26,
                        "minLength": 0,
                        "type": "string"
                      },
                      "phone_number": {
                        "description": "Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
                        "example": "+12124007676",
                        "maxLength": 16,
                        "minLength": 8,
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Postal code (formerly zipcode). For US addresses, either five-digit zipcode or nine-digit \"ZIP+4\".",
                        "example": "10001-1809",
                        "maxLength": 12,
                        "minLength": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.",
                        "example": "NY",
                        "maxLength": 24,
                        "minLength": 0,
                        "type": "string"
                      }
                    },
                    "required": [
                      "address1",
                      "city",
                      "country",
                      "first_name",
                      "last_name",
                      "postal_code",
                      "state"
                    ],
                    "type": "object",
                    "description": "The shipping address this card will be sent to."
                  },
                  "shipping_method": {
                    "description": "Shipping method for the card. Use of options besides `STANDARD` require additional permissions.\n* `STANDARD` - USPS regular mail or similar international option, with no tracking\n* `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking\n* `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking\n* `EXPRESS` - FedEx Express, 3-day shipping, with tracking\n* `2_DAY` - FedEx 2-day shipping, with tracking\n* `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking\n",
                    "enum": [
                      "2-DAY",
                      "EXPEDITED",
                      "EXPRESS",
                      "PRIORITY",
                      "STANDARD",
                      "STANDARD_WITH_TRACKING"
                    ],
                    "type": "string"
                  }
                },
                "required": ["shipping_address"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "f3f4918c-dee9-464d-a819-4aa42901d624",
                  "card_program_token": "5e9483eb-8103-4e16-9794-2106111b2eca",
                  "created": "2021-06-28T22:53:15Z",
                  "cvv": "742",
                  "exp_month": "05",
                  "exp_year": "2027",
                  "funding": {
                    "account_name": "Sandbox",
                    "created": "2020-07-08 17:57:36",
                    "last_four": "5263",
                    "nickname": "checking account",
                    "state": "ENABLED",
                    "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                    "type": "DEPOSITORY_CHECKING"
                  },
                  "hostname": "",
                  "last_four": "4938",
                  "memo": "Updated Name",
                  "pan": "4111111289144142",
                  "spend_limit": 100,
                  "spend_limit_duration": "FOREVER",
                  "state": "OPEN",
                  "token": "f5f905f5-8a8e-49bf-a9b4-c0adaa401456",
                  "type": "VIRTUAL"
                },
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Globally unique identifier for the account to which the card belongs.",
                      "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
                      "format": "uuid",
                      "type": "string"
                    },
                    "auth_rule_tokens": {
                      "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
                      "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program on which the card exists.",
                      "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
                      "example": "2021-06-28T22:53:15Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "cvv": {
                      "description": "Three digit cvv printed on the back of the card.",
                      "example": "776",
                      "maxLength": 3,
                      "minLength": 3,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "digital_card_art_token": {
                      "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
                      "example": "00000000-0000-0000-1000-000000000000",
                      "format": "uuid",
                      "type": "string"
                    },
                    "exp_month": {
                      "description": "Two digit (MM) expiry month.",
                      "example": "06",
                      "maxLength": 2,
                      "minLength": 2,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "exp_year": {
                      "description": "Four digit (yyyy) expiry year.",
                      "example": "2027",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "funding": {
                      "properties": {
                        "account_name": {
                          "description": "Account name identifying the funding source. This may be `null`.",
                          "type": "string"
                        },
                        "created": {
                          "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "last_four": {
                          "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "nickname": {
                          "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "state": {
                          "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                          "enum": ["DELETED", "ENABLED", "PENDING"],
                          "type": "string"
                        },
                        "token": {
                          "description": "A globally unique identifier for this FundingAccount.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                          "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                          "type": "string"
                        }
                      },
                      "required": ["created", "last_four", "state", "token", "type"],
                      "type": "object"
                    },
                    "hostname": {
                      "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "Last four digits of the card number.",
                      "maxLength": 4,
                      "minLength": 4,
                      "type": "string"
                    },
                    "memo": {
                      "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
                      "example": "New Card",
                      "type": "string"
                    },
                    "pan": {
                      "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
                      "example": "4111111289144142",
                      "maxLength": 16,
                      "minLength": 16,
                      "type": "string",
                      "x-lithic-tag": "Enterprise"
                    },
                    "product_id": {
                      "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
                      "example": "1",
                      "type": "string"
                    },
                    "spend_limit": {
                      "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
                      "example": 1000,
                      "type": "integer"
                    },
                    "spend_limit_duration": {
                      "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
                      "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
                      "type": "string"
                    },
                    "state": {
                      "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
                      "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
                      "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_token",
                    "card_program_token",
                    "created",
                    "funding",
                    "last_four",
                    "spend_limit",
                    "spend_limit_duration",
                    "state",
                    "token",
                    "type"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Renew physical card",
        "tags": ["Card"]
      }
    },
    "/cards/{card_token}/spend_limits": {
      "get": {
        "description": "Get a Card's available spend limit, which is based on the spend limit configured on the Card and the amount already spent over the spend limit's duration. For example, if the Card has a monthly spend limit of $1000 configured, and has spent $600 in the last month, the available spend limit returned would be $400.",
        "operationId": "getCardSpendLimits",
        "parameters": [
          {
            "examples": {
              "cardTokenExample": {
                "summary": "A sample card token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "card_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available_spend_limit": {
                      "properties": {
                        "annually": {
                          "description": "The available spend limit relative to the annual limit configured on the Card.",
                          "example": 200000,
                          "type": "integer"
                        },
                        "forever": {
                          "description": "The available spend limit relative to the forever limit configured on the Card.",
                          "example": 300000,
                          "type": "integer"
                        },
                        "monthly": {
                          "description": "The available spend limit relative to the monthly limit configured on the Card.",
                          "example": 200000,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": ["available_spend_limit"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card's available spend limit",
        "tags": ["Card"]
      }
    },
    "/digital_card_art": {
      "get": {
        "description": "List digital card art.",
        "operationId": "getDigitalCardArt",
        "parameters": [
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "card_program_token": {
                            "description": "Globally unique identifier for the card program.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created": {
                            "description": "Timestamp of when card art was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "description": {
                            "description": "Description of the card art.",
                            "type": "string"
                          },
                          "is_card_program_default": {
                            "description": "Whether the card art is the default card art to be added upon tokenization.",
                            "type": "boolean"
                          },
                          "is_enabled": {
                            "description": "Whether the card art is enabled.",
                            "type": "boolean"
                          },
                          "network": {
                            "description": "Card network.",
                            "enum": ["MASTERCARD", "VISA"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for the card art.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "required": [
                          "card_program_token",
                          "created",
                          "description",
                          "is_enabled",
                          "network",
                          "token"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List digital card art",
        "tags": ["Tokenization"]
      }
    },
    "/digital_card_art/{digital_card_art_token}": {
      "get": {
        "description": "Get digital card art by token.",
        "operationId": "getDigitalCardArtByToken",
        "parameters": [
          {
            "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
            "in": "path",
            "name": "digital_card_art_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "card_program_token": {
                      "description": "Globally unique identifier for the card program.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when card art was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the card art.",
                      "type": "string"
                    },
                    "is_card_program_default": {
                      "description": "Whether the card art is the default card art to be added upon tokenization.",
                      "type": "boolean"
                    },
                    "is_enabled": {
                      "description": "Whether the card art is enabled.",
                      "type": "boolean"
                    },
                    "network": {
                      "description": "Card network.",
                      "enum": ["MASTERCARD", "VISA"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the card art.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "card_program_token",
                    "created",
                    "description",
                    "is_enabled",
                    "network",
                    "token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get digital card art by token",
        "tags": ["Tokenization"]
      }
    },
    "/disputes": {
      "get": {
        "description": "List disputes.",
        "operationId": "getDisputes",
        "parameters": [
          {
            "description": "List disputes of a specific status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "ARBITRATION",
                "CASE_CLOSED",
                "CASE_WON",
                "NEW",
                "PENDING_CUSTOMER",
                "PREARBITRATION",
                "REPRESENTMENT",
                "SUBMITTED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Transaction tokens to filter by.",
            "explode": false,
            "in": "query",
            "name": "transaction_tokens",
            "required": false,
            "schema": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "maxItems": 50,
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Dispute.",
                        "properties": {
                          "amount": {
                            "description": "Amount under dispute. May be different from the original transaction amount.",
                            "type": "integer"
                          },
                          "arbitration_date": {
                            "description": "Date dispute entered arbitration.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "created": {
                            "description": "Timestamp of when first Dispute was reported.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "customer_filed_date": {
                            "description": "Date that the dispute was filed by the customer making the dispute.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "customer_note": {
                            "description": "End customer description of the reason for the dispute.",
                            "maxLength": 10000,
                            "nullable": true,
                            "type": "string"
                          },
                          "network_claim_ids": {
                            "description": "Unique identifiers for the dispute from the network.",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          },
                          "network_filed_date": {
                            "description": "Date that the dispute was submitted to the network.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "network_reason_code": {
                            "description": "Network reason code used to file the dispute.",
                            "nullable": true,
                            "type": "string"
                          },
                          "prearbitration_date": {
                            "description": "Date dispute entered pre-arbitration.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "primary_claim_id": {
                            "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                            "nullable": true,
                            "type": "string"
                          },
                          "reason": {
                            "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                            "enum": [
                              "ATM_CASH_MISDISPENSE",
                              "CANCELLED",
                              "DUPLICATED",
                              "FRAUD_CARD_NOT_PRESENT",
                              "FRAUD_CARD_PRESENT",
                              "FRAUD_OTHER",
                              "GOODS_SERVICES_NOT_AS_DESCRIBED",
                              "GOODS_SERVICES_NOT_RECEIVED",
                              "INCORRECT_AMOUNT",
                              "MISSING_AUTH",
                              "OTHER",
                              "PROCESSING_ERROR",
                              "RECURRING_TRANSACTION_NOT_CANCELLED",
                              "REFUND_NOT_PROCESSED"
                            ],
                            "type": "string"
                          },
                          "representment_date": {
                            "description": "Date the representment was received.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "resolution_amount": {
                            "description": "Resolution amount net of network fees.",
                            "nullable": true,
                            "type": "integer"
                          },
                          "resolution_date": {
                            "description": "Date that the dispute was resolved.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "resolution_note": {
                            "description": "Note by Dispute team on the case resolution.",
                            "maxLength": 10000,
                            "nullable": true,
                            "type": "string"
                          },
                          "resolution_reason": {
                            "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                            "enum": [
                              "CASE_LOST",
                              "NETWORK_REJECTED",
                              "NO_DISPUTE_RIGHTS_3DS",
                              "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                              "NO_DISPUTE_RIGHTS_CONTACTLESS",
                              "NO_DISPUTE_RIGHTS_HYBRID",
                              "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                              "NO_DISPUTE_RIGHTS_OTHER",
                              "PAST_FILING_DATE",
                              "PREARBITRATION_REJECTED",
                              "PROCESSOR_REJECTED_OTHER",
                              "REFUNDED",
                              "REFUNDED_AFTER_CHARGEBACK",
                              "WITHDRAWN",
                              "WON_ARBITRATION",
                              "WON_FIRST_CHARGEBACK",
                              "WON_PREARBITRATION"
                            ],
                            "nullable": true,
                            "type": "string"
                          },
                          "status": {
                            "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                            "enum": [
                              "ARBITRATION",
                              "CASE_CLOSED",
                              "CASE_WON",
                              "NEW",
                              "PENDING_CUSTOMER",
                              "PREARBITRATION",
                              "REPRESENTMENT",
                              "SUBMITTED"
                            ],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "transaction_token": {
                            "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                            "format": "uuid",
                            "type": "string"
                          }
                        },
                        "required": [
                          "amount",
                          "arbitration_date",
                          "created",
                          "customer_filed_date",
                          "customer_note",
                          "network_claim_ids",
                          "network_filed_date",
                          "network_reason_code",
                          "prearbitration_date",
                          "primary_claim_id",
                          "reason",
                          "representment_date",
                          "resolution_amount",
                          "resolution_date",
                          "resolution_note",
                          "resolution_reason",
                          "status",
                          "token",
                          "transaction_token"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List disputes",
        "tags": ["Dispute"]
      },
      "post": {
        "description": "Initiate a dispute.",
        "operationId": "postDisputes",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "initiateDispute": {
                  "summary": "Initiate a dispute",
                  "value": {
                    "amount": 10000,
                    "customer_filed_date": "2021-06-28T22:53:15Z",
                    "reason": "FRAUD_CARD_PRESENT",
                    "transaction_token": "12345624-aa69-4cbc-a946-30d90181b621"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount to dispute",
                    "type": "integer"
                  },
                  "customer_filed_date": {
                    "description": "Date the customer filed the dispute",
                    "format": "date-time",
                    "type": "string"
                  },
                  "customer_note": {
                    "description": "Customer description of dispute",
                    "maximum": 5000,
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason for dispute",
                    "enum": [
                      "ATM_CASH_MISDISPENSE",
                      "CANCELLED",
                      "DUPLICATED",
                      "FRAUD_CARD_NOT_PRESENT",
                      "FRAUD_CARD_PRESENT",
                      "FRAUD_OTHER",
                      "GOODS_SERVICES_NOT_AS_DESCRIBED",
                      "GOODS_SERVICES_NOT_RECEIVED",
                      "INCORRECT_AMOUNT",
                      "MISSING_AUTH",
                      "OTHER",
                      "PROCESSING_ERROR",
                      "RECURRING_TRANSACTION_NOT_CANCELLED",
                      "REFUND_NOT_PROCESSED"
                    ],
                    "type": "string"
                  },
                  "transaction_token": {
                    "description": "Transaction to dispute",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["amount", "reason", "transaction_token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute.",
                  "properties": {
                    "amount": {
                      "description": "Amount under dispute. May be different from the original transaction amount.",
                      "type": "integer"
                    },
                    "arbitration_date": {
                      "description": "Date dispute entered arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when first Dispute was reported.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "customer_filed_date": {
                      "description": "Date that the dispute was filed by the customer making the dispute.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_note": {
                      "description": "End customer description of the reason for the dispute.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "network_claim_ids": {
                      "description": "Unique identifiers for the dispute from the network.",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "network_filed_date": {
                      "description": "Date that the dispute was submitted to the network.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "network_reason_code": {
                      "description": "Network reason code used to file the dispute.",
                      "nullable": true,
                      "type": "string"
                    },
                    "prearbitration_date": {
                      "description": "Date dispute entered pre-arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "primary_claim_id": {
                      "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                      "nullable": true,
                      "type": "string"
                    },
                    "reason": {
                      "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                      "enum": [
                        "ATM_CASH_MISDISPENSE",
                        "CANCELLED",
                        "DUPLICATED",
                        "FRAUD_CARD_NOT_PRESENT",
                        "FRAUD_CARD_PRESENT",
                        "FRAUD_OTHER",
                        "GOODS_SERVICES_NOT_AS_DESCRIBED",
                        "GOODS_SERVICES_NOT_RECEIVED",
                        "INCORRECT_AMOUNT",
                        "MISSING_AUTH",
                        "OTHER",
                        "PROCESSING_ERROR",
                        "RECURRING_TRANSACTION_NOT_CANCELLED",
                        "REFUND_NOT_PROCESSED"
                      ],
                      "type": "string"
                    },
                    "representment_date": {
                      "description": "Date the representment was received.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_amount": {
                      "description": "Resolution amount net of network fees.",
                      "nullable": true,
                      "type": "integer"
                    },
                    "resolution_date": {
                      "description": "Date that the dispute was resolved.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_note": {
                      "description": "Note by Dispute team on the case resolution.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_reason": {
                      "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                      "enum": [
                        "CASE_LOST",
                        "NETWORK_REJECTED",
                        "NO_DISPUTE_RIGHTS_3DS",
                        "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                        "NO_DISPUTE_RIGHTS_CONTACTLESS",
                        "NO_DISPUTE_RIGHTS_HYBRID",
                        "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                        "NO_DISPUTE_RIGHTS_OTHER",
                        "PAST_FILING_DATE",
                        "PREARBITRATION_REJECTED",
                        "PROCESSOR_REJECTED_OTHER",
                        "REFUNDED",
                        "REFUNDED_AFTER_CHARGEBACK",
                        "WITHDRAWN",
                        "WON_ARBITRATION",
                        "WON_FIRST_CHARGEBACK",
                        "WON_PREARBITRATION"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "status": {
                      "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                      "enum": [
                        "ARBITRATION",
                        "CASE_CLOSED",
                        "CASE_WON",
                        "NEW",
                        "PENDING_CUSTOMER",
                        "PREARBITRATION",
                        "REPRESENTMENT",
                        "SUBMITTED"
                      ],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "transaction_token": {
                      "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "arbitration_date",
                    "created",
                    "customer_filed_date",
                    "customer_note",
                    "network_claim_ids",
                    "network_filed_date",
                    "network_reason_code",
                    "prearbitration_date",
                    "primary_claim_id",
                    "reason",
                    "representment_date",
                    "resolution_amount",
                    "resolution_date",
                    "resolution_note",
                    "resolution_reason",
                    "status",
                    "token",
                    "transaction_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Initiate dispute",
        "tags": ["Dispute"]
      }
    },
    "/disputes/{dispute_token}": {
      "delete": {
        "description": "Withdraw dispute.",
        "operationId": "deleteDisputeByToken",
        "parameters": [
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute.",
                  "properties": {
                    "amount": {
                      "description": "Amount under dispute. May be different from the original transaction amount.",
                      "type": "integer"
                    },
                    "arbitration_date": {
                      "description": "Date dispute entered arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when first Dispute was reported.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "customer_filed_date": {
                      "description": "Date that the dispute was filed by the customer making the dispute.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_note": {
                      "description": "End customer description of the reason for the dispute.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "network_claim_ids": {
                      "description": "Unique identifiers for the dispute from the network.",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "network_filed_date": {
                      "description": "Date that the dispute was submitted to the network.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "network_reason_code": {
                      "description": "Network reason code used to file the dispute.",
                      "nullable": true,
                      "type": "string"
                    },
                    "prearbitration_date": {
                      "description": "Date dispute entered pre-arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "primary_claim_id": {
                      "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                      "nullable": true,
                      "type": "string"
                    },
                    "reason": {
                      "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                      "enum": [
                        "ATM_CASH_MISDISPENSE",
                        "CANCELLED",
                        "DUPLICATED",
                        "FRAUD_CARD_NOT_PRESENT",
                        "FRAUD_CARD_PRESENT",
                        "FRAUD_OTHER",
                        "GOODS_SERVICES_NOT_AS_DESCRIBED",
                        "GOODS_SERVICES_NOT_RECEIVED",
                        "INCORRECT_AMOUNT",
                        "MISSING_AUTH",
                        "OTHER",
                        "PROCESSING_ERROR",
                        "RECURRING_TRANSACTION_NOT_CANCELLED",
                        "REFUND_NOT_PROCESSED"
                      ],
                      "type": "string"
                    },
                    "representment_date": {
                      "description": "Date the representment was received.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_amount": {
                      "description": "Resolution amount net of network fees.",
                      "nullable": true,
                      "type": "integer"
                    },
                    "resolution_date": {
                      "description": "Date that the dispute was resolved.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_note": {
                      "description": "Note by Dispute team on the case resolution.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_reason": {
                      "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                      "enum": [
                        "CASE_LOST",
                        "NETWORK_REJECTED",
                        "NO_DISPUTE_RIGHTS_3DS",
                        "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                        "NO_DISPUTE_RIGHTS_CONTACTLESS",
                        "NO_DISPUTE_RIGHTS_HYBRID",
                        "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                        "NO_DISPUTE_RIGHTS_OTHER",
                        "PAST_FILING_DATE",
                        "PREARBITRATION_REJECTED",
                        "PROCESSOR_REJECTED_OTHER",
                        "REFUNDED",
                        "REFUNDED_AFTER_CHARGEBACK",
                        "WITHDRAWN",
                        "WON_ARBITRATION",
                        "WON_FIRST_CHARGEBACK",
                        "WON_PREARBITRATION"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "status": {
                      "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                      "enum": [
                        "ARBITRATION",
                        "CASE_CLOSED",
                        "CASE_WON",
                        "NEW",
                        "PENDING_CUSTOMER",
                        "PREARBITRATION",
                        "REPRESENTMENT",
                        "SUBMITTED"
                      ],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "transaction_token": {
                      "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "arbitration_date",
                    "created",
                    "customer_filed_date",
                    "customer_note",
                    "network_claim_ids",
                    "network_filed_date",
                    "network_reason_code",
                    "prearbitration_date",
                    "primary_claim_id",
                    "reason",
                    "representment_date",
                    "resolution_amount",
                    "resolution_date",
                    "resolution_note",
                    "resolution_reason",
                    "status",
                    "token",
                    "transaction_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Withdraw dispute",
        "tags": ["Dispute"]
      },
      "get": {
        "description": "Get dispute.",
        "operationId": "getDisputeByToken",
        "parameters": [
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute.",
                  "properties": {
                    "amount": {
                      "description": "Amount under dispute. May be different from the original transaction amount.",
                      "type": "integer"
                    },
                    "arbitration_date": {
                      "description": "Date dispute entered arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when first Dispute was reported.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "customer_filed_date": {
                      "description": "Date that the dispute was filed by the customer making the dispute.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_note": {
                      "description": "End customer description of the reason for the dispute.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "network_claim_ids": {
                      "description": "Unique identifiers for the dispute from the network.",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "network_filed_date": {
                      "description": "Date that the dispute was submitted to the network.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "network_reason_code": {
                      "description": "Network reason code used to file the dispute.",
                      "nullable": true,
                      "type": "string"
                    },
                    "prearbitration_date": {
                      "description": "Date dispute entered pre-arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "primary_claim_id": {
                      "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                      "nullable": true,
                      "type": "string"
                    },
                    "reason": {
                      "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                      "enum": [
                        "ATM_CASH_MISDISPENSE",
                        "CANCELLED",
                        "DUPLICATED",
                        "FRAUD_CARD_NOT_PRESENT",
                        "FRAUD_CARD_PRESENT",
                        "FRAUD_OTHER",
                        "GOODS_SERVICES_NOT_AS_DESCRIBED",
                        "GOODS_SERVICES_NOT_RECEIVED",
                        "INCORRECT_AMOUNT",
                        "MISSING_AUTH",
                        "OTHER",
                        "PROCESSING_ERROR",
                        "RECURRING_TRANSACTION_NOT_CANCELLED",
                        "REFUND_NOT_PROCESSED"
                      ],
                      "type": "string"
                    },
                    "representment_date": {
                      "description": "Date the representment was received.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_amount": {
                      "description": "Resolution amount net of network fees.",
                      "nullable": true,
                      "type": "integer"
                    },
                    "resolution_date": {
                      "description": "Date that the dispute was resolved.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_note": {
                      "description": "Note by Dispute team on the case resolution.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_reason": {
                      "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                      "enum": [
                        "CASE_LOST",
                        "NETWORK_REJECTED",
                        "NO_DISPUTE_RIGHTS_3DS",
                        "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                        "NO_DISPUTE_RIGHTS_CONTACTLESS",
                        "NO_DISPUTE_RIGHTS_HYBRID",
                        "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                        "NO_DISPUTE_RIGHTS_OTHER",
                        "PAST_FILING_DATE",
                        "PREARBITRATION_REJECTED",
                        "PROCESSOR_REJECTED_OTHER",
                        "REFUNDED",
                        "REFUNDED_AFTER_CHARGEBACK",
                        "WITHDRAWN",
                        "WON_ARBITRATION",
                        "WON_FIRST_CHARGEBACK",
                        "WON_PREARBITRATION"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "status": {
                      "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                      "enum": [
                        "ARBITRATION",
                        "CASE_CLOSED",
                        "CASE_WON",
                        "NEW",
                        "PENDING_CUSTOMER",
                        "PREARBITRATION",
                        "REPRESENTMENT",
                        "SUBMITTED"
                      ],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "transaction_token": {
                      "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "arbitration_date",
                    "created",
                    "customer_filed_date",
                    "customer_note",
                    "network_claim_ids",
                    "network_filed_date",
                    "network_reason_code",
                    "prearbitration_date",
                    "primary_claim_id",
                    "reason",
                    "representment_date",
                    "resolution_amount",
                    "resolution_date",
                    "resolution_note",
                    "resolution_reason",
                    "status",
                    "token",
                    "transaction_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get dispute",
        "tags": ["Dispute"]
      },
      "patch": {
        "description": "Update dispute. Can only be modified if status is `NEW`.",
        "operationId": "updateDisputeByToken",
        "parameters": [
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount to dispute",
                    "type": "integer"
                  },
                  "customer_filed_date": {
                    "description": "Date the customer filed the dispute",
                    "format": "date-time",
                    "type": "string"
                  },
                  "customer_note": {
                    "description": "Customer description of dispute",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason for dispute",
                    "enum": [
                      "ATM_CASH_MISDISPENSE",
                      "CANCELLED",
                      "DUPLICATED",
                      "FRAUD_CARD_NOT_PRESENT",
                      "FRAUD_CARD_PRESENT",
                      "FRAUD_OTHER",
                      "GOODS_SERVICES_NOT_AS_DESCRIBED",
                      "GOODS_SERVICES_NOT_RECEIVED",
                      "INCORRECT_AMOUNT",
                      "MISSING_AUTH",
                      "OTHER",
                      "PROCESSING_ERROR",
                      "RECURRING_TRANSACTION_NOT_CANCELLED",
                      "REFUND_NOT_PROCESSED"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute.",
                  "properties": {
                    "amount": {
                      "description": "Amount under dispute. May be different from the original transaction amount.",
                      "type": "integer"
                    },
                    "arbitration_date": {
                      "description": "Date dispute entered arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "created": {
                      "description": "Timestamp of when first Dispute was reported.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "customer_filed_date": {
                      "description": "Date that the dispute was filed by the customer making the dispute.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_note": {
                      "description": "End customer description of the reason for the dispute.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "network_claim_ids": {
                      "description": "Unique identifiers for the dispute from the network.",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "network_filed_date": {
                      "description": "Date that the dispute was submitted to the network.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "network_reason_code": {
                      "description": "Network reason code used to file the dispute.",
                      "nullable": true,
                      "type": "string"
                    },
                    "prearbitration_date": {
                      "description": "Date dispute entered pre-arbitration.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "primary_claim_id": {
                      "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                      "nullable": true,
                      "type": "string"
                    },
                    "reason": {
                      "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                      "enum": [
                        "ATM_CASH_MISDISPENSE",
                        "CANCELLED",
                        "DUPLICATED",
                        "FRAUD_CARD_NOT_PRESENT",
                        "FRAUD_CARD_PRESENT",
                        "FRAUD_OTHER",
                        "GOODS_SERVICES_NOT_AS_DESCRIBED",
                        "GOODS_SERVICES_NOT_RECEIVED",
                        "INCORRECT_AMOUNT",
                        "MISSING_AUTH",
                        "OTHER",
                        "PROCESSING_ERROR",
                        "RECURRING_TRANSACTION_NOT_CANCELLED",
                        "REFUND_NOT_PROCESSED"
                      ],
                      "type": "string"
                    },
                    "representment_date": {
                      "description": "Date the representment was received.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_amount": {
                      "description": "Resolution amount net of network fees.",
                      "nullable": true,
                      "type": "integer"
                    },
                    "resolution_date": {
                      "description": "Date that the dispute was resolved.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_note": {
                      "description": "Note by Dispute team on the case resolution.",
                      "maxLength": 10000,
                      "nullable": true,
                      "type": "string"
                    },
                    "resolution_reason": {
                      "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                      "enum": [
                        "CASE_LOST",
                        "NETWORK_REJECTED",
                        "NO_DISPUTE_RIGHTS_3DS",
                        "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                        "NO_DISPUTE_RIGHTS_CONTACTLESS",
                        "NO_DISPUTE_RIGHTS_HYBRID",
                        "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                        "NO_DISPUTE_RIGHTS_OTHER",
                        "PAST_FILING_DATE",
                        "PREARBITRATION_REJECTED",
                        "PROCESSOR_REJECTED_OTHER",
                        "REFUNDED",
                        "REFUNDED_AFTER_CHARGEBACK",
                        "WITHDRAWN",
                        "WON_ARBITRATION",
                        "WON_FIRST_CHARGEBACK",
                        "WON_PREARBITRATION"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "status": {
                      "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                      "enum": [
                        "ARBITRATION",
                        "CASE_CLOSED",
                        "CASE_WON",
                        "NEW",
                        "PENDING_CUSTOMER",
                        "PREARBITRATION",
                        "REPRESENTMENT",
                        "SUBMITTED"
                      ],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "transaction_token": {
                      "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": [
                    "amount",
                    "arbitration_date",
                    "created",
                    "customer_filed_date",
                    "customer_note",
                    "network_claim_ids",
                    "network_filed_date",
                    "network_reason_code",
                    "prearbitration_date",
                    "primary_claim_id",
                    "reason",
                    "representment_date",
                    "resolution_amount",
                    "resolution_date",
                    "resolution_note",
                    "resolution_reason",
                    "status",
                    "token",
                    "transaction_token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update dispute",
        "tags": ["Dispute"]
      }
    },
    "/disputes/{dispute_token}/evidences": {
      "get": {
        "description": "List evidence metadata for a dispute.",
        "operationId": "getDisputeEvidences",
        "parameters": [
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Dispute evidence.",
                        "properties": {
                          "created": {
                            "description": "Timestamp of when dispute evidence was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "dispute_token": {
                            "description": "Dispute token evidence is attached to.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "download_url": {
                            "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
                            "type": "string"
                          },
                          "filename": {
                            "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "upload_status": {
                            "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
                            "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
                            "type": "string"
                          },
                          "upload_url": {
                            "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
                            "type": "string"
                          }
                        },
                        "required": ["created", "dispute_token", "token", "upload_status"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List dispute evidences",
        "tags": ["Dispute"]
      },
      "post": {
        "description": "Use this endpoint to upload evidences for the dispute. It will return a URL to upload your documents to. The URL will expire in 30 minutes.\n\nUploaded documents must either be a `jpg`, `png` or `pdf` file, and each must be less than 5 GiB.\n",
        "operationId": "postEvidenceDocument",
        "parameters": [
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filename": {
                    "description": "Filename of the evidence.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute evidence.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when dispute evidence was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "dispute_token": {
                      "description": "Dispute token evidence is attached to.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "download_url": {
                      "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
                      "type": "string"
                    },
                    "filename": {
                      "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "upload_status": {
                      "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
                      "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
                      "type": "string"
                    },
                    "upload_url": {
                      "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
                      "type": "string"
                    }
                  },
                  "required": ["created", "dispute_token", "token", "upload_status"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Initiate dispute evidence upload",
        "tags": ["Dispute"]
      }
    },
    "/disputes/{dispute_token}/evidences/{evidence_token}": {
      "delete": {
        "description": "Soft delete evidence for a dispute. Evidence will not be reviewed or submitted by Lithic after it is withdrawn.",
        "operationId": "deleteDisputeEvidenceByToken",
        "parameters": [
          {
            "examples": {
              "disputeEvidenceExample": {
                "summary": "A sample dispute evidence token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "evidence_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute evidence.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when dispute evidence was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "dispute_token": {
                      "description": "Dispute token evidence is attached to.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "download_url": {
                      "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
                      "type": "string"
                    },
                    "filename": {
                      "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "upload_status": {
                      "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
                      "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
                      "type": "string"
                    },
                    "upload_url": {
                      "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
                      "type": "string"
                    }
                  },
                  "required": ["created", "dispute_token", "token", "upload_status"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Withdraw dispute evidence",
        "tags": ["Dispute"]
      },
      "get": {
        "description": "Get a dispute's evidence metadata.",
        "operationId": "getDisputeEvidenceByToken",
        "parameters": [
          {
            "examples": {
              "disputeEvidenceExample": {
                "summary": "A sample dispute evidence token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "evidence_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "examples": {
              "disputeTokenExample": {
                "summary": "A sample dispute token",
                "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
              }
            },
            "in": "path",
            "name": "dispute_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dispute evidence.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when dispute evidence was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "dispute_token": {
                      "description": "Dispute token evidence is attached to.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "download_url": {
                      "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
                      "type": "string"
                    },
                    "filename": {
                      "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "upload_status": {
                      "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
                      "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
                      "type": "string"
                    },
                    "upload_url": {
                      "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
                      "type": "string"
                    }
                  },
                  "required": ["created", "dispute_token", "token", "upload_status"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get dispute evidence",
        "tags": ["Dispute"]
      }
    },
    "/embed/card": {
      "get": {
        "description": "Handling full card PANs and CVV codes requires that you comply with the Payment Card Industry Data Security Standards (PCI DSS). Some clients choose to reduce their compliance obligations by leveraging our embedded card UI solution documented below.\n\nIn this setup, PANs and CVV codes are presented to the end-user via a card UI that we provide, optionally styled in the customer's branding using a specified css stylesheet. A user's browser makes the request directly to api.lithic.com, so card PANs and CVVs never touch the API customer's servers while full card data is displayed to their end-users. The response contains an HTML document. This means that the url for the request can be inserted straight into the `src` attribute of an iframe.\n\n```html\n<iframe id=\"card-iframe\"\n        src=\"https://sandbox.lithic.com/v1/embed/card?embed_request=eyJjc3MiO...;hmac=r8tx1...\"\n        allow=\"clipboard-write\" class=\"content\"></iframe>\n```\n\nYou should compute the request payload on the server side. You can render it (or the whole iframe) on the server or make an ajax call from your front end code, but **do not ever embed your API key into front end code, as doing so introduces a serious security vulnerability**.\n",
        "operationId": "getEmbedCard",
        "parameters": [
          {
            "description": "A base64 encoded JSON string of an EmbedRequest to specify which card to load.",
            "in": "query",
            "name": "embed_request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "SHA256 HMAC of the embed_request JSON string with base64 digest.",
            "in": "query",
            "name": "hmac",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {
                "examples": {
                  "html": {
                    "summary": "Card UI",
                    "value": "<html>\n<head>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://demo.lithic.com/backend/embedded.css\">\n<style>\n    #alert { display: none; }\n</style>\n<script type=\"text/javascript\">\n    var timeout;\n\n    function clearAlertDelay() {\n        clearTimeout(timeout);\n        var messageDiv = document.getElementById('alert');\n        timeout = window.setTimeout(\n            function() {\n                messageDiv.className = \"empty\";\n                messageDiv.innerText = \"\";\n            },\n            1200\n        );\n    }\n\n    function copySuccess(divId) {\n        var messageDiv = document.getElementById('alert');\n        messageDiv.innerText = divId + \" copied to clipboard\";\n        messageDiv.className = \"success\";\n        console.log('Copying to clipboard was successful!');\n        clearAlertDelay();\n    }\n\n    function copyFailed(divId) {\n        var messageDiv = document.getElementById('alert');\n        messageDiv.innerText = \"error copying \" + divId;\n        messageDiv.className = \"error\";\n        console.error('Copying to clipboard failed');\n        clearAlertDelay();\n    }\n\n    function copyToClip(divId) {\n        var messageDiv = document.getElementById('alert');\n        var copyEl = document.getElementById(divId);\n        var copyText = copyEl.textContent;\n        navigator.clipboard.writeText(copyText)\n            .then(function () {\n                copySuccess(divId);\n                clearAlertDelay();\n            })\n            .catch(function(err) {\n                try {\n                    var copied = false;\n                    if (document.createRange) {\n                        range = document.createRange();\n                        range.selectNode(copyEl)\n                        select = window.getSelection();\n                        select.removeAllRanges();\n                        select.addRange(range);\n                        copied = document.execCommand('copy');\n                        select.removeAllRanges();\n                    }\n                    else {\n                        range = document.body.createTextRange();\n                        range.moveToElementText(copyEl);\n                        range.select();\n                        copied = document.execCommand('copy');\n                    }\n\n                    if (copied) {\n                        copySuccess(divId);\n                    }\n                    else {\n                        copyFailed(divId);\n                    }\n                }\n                catch (err) {\n                    copyFailed(divId);\n                }\n                clearAlertDelay();\n            })\n    }\n</script>\n</head>\n<body>\n    <div id=\"card\">\n        <div id=\"pan\" onclick=\"copyToClip('pan')\">9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999</div>\n        <div id=\"expiry\">\n            <span id=\"month\" onclick=\"copyToClip('month')\">08</span>\n            <span id=\"separator\">/</span>\n            <span id=\"year\" onclick=\"copyToClip('year')\">27</span>\n        </div>\n        <div id=\"cvv\" onclick=\"copyToClip('cvv')\">574</div>\n        <div id=\"alert\" class=\"empty\"></div>\n    </div>\n</body>\n</html>\n"
                  }
                },
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The endpoint returns an HTML document similar to the one below. It is up to the API client to provide css styles for these elements in the EmbedRequest. You can always rely on the `card`, `pan`, `expiry`, `cvv`, and `alert` ids, as well as the `pan-separator` class. You shouldn't make any other assumptions about the structure of the document as it could change at any time.\n\nNote that using the default style sheet there is no visual indication that copying is happening on-click, and you may need to add on-click styling yourself.\n"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Embedded card UI",
        "tags": ["Card"]
      }
    },
    "/event_subscriptions": {
      "get": {
        "description": "List all the event subscriptions.",
        "operationId": "getEventSubscriptions",
        "parameters": [
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "description": "A subscription for all events",
                      "disabled": false,
                      "token": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                      "url": "https://example.com/webhook"
                    }
                  ],
                  "has_more": false
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "A subscription to specific event types.",
                        "properties": {
                          "description": {
                            "description": "A description of the subscription.",
                            "type": "string"
                          },
                          "disabled": {
                            "description": "Whether the subscription is disabled.",
                            "type": "boolean"
                          },
                          "event_types": {
                            "items": {
                              "enum": [
                                "account_holder.created",
                                "account_holder.updated",
                                "account_holder.verification",
                                "balance.updated",
                                "card.created",
                                "card.renewed",
                                "card.shipped",
                                "card_transaction.updated",
                                "digital_wallet.tokenization_approval_request",
                                "digital_wallet.tokenization_result",
                                "digital_wallet.tokenization_two_factor_authentication_code",
                                "dispute.updated",
                                "dispute_evidence.upload_failed",
                                "payment_transaction.created",
                                "payment_transaction.updated",
                                "three_ds_authentication.created",
                                "transfer_transaction.created"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          },
                          "url": {
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": ["description", "disabled", "token", "url"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List event subscriptions",
        "tags": ["Event"]
      },
      "post": {
        "description": "Create a new event subscription.",
        "operationId": "createEventSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Event subscription description.",
                    "type": "string"
                  },
                  "disabled": {
                    "default": false,
                    "description": "Whether the event subscription is active (false) or inactive (true).",
                    "type": "boolean"
                  },
                  "event_types": {
                    "description": "Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.",
                    "items": {
                      "enum": [
                        "account_holder.created",
                        "account_holder.updated",
                        "account_holder.verification",
                        "balance.updated",
                        "card.created",
                        "card.renewed",
                        "card.shipped",
                        "card_transaction.updated",
                        "digital_wallet.tokenization_approval_request",
                        "digital_wallet.tokenization_result",
                        "digital_wallet.tokenization_two_factor_authentication_code",
                        "dispute.updated",
                        "dispute_evidence.upload_failed",
                        "payment_transaction.created",
                        "payment_transaction.updated",
                        "three_ds_authentication.created",
                        "transfer_transaction.created"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "url": {
                    "description": "URL to which event webhooks will be sent. URL must be a valid HTTPS address.",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": ["url"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "description": "A subscription for all events",
                  "disabled": false,
                  "token": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                  "url": "https://example.com/webhook"
                },
                "schema": {
                  "description": "A subscription to specific event types.",
                  "properties": {
                    "description": {
                      "description": "A description of the subscription.",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "Whether the subscription is disabled.",
                      "type": "boolean"
                    },
                    "event_types": {
                      "items": {
                        "enum": [
                          "account_holder.created",
                          "account_holder.updated",
                          "account_holder.verification",
                          "balance.updated",
                          "card.created",
                          "card.renewed",
                          "card.shipped",
                          "card_transaction.updated",
                          "digital_wallet.tokenization_approval_request",
                          "digital_wallet.tokenization_result",
                          "digital_wallet.tokenization_two_factor_authentication_code",
                          "dispute.updated",
                          "dispute_evidence.upload_failed",
                          "payment_transaction.created",
                          "payment_transaction.updated",
                          "three_ds_authentication.created",
                          "transfer_transaction.created"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                      "type": "string"
                    },
                    "url": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": ["description", "disabled", "token", "url"],
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create event subscription",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}": {
      "delete": {
        "description": "Delete an event subscription.",
        "operationId": "deleteEventSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Delete event subscription",
        "tags": ["Event"]
      },
      "get": {
        "description": "Get an event subscription.",
        "operationId": "getEventSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "description": "A subscription for all events",
                  "disabled": false,
                  "token": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                  "url": "https://example.com/webhook"
                },
                "schema": {
                  "description": "A subscription to specific event types.",
                  "properties": {
                    "description": {
                      "description": "A description of the subscription.",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "Whether the subscription is disabled.",
                      "type": "boolean"
                    },
                    "event_types": {
                      "items": {
                        "enum": [
                          "account_holder.created",
                          "account_holder.updated",
                          "account_holder.verification",
                          "balance.updated",
                          "card.created",
                          "card.renewed",
                          "card.shipped",
                          "card_transaction.updated",
                          "digital_wallet.tokenization_approval_request",
                          "digital_wallet.tokenization_result",
                          "digital_wallet.tokenization_two_factor_authentication_code",
                          "dispute.updated",
                          "dispute_evidence.upload_failed",
                          "payment_transaction.created",
                          "payment_transaction.updated",
                          "three_ds_authentication.created",
                          "transfer_transaction.created"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                      "type": "string"
                    },
                    "url": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": ["description", "disabled", "token", "url"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get event subscription",
        "tags": ["Event"]
      },
      "patch": {
        "description": "Update an event subscription.",
        "operationId": "updateEventSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Event subscription description.",
                    "type": "string"
                  },
                  "disabled": {
                    "default": false,
                    "description": "Whether the event subscription is active (false) or inactive (true).",
                    "type": "boolean"
                  },
                  "event_types": {
                    "description": "Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.",
                    "items": {
                      "enum": [
                        "account_holder.created",
                        "account_holder.updated",
                        "account_holder.verification",
                        "balance.updated",
                        "card.created",
                        "card.renewed",
                        "card.shipped",
                        "card_transaction.updated",
                        "digital_wallet.tokenization_approval_request",
                        "digital_wallet.tokenization_result",
                        "digital_wallet.tokenization_two_factor_authentication_code",
                        "dispute.updated",
                        "dispute_evidence.upload_failed",
                        "payment_transaction.created",
                        "payment_transaction.updated",
                        "three_ds_authentication.created",
                        "transfer_transaction.created"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "url": {
                    "description": "URL to which event webhooks will be sent. URL must be a valid HTTPS address.",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": ["url"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "description": "A subscription for all events",
                  "disabled": false,
                  "token": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                  "url": "https://example.com/webhook"
                },
                "schema": {
                  "description": "A subscription to specific event types.",
                  "properties": {
                    "description": {
                      "description": "A description of the subscription.",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "Whether the subscription is disabled.",
                      "type": "boolean"
                    },
                    "event_types": {
                      "items": {
                        "enum": [
                          "account_holder.created",
                          "account_holder.updated",
                          "account_holder.verification",
                          "balance.updated",
                          "card.created",
                          "card.renewed",
                          "card.shipped",
                          "card_transaction.updated",
                          "digital_wallet.tokenization_approval_request",
                          "digital_wallet.tokenization_result",
                          "digital_wallet.tokenization_two_factor_authentication_code",
                          "dispute.updated",
                          "dispute_evidence.upload_failed",
                          "payment_transaction.created",
                          "payment_transaction.updated",
                          "three_ds_authentication.created",
                          "transfer_transaction.created"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                      "type": "string"
                    },
                    "url": {
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": ["description", "disabled", "token", "url"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update event subscription",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}/attempts": {
      "get": {
        "description": "List all the message attempts for a given event subscription.",
        "operationId": "getMessageAttemptsForEventSubscription",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "enum": ["FAILED", "PENDING", "SENDING", "SUCCESS"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "A subscription to specific event types.",
                        "properties": {
                          "created": {
                            "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "event_subscription_token": {
                            "description": "Globally unique identifier.",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          },
                          "event_token": {
                            "description": "Globally unique identifier.",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          },
                          "response": {
                            "description": "The response body from the event subscription's URL.",
                            "type": "string"
                          },
                          "response_status_code": {
                            "description": "The response status code from the event subscription's URL.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "The status of the event attempt.",
                            "enum": ["FAILED", "PENDING", "SENDING", "SUCCESS"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                          },
                          "url": {
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "created",
                          "event_subscription_token",
                          "event_token",
                          "response",
                          "response_status_code",
                          "status",
                          "token",
                          "url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List message attempts for an event subscription",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}/recover": {
      "post": {
        "description": "Resend all failed messages since a given time.",
        "operationId": "recoverEventSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Resend failed messages",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}/replay_missing": {
      "post": {
        "description": "Replays messages to the endpoint. Only messages that were created after `begin` will be sent. Messages that were previously sent to the endpoint are not resent.\nMessage will be retried if endpoint responds with a non-2xx status code. See [Retry Schedule](https://docs.lithic.com/docs/events-api#retry-schedule) for details.\n",
        "operationId": "replayMissingEventSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Replay missing messages",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}/secret": {
      "get": {
        "description": "Get the secret for an event subscription.",
        "operationId": "getEventSubscriptionSecret",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "secret": "whsec_C2FVsBQIhrscChlQIMA"
                },
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "The secret for the event subscription.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get event subscription secret",
        "tags": ["Event"]
      }
    },
    "/event_subscriptions/{event_subscription_token}/secret/rotate": {
      "post": {
        "description": "Rotate the secret for an event subscription. The previous secret will be valid for the next 24 hours.\n",
        "operationId": "rotateEventSubscriptionSecret",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Rotate event subscription secret",
        "tags": ["Event"]
      }
    },
    "/events": {
      "get": {
        "description": "List all events.",
        "operationId": "getEvents",
        "parameters": [
          {
            "description": "Event types to filter events by.",
            "explode": false,
            "in": "query",
            "name": "event_types",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "account_holder.created",
                  "account_holder.updated",
                  "account_holder.verification",
                  "balance.updated",
                  "card.created",
                  "card.renewed",
                  "card.shipped",
                  "card_transaction.updated",
                  "digital_wallet.tokenization_approval_request",
                  "digital_wallet.tokenization_result",
                  "digital_wallet.tokenization_two_factor_authentication_code",
                  "dispute.updated",
                  "dispute_evidence.upload_failed",
                  "payment_transaction.created",
                  "payment_transaction.updated",
                  "three_ds_authentication.created",
                  "transfer_transaction.created"
                ],
                "type": "string"
              },
              "maxLength": 10,
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Whether to include the event payload content in the response.",
            "in": "query",
            "name": "with_content",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "created": "2020-07-08 17:57:36",
                      "event_type": "dispute.updated",
                      "payload": {},
                      "token": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1"
                    }
                  ],
                  "has_more": false
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "A single event that affects the transaction state and lifecycle.",
                        "properties": {
                          "created": {
                            "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "event_type": {
                            "description": "Event types:\n* `account_holder.created` - Notification that a new account holder has been created and was not rejected.\n* `account_holder.updated` - Notification that an account holder was updated.\n* `account_holder.verification` - Notification than an account holder's identity verification is complete.\n* `card.created` - Notification that a card has been created.\n* `card.renewed` - Notification that a card has been renewed.\n* `card.shipped` - Physical card shipment notification. See https://docs.lithic.com/docs/cards#physical-card-shipped-webhook.\n* `card_transaction.updated` - Transaction Lifecycle webhook. See https://docs.lithic.com/docs/transaction-webhooks.\n* `dispute.updated` - A dispute has been updated.\n* `digital_wallet.tokenization_approval_request` - Card network's request to Lithic to activate a digital wallet token.\n* `digital_wallet.tokenization_result` - Notification of the end result of a tokenization, whether successful or failed.\n* `digital_wallet.tokenization_two_factor_authentication_code` - A code to be passed to an end user to complete digital wallet authentication. See https://docs.lithic.com/docs/tokenization-control#digital-wallet-tokenization-auth-code.\n",
                            "enum": [
                              "account_holder.created",
                              "account_holder.updated",
                              "account_holder.verification",
                              "balance.updated",
                              "card.created",
                              "card.renewed",
                              "card.shipped",
                              "card_transaction.updated",
                              "digital_wallet.tokenization_approval_request",
                              "digital_wallet.tokenization_result",
                              "digital_wallet.tokenization_two_factor_authentication_code",
                              "dispute.updated",
                              "dispute_evidence.upload_failed",
                              "payment_transaction.created",
                              "payment_transaction.updated",
                              "three_ds_authentication.created",
                              "transfer_transaction.created"
                            ],
                            "type": "string"
                          },
                          "payload": {
                            "type": "object"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          }
                        },
                        "required": ["created", "event_type", "payload", "token"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List events",
        "tags": ["Event"]
      }
    },
    "/events/{event_token}": {
      "get": {
        "description": "Get an event.",
        "operationId": "getEvent",
        "parameters": [
          {
            "in": "path",
            "name": "event_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A single event that affects the transaction state and lifecycle.",
                  "properties": {
                    "created": {
                      "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
                      "format": "date-time",
                      "type": "string"
                    },
                    "event_type": {
                      "description": "Event types:\n* `account_holder.created` - Notification that a new account holder has been created and was not rejected.\n* `account_holder.updated` - Notification that an account holder was updated.\n* `account_holder.verification` - Notification than an account holder's identity verification is complete.\n* `card.created` - Notification that a card has been created.\n* `card.renewed` - Notification that a card has been renewed.\n* `card.shipped` - Physical card shipment notification. See https://docs.lithic.com/docs/cards#physical-card-shipped-webhook.\n* `card_transaction.updated` - Transaction Lifecycle webhook. See https://docs.lithic.com/docs/transaction-webhooks.\n* `dispute.updated` - A dispute has been updated.\n* `digital_wallet.tokenization_approval_request` - Card network's request to Lithic to activate a digital wallet token.\n* `digital_wallet.tokenization_result` - Notification of the end result of a tokenization, whether successful or failed.\n* `digital_wallet.tokenization_two_factor_authentication_code` - A code to be passed to an end user to complete digital wallet authentication. See https://docs.lithic.com/docs/tokenization-control#digital-wallet-tokenization-auth-code.\n",
                      "enum": [
                        "account_holder.created",
                        "account_holder.updated",
                        "account_holder.verification",
                        "balance.updated",
                        "card.created",
                        "card.renewed",
                        "card.shipped",
                        "card_transaction.updated",
                        "digital_wallet.tokenization_approval_request",
                        "digital_wallet.tokenization_result",
                        "digital_wallet.tokenization_two_factor_authentication_code",
                        "dispute.updated",
                        "dispute_evidence.upload_failed",
                        "payment_transaction.created",
                        "payment_transaction.updated",
                        "three_ds_authentication.created",
                        "transfer_transaction.created"
                      ],
                      "type": "string"
                    },
                    "payload": {
                      "type": "object"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                      "type": "string"
                    }
                  },
                  "required": ["created", "event_type", "payload", "token"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get event",
        "tags": ["Event"]
      }
    },
    "/events/{event_token}/attempts": {
      "get": {
        "description": "List all the message attempts for a given event.",
        "operationId": "getMessageAttemptsForEvent",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "enum": ["FAILED", "PENDING", "SENDING", "SUCCESS"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "A subscription to specific event types.",
                        "properties": {
                          "created": {
                            "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "event_subscription_token": {
                            "description": "Globally unique identifier.",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          },
                          "event_token": {
                            "description": "Globally unique identifier.",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
                            "type": "string"
                          },
                          "response": {
                            "description": "The response body from the event subscription's URL.",
                            "type": "string"
                          },
                          "response_status_code": {
                            "description": "The response status code from the event subscription's URL.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "The status of the event attempt.",
                            "enum": ["FAILED", "PENDING", "SENDING", "SUCCESS"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                          },
                          "url": {
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "created",
                          "event_subscription_token",
                          "event_token",
                          "response",
                          "response_status_code",
                          "status",
                          "token",
                          "url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List message attempts for an event",
        "tags": ["Event"]
      }
    },
    "/events/{event_token}/event_subscriptions/{event_subscription_token}/resend": {
      "post": {
        "description": "Resend an event to an event subscription.",
        "operationId": "resendEvent",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "event_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Resend event",
        "tags": ["Event"]
      }
    },
    "/external_bank_accounts": {
      "get": {
        "description": "List all the external bank accounts for the provided search criteria.",
        "operationId": "searchExternalBankAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "account_token",
            "required": false,
            "schema": {
              "format": "uuid",
              "title": "Account Token",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "account_types",
            "required": false,
            "schema": {
              "items": {
                "enum": ["CHECKING", "SAVINGS"],
                "title": "AccountType"
              },
              "title": "Account Types",
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "countries",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "title": "Countries",
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "owner_types",
            "required": false,
            "schema": {
              "items": {
                "enum": ["BUSINESS", "INDIVIDUAL"],
                "title": "OwnerType",
                "type": "string"
              },
              "title": "Owner Types",
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "states",
            "required": false,
            "schema": {
              "items": {
                "enum": ["CLOSED", "ENABLED", "PAUSED"],
                "title": "AccountState"
              },
              "title": "Account States",
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "verification_states",
            "required": false,
            "schema": {
              "items": {
                "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                "title": "VerificationState"
              },
              "title": "Verification States",
              "type": "array"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                            "format": "uuid",
                            "title": "Account Token",
                            "type": "string"
                          },
                          "address": {
                            "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                            "properties": {
                              "address1": {
                                "maxLength": 40,
                                "minLength": 1,
                                "title": "Address1",
                                "type": "string"
                              },
                              "address2": {
                                "maxLength": 40,
                                "minLength": 1,
                                "title": "Address2",
                                "type": "string"
                              },
                              "city": {
                                "maxLength": 40,
                                "minLength": 1,
                                "title": "City",
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 3,
                                "minLength": 3,
                                "pattern": "^[A-Z]{3}$",
                                "title": "Country",
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 10,
                                "minLength": 5,
                                "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                                "title": "Postal Code",
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 2,
                                "minLength": 2,
                                "title": "State",
                                "type": "string"
                              }
                            },
                            "required": ["address1", "city", "country", "postal_code", "state"],
                            "title": "Address",
                            "type": "object"
                          },
                          "company_id": {
                            "description": "Optional field that helps identify bank accounts in receipts",
                            "title": "Company Id",
                            "type": "string"
                          },
                          "country": {
                            "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                            "title": "Country",
                            "type": "string"
                          },
                          "created": {
                            "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                            "format": "date-time",
                            "title": "Created",
                            "type": "string"
                          },
                          "currency": {
                            "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                            "title": "Currency",
                            "type": "string"
                          },
                          "dob": {
                            "description": "Date of Birth of the Individual that owns the external bank account",
                            "format": "date",
                            "title": "Date of Birth",
                            "type": "string"
                          },
                          "doing_business_as": {
                            "title": "Doing Business As",
                            "type": "string"
                          },
                          "last_four": {
                            "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                            "title": "Last Four",
                            "type": "string"
                          },
                          "name": {
                            "description": "The nickname given to this record of External Bank Account",
                            "title": "Name",
                            "type": "string"
                          },
                          "owner": {
                            "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                            "title": "Owner",
                            "type": "string"
                          },
                          "owner_type": {
                            "enum": ["BUSINESS", "INDIVIDUAL"],
                            "title": "Owner Type",
                            "type": "string"
                          },
                          "routing_number": {
                            "title": "Routing Number",
                            "type": "string"
                          },
                          "state": {
                            "enum": ["CLOSED", "ENABLED", "PAUSED"],
                            "title": "State",
                            "type": "string"
                          },
                          "token": {
                            "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                            "format": "uuid",
                            "title": "Token",
                            "type": "string"
                          },
                          "type": {
                            "enum": ["CHECKING", "SAVINGS"],
                            "title": "Type",
                            "type": "string"
                          },
                          "user_defined_id": {
                            "title": "User Defined ID",
                            "type": "string"
                          },
                          "verification_attempts": {
                            "description": "The number of attempts at verification",
                            "title": "Verification Attempts",
                            "type": "integer"
                          },
                          "verification_failed_reason": {
                            "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                            "title": "Verification Failed Reason",
                            "type": "string"
                          },
                          "verification_method": {
                            "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                            "title": "Verification Method",
                            "type": "string"
                          },
                          "verification_state": {
                            "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                            "title": "Verification State",
                            "type": "string"
                          }
                        },
                        "required": [
                          "country",
                          "created",
                          "currency",
                          "last_four",
                          "owner",
                          "owner_type",
                          "routing_number",
                          "state",
                          "token",
                          "type",
                          "verification_attempts",
                          "verification_method",
                          "verification_state"
                        ],
                        "title": "BankAccountApiResponse",
                        "type": "object"
                      },
                      "title": "Data",
                      "type": "array"
                    },
                    "has_more": {
                      "title": "More data exists",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "title": "BankAccountsApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List external bank accounts",
        "tags": ["External Bank Account"]
      },
      "post": {
        "description": "Creates an external bank account within a program or Lithic account.",
        "operationId": "createExternalBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "createBankAccountViaMicroDeposits": {
                  "summary": "Add external bank account via Micro Deposit Verification",
                  "value": {
                    "account_number": "13719713158835300",
                    "address": {
                      "address1": "5 Broad Street",
                      "city": "New York",
                      "country": "USA",
                      "postal_code": "10001",
                      "state": "NY"
                    },
                    "country": "USA",
                    "currency": "USD",
                    "name": "John Does Checking",
                    "owner": "John Doe",
                    "owner_type": "BUSINESS",
                    "routing_number": "011103093",
                    "type": "CHECKING",
                    "verification_method": "MICRO_DEPOSIT"
                  }
                },
                "createBankAccountViaPlaid": {
                  "summary": "Add external bank account via Plaid Verification",
                  "value": {
                    "owner": "John Doe",
                    "owner_type": "BUSINESS",
                    "processor_token": "processor-sandbox-0asd1-a92nc",
                    "verification_method": "PLAID"
                  }
                }
              },
              "schema": {
                "discriminator": {
                  "propertyName": "verification_method"
                },
                "oneOf": [
                  {
                    "properties": {
                      "account_number": {
                        "title": "Account Number",
                        "type": "string"
                      },
                      "account_token": {
                        "format": "uuid",
                        "title": "Account Token",
                        "type": "string"
                      },
                      "address": {
                        "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                        "properties": {
                          "address1": {
                            "maxLength": 40,
                            "minLength": 1,
                            "title": "Address1",
                            "type": "string"
                          },
                          "address2": {
                            "maxLength": 40,
                            "minLength": 1,
                            "title": "Address2",
                            "type": "string"
                          },
                          "city": {
                            "maxLength": 40,
                            "minLength": 1,
                            "title": "City",
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 3,
                            "minLength": 3,
                            "pattern": "^[A-Z]{3}$",
                            "title": "Country",
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 10,
                            "minLength": 5,
                            "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                            "title": "Postal Code",
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 2,
                            "minLength": 2,
                            "title": "State",
                            "type": "string"
                          }
                        },
                        "required": ["address1", "city", "country", "postal_code", "state"],
                        "title": "Address",
                        "type": "object"
                      },
                      "company_id": {
                        "maxLength": 10,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9]*$",
                        "title": "Company Id",
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 3,
                        "minLength": 3,
                        "pattern": "^[A-Z]{3}$",
                        "title": "Country",
                        "type": "string"
                      },
                      "currency": {
                        "maxLength": 3,
                        "minLength": 3,
                        "pattern": "^[A-Z]{3}$",
                        "title": "Currency",
                        "type": "string"
                      },
                      "dob": {
                        "description": "Date of Birth of the Individual that owns the external bank account",
                        "format": "date",
                        "title": "Date of Birth",
                        "type": "string"
                      },
                      "doing_business_as": {
                        "title": "Doing Business As",
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 50,
                        "minLength": 1,
                        "pattern": "^[!-~ ]*$",
                        "title": "Name",
                        "type": "string"
                      },
                      "owner": {
                        "maxLength": 22,
                        "minLength": 1,
                        "pattern": "^[!-~ ]*$",
                        "title": "Owner",
                        "type": "string"
                      },
                      "owner_type": {
                        "enum": ["BUSINESS", "INDIVIDUAL"],
                        "title": "OwnerType",
                        "type": "string"
                      },
                      "routing_number": {
                        "minLength": 1,
                        "pattern": "^[0-9]{9}$",
                        "title": "Routing Number",
                        "type": "string"
                      },
                      "type": {
                        "enum": ["CHECKING", "SAVINGS"],
                        "title": "AccountType"
                      },
                      "user_defined_id": {
                        "title": "User Defined ID",
                        "type": "string"
                      },
                      "verification_enforcement": {
                        "default": true,
                        "description": "Indicates whether verification was enforced for a given association record. For MICRO_DEPOSIT, option to disable verification if the external bank account has already been verified before. By default, verification will be required unless users pass in a value of false",
                        "title": "Verification Enforcement",
                        "type": "boolean"
                      },
                      "verification_method": {
                        "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                        "title": "VerificationMethod",
                        "type": "string"
                      }
                    },
                    "required": [
                      "account_number",
                      "country",
                      "currency",
                      "owner",
                      "owner_type",
                      "routing_number",
                      "type",
                      "verification_method"
                    ],
                    "title": "BankVerifiedCreateBankAccountApiRequest",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "account_token": {
                        "format": "uuid",
                        "title": "Account Token",
                        "type": "string"
                      },
                      "company_id": {
                        "maxLength": 10,
                        "minLength": 1,
                        "pattern": "^[a-zA-Z0-9]*$",
                        "title": "Company Id",
                        "type": "string"
                      },
                      "dob": {
                        "description": "Date of Birth of the Individual that owns the external bank account",
                        "format": "date",
                        "title": "Date of Birth",
                        "type": "string"
                      },
                      "doing_business_as": {
                        "title": "Doing Business As",
                        "type": "string"
                      },
                      "owner": {
                        "maxLength": 22,
                        "minLength": 1,
                        "pattern": "^[!-~ ]*$",
                        "title": "Owner",
                        "type": "string"
                      },
                      "owner_type": {
                        "enum": ["BUSINESS", "INDIVIDUAL"],
                        "title": "OwnerType",
                        "type": "string"
                      },
                      "processor_token": {
                        "minLength": 1,
                        "title": "Processor Token",
                        "type": "string"
                      },
                      "user_defined_id": {
                        "title": "User Defined ID",
                        "type": "string"
                      },
                      "verification_method": {
                        "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                        "title": "VerificationMethod",
                        "type": "string"
                      }
                    },
                    "required": ["owner", "owner_type", "processor_token", "verification_method"],
                    "title": "PlaidCreateBankAccountApiRequest",
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                      "format": "uuid",
                      "title": "Account Token",
                      "type": "string"
                    },
                    "address": {
                      "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                      "properties": {
                        "address1": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address1",
                          "type": "string"
                        },
                        "address2": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address2",
                          "type": "string"
                        },
                        "city": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "City",
                          "type": "string"
                        },
                        "country": {
                          "maxLength": 3,
                          "minLength": 3,
                          "pattern": "^[A-Z]{3}$",
                          "title": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "maxLength": 10,
                          "minLength": 5,
                          "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                          "title": "Postal Code",
                          "type": "string"
                        },
                        "state": {
                          "maxLength": 2,
                          "minLength": 2,
                          "title": "State",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "title": "Address",
                      "type": "object"
                    },
                    "company_id": {
                      "description": "Optional field that helps identify bank accounts in receipts",
                      "title": "Company Id",
                      "type": "string"
                    },
                    "country": {
                      "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                      "title": "Country",
                      "type": "string"
                    },
                    "created": {
                      "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                      "format": "date-time",
                      "title": "Created",
                      "type": "string"
                    },
                    "currency": {
                      "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                      "title": "Currency",
                      "type": "string"
                    },
                    "dob": {
                      "description": "Date of Birth of the Individual that owns the external bank account",
                      "format": "date",
                      "title": "Date of Birth",
                      "type": "string"
                    },
                    "doing_business_as": {
                      "title": "Doing Business As",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                      "title": "Last Four",
                      "type": "string"
                    },
                    "name": {
                      "description": "The nickname given to this record of External Bank Account",
                      "title": "Name",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                      "title": "Owner",
                      "type": "string"
                    },
                    "owner_type": {
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "title": "Owner Type",
                      "type": "string"
                    },
                    "routing_number": {
                      "title": "Routing Number",
                      "type": "string"
                    },
                    "state": {
                      "enum": ["CLOSED", "ENABLED", "PAUSED"],
                      "title": "State",
                      "type": "string"
                    },
                    "token": {
                      "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                      "format": "uuid",
                      "title": "Token",
                      "type": "string"
                    },
                    "type": {
                      "enum": ["CHECKING", "SAVINGS"],
                      "title": "Type",
                      "type": "string"
                    },
                    "user_defined_id": {
                      "title": "User Defined ID",
                      "type": "string"
                    },
                    "verification_attempts": {
                      "description": "The number of attempts at verification",
                      "title": "Verification Attempts",
                      "type": "integer"
                    },
                    "verification_failed_reason": {
                      "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                      "title": "Verification Failed Reason",
                      "type": "string"
                    },
                    "verification_method": {
                      "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                      "title": "Verification Method",
                      "type": "string"
                    },
                    "verification_state": {
                      "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                      "title": "Verification State",
                      "type": "string"
                    }
                  },
                  "required": [
                    "country",
                    "created",
                    "currency",
                    "last_four",
                    "owner",
                    "owner_type",
                    "routing_number",
                    "state",
                    "token",
                    "type",
                    "verification_attempts",
                    "verification_method",
                    "verification_state"
                  ],
                  "title": "BankAccountApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create external bank account",
        "tags": ["External Bank Account"]
      }
    },
    "/external_bank_accounts/{external_bank_account_token}": {
      "get": {
        "description": "Get the external bank account by token.",
        "operationId": "getExternalBankAccountByToken",
        "parameters": [
          {
            "in": "path",
            "name": "external_bank_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "External Bank Account Token",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                      "format": "uuid",
                      "title": "Account Token",
                      "type": "string"
                    },
                    "address": {
                      "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                      "properties": {
                        "address1": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address1",
                          "type": "string"
                        },
                        "address2": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address2",
                          "type": "string"
                        },
                        "city": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "City",
                          "type": "string"
                        },
                        "country": {
                          "maxLength": 3,
                          "minLength": 3,
                          "pattern": "^[A-Z]{3}$",
                          "title": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "maxLength": 10,
                          "minLength": 5,
                          "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                          "title": "Postal Code",
                          "type": "string"
                        },
                        "state": {
                          "maxLength": 2,
                          "minLength": 2,
                          "title": "State",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "title": "Address",
                      "type": "object"
                    },
                    "company_id": {
                      "description": "Optional field that helps identify bank accounts in receipts",
                      "title": "Company Id",
                      "type": "string"
                    },
                    "country": {
                      "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                      "title": "Country",
                      "type": "string"
                    },
                    "created": {
                      "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                      "format": "date-time",
                      "title": "Created",
                      "type": "string"
                    },
                    "currency": {
                      "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                      "title": "Currency",
                      "type": "string"
                    },
                    "dob": {
                      "description": "Date of Birth of the Individual that owns the external bank account",
                      "format": "date",
                      "title": "Date of Birth",
                      "type": "string"
                    },
                    "doing_business_as": {
                      "title": "Doing Business As",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                      "title": "Last Four",
                      "type": "string"
                    },
                    "name": {
                      "description": "The nickname given to this record of External Bank Account",
                      "title": "Name",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                      "title": "Owner",
                      "type": "string"
                    },
                    "owner_type": {
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "title": "Owner Type",
                      "type": "string"
                    },
                    "routing_number": {
                      "title": "Routing Number",
                      "type": "string"
                    },
                    "state": {
                      "enum": ["CLOSED", "ENABLED", "PAUSED"],
                      "title": "State",
                      "type": "string"
                    },
                    "token": {
                      "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                      "format": "uuid",
                      "title": "Token",
                      "type": "string"
                    },
                    "type": {
                      "enum": ["CHECKING", "SAVINGS"],
                      "title": "Type",
                      "type": "string"
                    },
                    "user_defined_id": {
                      "title": "User Defined ID",
                      "type": "string"
                    },
                    "verification_attempts": {
                      "description": "The number of attempts at verification",
                      "title": "Verification Attempts",
                      "type": "integer"
                    },
                    "verification_failed_reason": {
                      "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                      "title": "Verification Failed Reason",
                      "type": "string"
                    },
                    "verification_method": {
                      "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                      "title": "Verification Method",
                      "type": "string"
                    },
                    "verification_state": {
                      "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                      "title": "Verification State",
                      "type": "string"
                    }
                  },
                  "required": [
                    "country",
                    "created",
                    "currency",
                    "last_four",
                    "owner",
                    "owner_type",
                    "routing_number",
                    "state",
                    "token",
                    "type",
                    "verification_attempts",
                    "verification_method",
                    "verification_state"
                  ],
                  "title": "BankAccountApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get external bank account by token",
        "tags": ["External Bank Account"]
      },
      "patch": {
        "description": "Update the external bank account by token.",
        "operationId": "patchExternalBankAccountByToken",
        "parameters": [
          {
            "in": "path",
            "name": "external_bank_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "External Bank Account Token",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "address": {
                    "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                    "properties": {
                      "address1": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address1",
                        "type": "string"
                      },
                      "address2": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address2",
                        "type": "string"
                      },
                      "city": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "City",
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 3,
                        "minLength": 3,
                        "pattern": "^[A-Z]{3}$",
                        "title": "Country",
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 10,
                        "minLength": 5,
                        "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                        "title": "Postal Code",
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 2,
                        "minLength": 2,
                        "title": "State",
                        "type": "string"
                      }
                    },
                    "required": ["address1", "city", "country", "postal_code", "state"],
                    "title": "Address",
                    "type": "object"
                  },
                  "company_id": {
                    "maxLength": 10,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]*$",
                    "title": "Company Id",
                    "type": "string"
                  },
                  "dob": {
                    "description": "Date of Birth of the Individual that owns the external bank account",
                    "format": "date",
                    "title": "Date of Birth",
                    "type": "string"
                  },
                  "doing_business_as": {
                    "title": "Doing Business As",
                    "type": "string"
                  },
                  "name": {
                    "maxLength": 50,
                    "minLength": 1,
                    "pattern": "^[!-~ ]*$",
                    "title": "Name",
                    "type": "string"
                  },
                  "owner": {
                    "maxLength": 22,
                    "minLength": 1,
                    "pattern": "^[!-~ ]*$",
                    "title": "Owner",
                    "type": "string"
                  },
                  "owner_type": {
                    "enum": ["BUSINESS", "INDIVIDUAL"],
                    "title": "OwnerType",
                    "type": "string"
                  },
                  "user_defined_id": {
                    "title": "User Defined ID",
                    "type": "string"
                  }
                },
                "title": "UpdateBankAccountApiRequest",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                      "format": "uuid",
                      "title": "Account Token",
                      "type": "string"
                    },
                    "address": {
                      "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                      "properties": {
                        "address1": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address1",
                          "type": "string"
                        },
                        "address2": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address2",
                          "type": "string"
                        },
                        "city": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "City",
                          "type": "string"
                        },
                        "country": {
                          "maxLength": 3,
                          "minLength": 3,
                          "pattern": "^[A-Z]{3}$",
                          "title": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "maxLength": 10,
                          "minLength": 5,
                          "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                          "title": "Postal Code",
                          "type": "string"
                        },
                        "state": {
                          "maxLength": 2,
                          "minLength": 2,
                          "title": "State",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "title": "Address",
                      "type": "object"
                    },
                    "company_id": {
                      "description": "Optional field that helps identify bank accounts in receipts",
                      "title": "Company Id",
                      "type": "string"
                    },
                    "country": {
                      "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                      "title": "Country",
                      "type": "string"
                    },
                    "created": {
                      "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                      "format": "date-time",
                      "title": "Created",
                      "type": "string"
                    },
                    "currency": {
                      "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                      "title": "Currency",
                      "type": "string"
                    },
                    "dob": {
                      "description": "Date of Birth of the Individual that owns the external bank account",
                      "format": "date",
                      "title": "Date of Birth",
                      "type": "string"
                    },
                    "doing_business_as": {
                      "title": "Doing Business As",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                      "title": "Last Four",
                      "type": "string"
                    },
                    "name": {
                      "description": "The nickname given to this record of External Bank Account",
                      "title": "Name",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                      "title": "Owner",
                      "type": "string"
                    },
                    "owner_type": {
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "title": "Owner Type",
                      "type": "string"
                    },
                    "routing_number": {
                      "title": "Routing Number",
                      "type": "string"
                    },
                    "state": {
                      "enum": ["CLOSED", "ENABLED", "PAUSED"],
                      "title": "State",
                      "type": "string"
                    },
                    "token": {
                      "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                      "format": "uuid",
                      "title": "Token",
                      "type": "string"
                    },
                    "type": {
                      "enum": ["CHECKING", "SAVINGS"],
                      "title": "Type",
                      "type": "string"
                    },
                    "user_defined_id": {
                      "title": "User Defined ID",
                      "type": "string"
                    },
                    "verification_attempts": {
                      "description": "The number of attempts at verification",
                      "title": "Verification Attempts",
                      "type": "integer"
                    },
                    "verification_failed_reason": {
                      "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                      "title": "Verification Failed Reason",
                      "type": "string"
                    },
                    "verification_method": {
                      "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                      "title": "Verification Method",
                      "type": "string"
                    },
                    "verification_state": {
                      "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                      "title": "Verification State",
                      "type": "string"
                    }
                  },
                  "required": [
                    "country",
                    "created",
                    "currency",
                    "last_four",
                    "owner",
                    "owner_type",
                    "routing_number",
                    "state",
                    "token",
                    "type",
                    "verification_attempts",
                    "verification_method",
                    "verification_state"
                  ],
                  "title": "BankAccountApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Patch external bank account",
        "tags": ["External Bank Account"]
      }
    },
    "/external_bank_accounts/{external_bank_account_token}/micro_deposits": {
      "post": {
        "description": "Verify the external bank account by providing the micro deposit amounts.",
        "operationId": "verifyExternalBankAccountByMicroDeposits",
        "parameters": [
          {
            "in": "path",
            "name": "external_bank_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "External Bank Account Token",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "micro_deposits": {
                    "items": {
                      "type": "integer"
                    },
                    "title": "Micro Deposits",
                    "type": "array"
                  }
                },
                "required": ["micro_deposits"],
                "title": "MicroDepositVerificationDetails",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                      "format": "uuid",
                      "title": "Account Token",
                      "type": "string"
                    },
                    "address": {
                      "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                      "properties": {
                        "address1": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address1",
                          "type": "string"
                        },
                        "address2": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address2",
                          "type": "string"
                        },
                        "city": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "City",
                          "type": "string"
                        },
                        "country": {
                          "maxLength": 3,
                          "minLength": 3,
                          "pattern": "^[A-Z]{3}$",
                          "title": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "maxLength": 10,
                          "minLength": 5,
                          "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                          "title": "Postal Code",
                          "type": "string"
                        },
                        "state": {
                          "maxLength": 2,
                          "minLength": 2,
                          "title": "State",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "title": "Address",
                      "type": "object"
                    },
                    "company_id": {
                      "description": "Optional field that helps identify bank accounts in receipts",
                      "title": "Company Id",
                      "type": "string"
                    },
                    "country": {
                      "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                      "title": "Country",
                      "type": "string"
                    },
                    "created": {
                      "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                      "format": "date-time",
                      "title": "Created",
                      "type": "string"
                    },
                    "currency": {
                      "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                      "title": "Currency",
                      "type": "string"
                    },
                    "dob": {
                      "description": "Date of Birth of the Individual that owns the external bank account",
                      "format": "date",
                      "title": "Date of Birth",
                      "type": "string"
                    },
                    "doing_business_as": {
                      "title": "Doing Business As",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                      "title": "Last Four",
                      "type": "string"
                    },
                    "name": {
                      "description": "The nickname given to this record of External Bank Account",
                      "title": "Name",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                      "title": "Owner",
                      "type": "string"
                    },
                    "owner_type": {
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "title": "Owner Type",
                      "type": "string"
                    },
                    "routing_number": {
                      "title": "Routing Number",
                      "type": "string"
                    },
                    "state": {
                      "enum": ["CLOSED", "ENABLED", "PAUSED"],
                      "title": "State",
                      "type": "string"
                    },
                    "token": {
                      "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                      "format": "uuid",
                      "title": "Token",
                      "type": "string"
                    },
                    "type": {
                      "enum": ["CHECKING", "SAVINGS"],
                      "title": "Type",
                      "type": "string"
                    },
                    "user_defined_id": {
                      "title": "User Defined ID",
                      "type": "string"
                    },
                    "verification_attempts": {
                      "description": "The number of attempts at verification",
                      "title": "Verification Attempts",
                      "type": "integer"
                    },
                    "verification_failed_reason": {
                      "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                      "title": "Verification Failed Reason",
                      "type": "string"
                    },
                    "verification_method": {
                      "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                      "title": "Verification Method",
                      "type": "string"
                    },
                    "verification_state": {
                      "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                      "title": "Verification State",
                      "type": "string"
                    }
                  },
                  "required": [
                    "country",
                    "created",
                    "currency",
                    "last_four",
                    "owner",
                    "owner_type",
                    "routing_number",
                    "state",
                    "token",
                    "type",
                    "verification_attempts",
                    "verification_method",
                    "verification_state"
                  ],
                  "title": "BankAccountApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Verify external bank account via micro deposit amounts",
        "tags": ["External Bank Account"]
      }
    },
    "/external_bank_accounts/{external_bank_account_token}/retry_micro_deposits": {
      "post": {
        "description": "Retry external bank account micro deposit verification.",
        "operationId": "retryMicroDeposit",
        "parameters": [
          {
            "in": "path",
            "name": "external_bank_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "External Bank Account Token",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_token": {
                      "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                      "format": "uuid",
                      "title": "Account Token",
                      "type": "string"
                    },
                    "address": {
                      "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                      "properties": {
                        "address1": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address1",
                          "type": "string"
                        },
                        "address2": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "Address2",
                          "type": "string"
                        },
                        "city": {
                          "maxLength": 40,
                          "minLength": 1,
                          "title": "City",
                          "type": "string"
                        },
                        "country": {
                          "maxLength": 3,
                          "minLength": 3,
                          "pattern": "^[A-Z]{3}$",
                          "title": "Country",
                          "type": "string"
                        },
                        "postal_code": {
                          "maxLength": 10,
                          "minLength": 5,
                          "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                          "title": "Postal Code",
                          "type": "string"
                        },
                        "state": {
                          "maxLength": 2,
                          "minLength": 2,
                          "title": "State",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "title": "Address",
                      "type": "object"
                    },
                    "company_id": {
                      "description": "Optional field that helps identify bank accounts in receipts",
                      "title": "Company Id",
                      "type": "string"
                    },
                    "country": {
                      "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                      "title": "Country",
                      "type": "string"
                    },
                    "created": {
                      "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                      "format": "date-time",
                      "title": "Created",
                      "type": "string"
                    },
                    "currency": {
                      "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                      "title": "Currency",
                      "type": "string"
                    },
                    "dob": {
                      "description": "Date of Birth of the Individual that owns the external bank account",
                      "format": "date",
                      "title": "Date of Birth",
                      "type": "string"
                    },
                    "doing_business_as": {
                      "title": "Doing Business As",
                      "type": "string"
                    },
                    "last_four": {
                      "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                      "title": "Last Four",
                      "type": "string"
                    },
                    "name": {
                      "description": "The nickname given to this record of External Bank Account",
                      "title": "Name",
                      "type": "string"
                    },
                    "owner": {
                      "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                      "title": "Owner",
                      "type": "string"
                    },
                    "owner_type": {
                      "enum": ["BUSINESS", "INDIVIDUAL"],
                      "title": "Owner Type",
                      "type": "string"
                    },
                    "routing_number": {
                      "title": "Routing Number",
                      "type": "string"
                    },
                    "state": {
                      "enum": ["CLOSED", "ENABLED", "PAUSED"],
                      "title": "State",
                      "type": "string"
                    },
                    "token": {
                      "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                      "format": "uuid",
                      "title": "Token",
                      "type": "string"
                    },
                    "type": {
                      "enum": ["CHECKING", "SAVINGS"],
                      "title": "Type",
                      "type": "string"
                    },
                    "user_defined_id": {
                      "title": "User Defined ID",
                      "type": "string"
                    },
                    "verification_attempts": {
                      "description": "The number of attempts at verification",
                      "title": "Verification Attempts",
                      "type": "integer"
                    },
                    "verification_failed_reason": {
                      "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                      "title": "Verification Failed Reason",
                      "type": "string"
                    },
                    "verification_method": {
                      "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                      "title": "Verification Method",
                      "type": "string"
                    },
                    "verification_state": {
                      "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                      "title": "Verification State",
                      "type": "string"
                    }
                  },
                  "required": [
                    "country",
                    "created",
                    "currency",
                    "last_four",
                    "owner",
                    "owner_type",
                    "routing_number",
                    "state",
                    "token",
                    "type",
                    "verification_attempts",
                    "verification_method",
                    "verification_state"
                  ],
                  "title": "BankAccountApiResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Retry external bank account via micro deposit",
        "tags": ["External Bank Account"]
      }
    },
    "/financial_accounts": {
      "get": {
        "description": "Retrieve information on your financial accounts including routing and account number.",
        "operationId": "getFinancialAccounts",
        "parameters": [
          {
            "description": "List financial accounts for a given account_token or business_account_token",
            "in": "query",
            "name": "account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List financial accounts for a given business_account_token",
            "in": "query",
            "name": "business_account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List financial accounts of a given type",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": ["ISSUING", "OPERATING", "RESERVE"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Financial Account",
                        "properties": {
                          "account_number": {
                            "description": "Account number for your Lithic-assigned bank account number, if applicable.",
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time for when the financial account was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "nickname": {
                            "description": "User-defined nickname for the financial account.",
                            "type": "string"
                          },
                          "routing_number": {
                            "description": "Routing number for your Lithic-assigned bank account number, if applicable.",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for the financial account.",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of financial account",
                            "enum": ["ISSUING", "OPERATING", "RESERVE"],
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time for when the financial account was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": ["created", "token", "type", "updated"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List financial accounts",
        "tags": ["Financial Account"]
      },
      "post": {
        "description": "Create a new financial account",
        "operationId": "createFinancialAccount",
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "schema": {
              "format": "uuid",
              "title": "Idempotency key for the request",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account_token": {
                    "format": "uuid",
                    "title": "Account token to create the new account under",
                    "type": "string"
                  },
                  "nickname": {
                    "maxLength": 256,
                    "title": "Nickname of the financial account",
                    "type": "string"
                  },
                  "type": {
                    "enum": ["OPERATING"],
                    "title": "Account Type",
                    "type": "string"
                  }
                },
                "required": ["nickname", "type"],
                "title": "CreateFinancialAccountRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAccountHoldersResponse": {
                    "value": {
                      "account_number": "12345",
                      "created": "2024-01-11T19:50:36.105449",
                      "nickname": "Nickname",
                      "routing_number": "011103093",
                      "token": "6c25d6a4-4ff3-46f0-8f9b-f2cbb7e20e09",
                      "type": "OPERATING",
                      "updated": "2024-01-11T19:50:36.105449"
                    }
                  }
                },
                "schema": {
                  "description": "Financial Account",
                  "properties": {
                    "account_number": {
                      "description": "Account number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time for when the financial account was first created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "nickname": {
                      "description": "User-defined nickname for the financial account.",
                      "type": "string"
                    },
                    "routing_number": {
                      "description": "Routing number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the financial account.",
                      "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of financial account",
                      "enum": ["ISSUING", "OPERATING", "RESERVE"],
                      "type": "string"
                    },
                    "updated": {
                      "description": "Date and time for when the financial account was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": ["created", "token", "type", "updated"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create financial account",
        "tags": ["Financial Account"]
      }
    },
    "/financial_accounts/{financial_account_token}": {
      "get": {
        "description": "Get a financial account",
        "operationId": "getFinancialAccountByToken",
        "parameters": [
          {
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Financial Account",
                  "properties": {
                    "account_number": {
                      "description": "Account number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time for when the financial account was first created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "nickname": {
                      "description": "User-defined nickname for the financial account.",
                      "type": "string"
                    },
                    "routing_number": {
                      "description": "Routing number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the financial account.",
                      "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of financial account",
                      "enum": ["ISSUING", "OPERATING", "RESERVE"],
                      "type": "string"
                    },
                    "updated": {
                      "description": "Date and time for when the financial account was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": ["created", "token", "type", "updated"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get financial account",
        "tags": ["Financial Account"]
      },
      "patch": {
        "description": "Update a financial account",
        "operationId": "updateFinancialAccountByToken",
        "parameters": [
          {
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "nickname": {
                    "maxLength": 256,
                    "title": "Nickname",
                    "type": "string"
                  }
                },
                "title": "UpdateFinancialAccountRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Financial Account",
                  "properties": {
                    "account_number": {
                      "description": "Account number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time for when the financial account was first created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "nickname": {
                      "description": "User-defined nickname for the financial account.",
                      "type": "string"
                    },
                    "routing_number": {
                      "description": "Routing number for your Lithic-assigned bank account number, if applicable.",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the financial account.",
                      "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of financial account",
                      "enum": ["ISSUING", "OPERATING", "RESERVE"],
                      "type": "string"
                    },
                    "updated": {
                      "description": "Date and time for when the financial account was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": ["created", "token", "type", "updated"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Update financial account",
        "tags": ["Financial Account"]
      }
    },
    "/financial_accounts/{financial_account_token}/balances": {
      "get": {
        "description": "Get the balances for a given financial account.",
        "operationId": "getBalance",
        "parameters": [
          {
            "description": "UTC date of the balance to retrieve. Defaults to latest available balance",
            "in": "query",
            "name": "balance_date",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Balance after a given financial event occured.\nFor example, passing the event_token of a $5 CARD_CLEARING financial event will return a balance decreased by $5\n",
            "in": "query",
            "name": "last_transaction_event_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "description": "Balance of a Financial Account",
                        "properties": {
                          "available_amount": {
                            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time for when the balance was first created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                            "type": "string"
                          },
                          "financial_account_token": {
                            "description": "Globally unique identifier for the financial account that holds this balance.",
                            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            "format": "uuid",
                            "type": "string"
                          },
                          "financial_account_type": {
                            "description": "Type of financial account.",
                            "enum": ["ISSUING", "OPERATING", "RESERVE"],
                            "type": "string"
                          },
                          "last_transaction_event_token": {
                            "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "last_transaction_token": {
                            "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pending_amount": {
                            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "total_amount": {
                            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                            "type": "integer"
                          },
                          "updated": {
                            "description": "Date and time for when the balance was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "available_amount",
                          "created",
                          "currency",
                          "financial_account_token",
                          "financial_account_type",
                          "last_transaction_event_token",
                          "last_transaction_token",
                          "pending_amount",
                          "total_amount",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get balances",
        "tags": ["Balance"]
      }
    },
    "/financial_accounts/{financial_account_token}/financial_transactions": {
      "get": {
        "description": "List the financial transactions for a given financial account.",
        "operationId": "getFinancialTransactions",
        "parameters": [
          {
            "description": "Financial Transaction category to be returned.",
            "in": "query",
            "name": "category",
            "schema": {
              "enum": ["ACH", "CARD", "TRANSFER"],
              "type": "string"
            }
          },
          {
            "description": "Financial Transaction result to be returned.",
            "in": "query",
            "name": "result",
            "schema": {
              "enum": ["APPROVED", "DECLINED"],
              "type": "string"
            }
          },
          {
            "description": "Financial Transaction status to be returned.",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": ["DECLINED", "EXPIRED", "PENDING", "RETURNED", "SETTLED", "VOIDED"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "category": {
                            "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                            "enum": ["ACH", "CARD", "TRANSFER"],
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                            "type": "string"
                          },
                          "descriptor": {
                            "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of all financial events that have modified this financial transaction.",
                            "items": {
                              "properties": {
                                "amount": {
                                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                  "type": "integer"
                                },
                                "created": {
                                  "description": "Date and time when the financial event occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                  "enum": ["APPROVED", "DECLINED"],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier.",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                  "enum": [
                                    "ACH_INSUFFICIENT_FUNDS",
                                    "ACH_ORIGINATION_PENDING",
                                    "ACH_ORIGINATION_RELEASED",
                                    "ACH_RECEIPT_PENDING",
                                    "ACH_RECEIPT_RELEASED",
                                    "ACH_RETURN",
                                    "AUTHORIZATION",
                                    "AUTHORIZATION_ADVICE",
                                    "AUTHORIZATION_EXPIRY",
                                    "AUTHORIZATION_REVERSAL",
                                    "BALANCE_INQUIRY",
                                    "CLEARING",
                                    "CORRECTION_CREDIT",
                                    "CORRECTION_DEBIT",
                                    "CREDIT_AUTHORIZATION",
                                    "CREDIT_AUTHORIZATION_ADVICE",
                                    "FINANCIAL_AUTHORIZATION",
                                    "FINANCIAL_CREDIT_AUTHORIZATION",
                                    "RETURN",
                                    "RETURN_REVERSAL",
                                    "TRANSFER",
                                    "TRANSFER_INSUFFICIENT_FUNDS"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pending_amount": {
                            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                            "type": "integer"
                          },
                          "result": {
                            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "settled_amount": {
                            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "category",
                          "created",
                          "currency",
                          "descriptor",
                          "events",
                          "pending_amount",
                          "result",
                          "settled_amount",
                          "status",
                          "token",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List financial transactions",
        "tags": ["Financial Account"]
      }
    },
    "/financial_accounts/{financial_account_token}/financial_transactions/{financial_transaction_token}": {
      "get": {
        "description": "Get the financial transaction for the provided token.",
        "operationId": "getFinancialTransactionByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial transaction token.",
            "examples": {
              "financialTransactionTokenExample": {
                "summary": "A sample financial transaction token",
                "value": "18394f8e-711b-4b3e-ae21-d35a9eafe7d1"
              }
            },
            "in": "path",
            "name": "financial_transaction_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "category": {
                      "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                      "enum": ["ACH", "CARD", "TRANSFER"],
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "currency": {
                      "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                      "type": "string"
                    },
                    "descriptor": {
                      "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                      "type": "string"
                    },
                    "events": {
                      "description": "A list of all financial events that have modified this financial transaction.",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Date and time when the financial event occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "result": {
                            "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                            "enum": [
                              "ACH_INSUFFICIENT_FUNDS",
                              "ACH_ORIGINATION_PENDING",
                              "ACH_ORIGINATION_RELEASED",
                              "ACH_RECEIPT_PENDING",
                              "ACH_RECEIPT_RELEASED",
                              "ACH_RETURN",
                              "AUTHORIZATION",
                              "AUTHORIZATION_ADVICE",
                              "AUTHORIZATION_EXPIRY",
                              "AUTHORIZATION_REVERSAL",
                              "BALANCE_INQUIRY",
                              "CLEARING",
                              "CORRECTION_CREDIT",
                              "CORRECTION_DEBIT",
                              "CREDIT_AUTHORIZATION",
                              "CREDIT_AUTHORIZATION_ADVICE",
                              "FINANCIAL_AUTHORIZATION",
                              "FINANCIAL_CREDIT_AUTHORIZATION",
                              "RETURN",
                              "RETURN_REVERSAL",
                              "TRANSFER",
                              "TRANSFER_INSUFFICIENT_FUNDS"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pending_amount": {
                      "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                      "type": "integer"
                    },
                    "result": {
                      "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                      "enum": ["APPROVED", "DECLINED"],
                      "type": "string"
                    },
                    "settled_amount": {
                      "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                      "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "updated": {
                      "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "category",
                    "created",
                    "currency",
                    "descriptor",
                    "events",
                    "pending_amount",
                    "result",
                    "settled_amount",
                    "status",
                    "token",
                    "updated"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get financial transaction",
        "tags": ["Financial Account"]
      }
    },
    "/financial_accounts/{financial_account_token}/statements": {
      "get": {
        "description": "List the statements for a given financial account.",
        "operationId": "getStatements",
        "parameters": [
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified date will be included.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified date will be included.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "ach_period_total": {
                            "description": "Total payments during this billing period.",
                            "title": "ACH Period Total",
                            "type": "integer"
                          },
                          "ach_ytd_total": {
                            "description": "Year-to-date settled payment total",
                            "title": "ACH YTD Total",
                            "type": "integer"
                          },
                          "adjustments_period_total": {
                            "description": "Total adjustments during this billing period.",
                            "title": "Adjustments Period Total",
                            "type": "integer"
                          },
                          "adjustments_ytd_total": {
                            "description": "Year-to-date settled adjustments total",
                            "title": "Adjustments YTD Total",
                            "type": "integer"
                          },
                          "amount_due": {
                            "description": "Payment due at the end of the billing period. Negative amount indicates something is owed. If the amount owed is positive (e.g., there was a net credit), then payment should be returned to the cardholder via ACH.",
                            "title": "Amount Due",
                            "type": "integer"
                          },
                          "available_credit": {
                            "description": "Amount of credit available to spend",
                            "title": "Available Credit",
                            "type": "integer"
                          },
                          "created": {
                            "description": "Timestamp of when the statement was created",
                            "format": "date-time",
                            "title": "Created Time",
                            "type": "string"
                          },
                          "credit_limit": {
                            "description": "For prepay accounts, this is the minimum prepay balance that must be maintained. For charge card accounts, this is the maximum credit balance extended by a lender.",
                            "title": "Credit Limit",
                            "type": "integer"
                          },
                          "days_in_billing_cycle": {
                            "description": "Number of days in the billing cycle",
                            "title": "Days in Billing Cycle",
                            "type": "integer"
                          },
                          "ending_balance": {
                            "description": "Balance at the end of the billing period. For charge cards, this should be the same at the statement amount due.",
                            "title": "Ending Balance",
                            "type": "integer"
                          },
                          "financial_account_token": {
                            "description": "Globally unique identifier for a financial account",
                            "format": "uuid",
                            "title": "Financial Account Token",
                            "type": "string"
                          },
                          "payment_due_date": {
                            "description": "Date when the payment is due",
                            "format": "date",
                            "title": "Payment Due Date",
                            "type": "string"
                          },
                          "purchases_period_total": {
                            "description": "Total settled card transactions during this billing period, determined by liability date.",
                            "title": "Purchases Period Total",
                            "type": "integer"
                          },
                          "purchases_ytd_total": {
                            "description": "Year-to-date settled card transaction total",
                            "title": "Purchases YTD Total",
                            "type": "integer"
                          },
                          "starting_balance": {
                            "description": "Balance at the start of the billing period",
                            "title": "Starting Balance",
                            "type": "integer"
                          },
                          "statement_end_date": {
                            "description": "Date when the billing period ended",
                            "format": "date",
                            "title": "Statement End Date",
                            "type": "string"
                          },
                          "statement_start_date": {
                            "description": "Date when the billing period began",
                            "format": "date",
                            "title": "Statement Start Date",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for a statement",
                            "title": "Statement Token",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Timestamp of when the statement was updated",
                            "format": "date-time",
                            "title": "Updated Time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "ach_period_total",
                          "ach_ytd_total",
                          "adjustments_period_total",
                          "adjustments_ytd_total",
                          "amount_due",
                          "available_credit",
                          "created",
                          "credit_limit",
                          "days_in_billing_cycle",
                          "ending_balance",
                          "financial_account_token",
                          "payment_due_date",
                          "purchases_period_total",
                          "purchases_ytd_total",
                          "starting_balance",
                          "statement_end_date",
                          "statement_start_date",
                          "token",
                          "updated"
                        ],
                        "title": "StatementResponse",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List statements",
        "tags": ["Statement"]
      }
    },
    "/financial_accounts/{financial_account_token}/statements/{statement_token}": {
      "get": {
        "description": "Get a specific statement for a given financial account.",
        "operationId": "getStatement",
        "parameters": [
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for statements.",
            "examples": {
              "statementTokenExample": {
                "summary": "A sample statement token",
                "value": "2UJf2y1JT6nsvDRH4rgSlfWs6sw"
              }
            },
            "in": "path",
            "name": "statement_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ach_period_total": {
                      "description": "Total payments during this billing period.",
                      "title": "ACH Period Total",
                      "type": "integer"
                    },
                    "ach_ytd_total": {
                      "description": "Year-to-date settled payment total",
                      "title": "ACH YTD Total",
                      "type": "integer"
                    },
                    "adjustments_period_total": {
                      "description": "Total adjustments during this billing period.",
                      "title": "Adjustments Period Total",
                      "type": "integer"
                    },
                    "adjustments_ytd_total": {
                      "description": "Year-to-date settled adjustments total",
                      "title": "Adjustments YTD Total",
                      "type": "integer"
                    },
                    "amount_due": {
                      "description": "Payment due at the end of the billing period. Negative amount indicates something is owed. If the amount owed is positive (e.g., there was a net credit), then payment should be returned to the cardholder via ACH.",
                      "title": "Amount Due",
                      "type": "integer"
                    },
                    "available_credit": {
                      "description": "Amount of credit available to spend",
                      "title": "Available Credit",
                      "type": "integer"
                    },
                    "created": {
                      "description": "Timestamp of when the statement was created",
                      "format": "date-time",
                      "title": "Created Time",
                      "type": "string"
                    },
                    "credit_limit": {
                      "description": "For prepay accounts, this is the minimum prepay balance that must be maintained. For charge card accounts, this is the maximum credit balance extended by a lender.",
                      "title": "Credit Limit",
                      "type": "integer"
                    },
                    "days_in_billing_cycle": {
                      "description": "Number of days in the billing cycle",
                      "title": "Days in Billing Cycle",
                      "type": "integer"
                    },
                    "ending_balance": {
                      "description": "Balance at the end of the billing period. For charge cards, this should be the same at the statement amount due.",
                      "title": "Ending Balance",
                      "type": "integer"
                    },
                    "financial_account_token": {
                      "description": "Globally unique identifier for a financial account",
                      "format": "uuid",
                      "title": "Financial Account Token",
                      "type": "string"
                    },
                    "payment_due_date": {
                      "description": "Date when the payment is due",
                      "format": "date",
                      "title": "Payment Due Date",
                      "type": "string"
                    },
                    "purchases_period_total": {
                      "description": "Total settled card transactions during this billing period, determined by liability date.",
                      "title": "Purchases Period Total",
                      "type": "integer"
                    },
                    "purchases_ytd_total": {
                      "description": "Year-to-date settled card transaction total",
                      "title": "Purchases YTD Total",
                      "type": "integer"
                    },
                    "starting_balance": {
                      "description": "Balance at the start of the billing period",
                      "title": "Starting Balance",
                      "type": "integer"
                    },
                    "statement_end_date": {
                      "description": "Date when the billing period ended",
                      "format": "date",
                      "title": "Statement End Date",
                      "type": "string"
                    },
                    "statement_start_date": {
                      "description": "Date when the billing period began",
                      "format": "date",
                      "title": "Statement Start Date",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for a statement",
                      "title": "Statement Token",
                      "type": "string"
                    },
                    "updated": {
                      "description": "Timestamp of when the statement was updated",
                      "format": "date-time",
                      "title": "Updated Time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ach_period_total",
                    "ach_ytd_total",
                    "adjustments_period_total",
                    "adjustments_ytd_total",
                    "amount_due",
                    "available_credit",
                    "created",
                    "credit_limit",
                    "days_in_billing_cycle",
                    "ending_balance",
                    "financial_account_token",
                    "payment_due_date",
                    "purchases_period_total",
                    "purchases_ytd_total",
                    "starting_balance",
                    "statement_end_date",
                    "statement_start_date",
                    "token",
                    "updated"
                  ],
                  "title": "StatementResponse",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get statement by token",
        "tags": ["Statement"]
      }
    },
    "/financial_accounts/{financial_account_token}/statements/{statement_token}/line_items": {
      "get": {
        "description": "List the line items for a given statement within a given financial account.",
        "operationId": "getStatementLineItems",
        "parameters": [
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for financial account.",
            "examples": {
              "financialAccountTokenExample": {
                "summary": "A sample financial account token",
                "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              }
            },
            "in": "path",
            "name": "financial_account_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Globally unique identifier for statements.",
            "examples": {
              "statementTokenExample": {
                "summary": "A sample statement token",
                "value": "2UJf2y1JT6nsvDRH4rgSlfWs6sw"
              }
            },
            "in": "path",
            "name": "statement_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "amount": {
                            "title": "Amount",
                            "type": "integer"
                          },
                          "card_token": {
                            "description": "Globally unique identifier for a card",
                            "format": "uuid",
                            "title": "Card Token",
                            "type": "string"
                          },
                          "category": {
                            "enum": ["ACH", "CARD", "TRANSFER"],
                            "title": "Category of Transaction",
                            "type": "string"
                          },
                          "created": {
                            "description": "Timestamp of when the line item was generated",
                            "format": "date-time",
                            "title": "Created",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction",
                            "title": "Currency",
                            "type": "string"
                          },
                          "descriptor": {
                            "title": "Descriptor",
                            "type": "string"
                          },
                          "event_type": {
                            "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                            "enum": [
                              "ACH_INSUFFICIENT_FUNDS",
                              "ACH_ORIGINATION_PENDING",
                              "ACH_ORIGINATION_RELEASED",
                              "ACH_RECEIPT_PENDING",
                              "ACH_RECEIPT_RELEASED",
                              "ACH_RETURN",
                              "AUTHORIZATION",
                              "AUTHORIZATION_ADVICE",
                              "AUTHORIZATION_EXPIRY",
                              "AUTHORIZATION_REVERSAL",
                              "BALANCE_INQUIRY",
                              "CLEARING",
                              "CORRECTION_CREDIT",
                              "CORRECTION_DEBIT",
                              "CREDIT_AUTHORIZATION",
                              "CREDIT_AUTHORIZATION_ADVICE",
                              "FINANCIAL_AUTHORIZATION",
                              "FINANCIAL_CREDIT_AUTHORIZATION",
                              "RETURN",
                              "RETURN_REVERSAL",
                              "TRANSFER",
                              "TRANSFER_INSUFFICIENT_FUNDS"
                            ],
                            "type": "string"
                          },
                          "financial_account_token": {
                            "description": "Globally unique identifier for a financial account",
                            "format": "uuid",
                            "title": "Financial Account Token",
                            "type": "string"
                          },
                          "financial_transaction_token": {
                            "description": "Globally unique identifier for a financial transaction",
                            "format": "uuid",
                            "title": "Financial Account Token",
                            "type": "string"
                          },
                          "settled_date": {
                            "description": "Date that the transaction settled",
                            "format": "date",
                            "title": "Settled Date",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for a Statement Line Item",
                            "format": "uuid",
                            "title": "Token",
                            "type": "string"
                          }
                        },
                        "required": [
                          "amount",
                          "category",
                          "created",
                          "currency",
                          "event_type",
                          "financial_account_token",
                          "financial_transaction_token",
                          "settled_date",
                          "token"
                        ],
                        "title": "StatementLineItemResponse",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List line items for a statement",
        "tags": ["Statement"]
      }
    },
    "/payments": {
      "get": {
        "description": "List all the payments for the provided search criteria.",
        "operationId": "searchPayments",
        "parameters": [
          {
            "in": "query",
            "name": "financial_account_token",
            "required": false,
            "schema": {
              "format": "uuid",
              "title": "Financial Account Token",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "result",
            "required": false,
            "schema": {
              "enum": ["APPROVED", "DECLINED"],
              "title": "Result",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["DECLINED", "PENDING", "RETURNED", "SETTLED"],
              "title": "Status",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "category": {
                                "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                                "enum": ["ACH", "CARD", "TRANSFER"],
                                "type": "string"
                              },
                              "created": {
                                "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "currency": {
                                "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                                "type": "string"
                              },
                              "descriptor": {
                                "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                                "type": "string"
                              },
                              "events": {
                                "description": "A list of all financial events that have modified this financial transaction.",
                                "items": {
                                  "properties": {
                                    "amount": {
                                      "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                      "type": "integer"
                                    },
                                    "created": {
                                      "description": "Date and time when the financial event occurred. UTC time zone.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "result": {
                                      "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                      "enum": ["APPROVED", "DECLINED"],
                                      "type": "string"
                                    },
                                    "token": {
                                      "description": "Globally unique identifier.",
                                      "format": "uuid",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                      "enum": [
                                        "ACH_INSUFFICIENT_FUNDS",
                                        "ACH_ORIGINATION_PENDING",
                                        "ACH_ORIGINATION_RELEASED",
                                        "ACH_RECEIPT_PENDING",
                                        "ACH_RECEIPT_RELEASED",
                                        "ACH_RETURN",
                                        "AUTHORIZATION",
                                        "AUTHORIZATION_ADVICE",
                                        "AUTHORIZATION_EXPIRY",
                                        "AUTHORIZATION_REVERSAL",
                                        "BALANCE_INQUIRY",
                                        "CLEARING",
                                        "CORRECTION_CREDIT",
                                        "CORRECTION_DEBIT",
                                        "CREDIT_AUTHORIZATION",
                                        "CREDIT_AUTHORIZATION_ADVICE",
                                        "FINANCIAL_AUTHORIZATION",
                                        "FINANCIAL_CREDIT_AUTHORIZATION",
                                        "RETURN",
                                        "RETURN_REVERSAL",
                                        "TRANSFER",
                                        "TRANSFER_INSUFFICIENT_FUNDS"
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "pending_amount": {
                                "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                                "type": "integer"
                              },
                              "result": {
                                "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                                "enum": ["APPROVED", "DECLINED"],
                                "type": "string"
                              },
                              "settled_amount": {
                                "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                                "type": "integer"
                              },
                              "status": {
                                "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                                "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "updated": {
                                "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "category",
                              "created",
                              "currency",
                              "descriptor",
                              "events",
                              "pending_amount",
                              "result",
                              "settled_amount",
                              "status",
                              "token",
                              "updated"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "direction": {
                                "enum": ["CREDIT", "DEBIT"],
                                "title": "ACH Direction",
                                "type": "string"
                              },
                              "external_bank_account_token": {
                                "format": "uuid",
                                "title": "External Bank Account Token",
                                "type": "string"
                              },
                              "method": {
                                "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                                "title": "Payment Method",
                                "type": "string"
                              },
                              "method_attributes": {
                                "properties": {
                                  "company_id": {
                                    "title": "Company ID",
                                    "type": "string"
                                  },
                                  "receipt_routing_number": {
                                    "title": "Company ID",
                                    "type": "string"
                                  },
                                  "retries": {
                                    "title": "Retries",
                                    "type": "integer"
                                  },
                                  "return_reason_code": {
                                    "title": "Return Reason Code",
                                    "type": "string"
                                  },
                                  "sec_code": {
                                    "enum": ["CCD", "PPD", "WEB"],
                                    "title": "SEC Code",
                                    "type": "string"
                                  }
                                },
                                "required": ["sec_code"],
                                "title": "PaymentMethodAttributes",
                                "type": "object"
                              },
                              "source": {
                                "enum": ["CUSTOMER", "LITHIC"],
                                "title": "Payment Message Source",
                                "type": "string"
                              },
                              "user_defined_id": {
                                "maxLength": 512,
                                "title": "User Defined Id",
                                "type": "string"
                              }
                            },
                            "required": ["direction", "method", "method_attributes", "source"],
                            "type": "object"
                          }
                        ],
                        "title": "PaymentResponse"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List payments",
        "tags": ["Payment"]
      },
      "post": {
        "description": "Initiates a payment between a financial account and an external bank account.",
        "operationId": "createPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "minimum": 1,
                    "title": "Amount",
                    "type": "integer"
                  },
                  "external_bank_account_token": {
                    "format": "uuid",
                    "title": "External Bank Account Token",
                    "type": "string"
                  },
                  "financial_account_token": {
                    "format": "uuid",
                    "title": "Financial Account Token",
                    "type": "string"
                  },
                  "memo": {
                    "maxLength": 512,
                    "title": "Memo",
                    "type": "string"
                  },
                  "method": {
                    "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                    "title": "Payment Method",
                    "type": "string"
                  },
                  "method_attributes": {
                    "properties": {
                      "company_id": {
                        "title": "Company ID",
                        "type": "string"
                      },
                      "receipt_routing_number": {
                        "title": "Company ID",
                        "type": "string"
                      },
                      "retries": {
                        "title": "Retries",
                        "type": "integer"
                      },
                      "return_reason_code": {
                        "title": "Return Reason Code",
                        "type": "string"
                      },
                      "sec_code": {
                        "enum": ["CCD", "PPD", "WEB"],
                        "title": "SEC Code",
                        "type": "string"
                      }
                    },
                    "required": ["sec_code"],
                    "title": "PaymentMethodAttributes",
                    "type": "object"
                  },
                  "token": {
                    "description": "Customer-provided token that will serve as an idempotency token. This token will become the transaction token.",
                    "format": "uuid",
                    "title": "Token",
                    "type": "string"
                  },
                  "type": {
                    "enum": ["COLLECTION", "PAYMENT"],
                    "title": "Payment Type",
                    "type": "string"
                  },
                  "user_defined_id": {
                    "maxLength": 512,
                    "title": "User Defined Id",
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "external_bank_account_token",
                  "financial_account_token",
                  "method",
                  "method_attributes",
                  "type"
                ],
                "title": "CreatePaymentRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "properties": {
                            "category": {
                              "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                              "enum": ["ACH", "CARD", "TRANSFER"],
                              "type": "string"
                            },
                            "created": {
                              "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "currency": {
                              "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                              "type": "string"
                            },
                            "descriptor": {
                              "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                              "type": "string"
                            },
                            "events": {
                              "description": "A list of all financial events that have modified this financial transaction.",
                              "items": {
                                "properties": {
                                  "amount": {
                                    "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                    "type": "integer"
                                  },
                                  "created": {
                                    "description": "Date and time when the financial event occurred. UTC time zone.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "result": {
                                    "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                    "enum": ["APPROVED", "DECLINED"],
                                    "type": "string"
                                  },
                                  "token": {
                                    "description": "Globally unique identifier.",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                    "enum": [
                                      "ACH_INSUFFICIENT_FUNDS",
                                      "ACH_ORIGINATION_PENDING",
                                      "ACH_ORIGINATION_RELEASED",
                                      "ACH_RECEIPT_PENDING",
                                      "ACH_RECEIPT_RELEASED",
                                      "ACH_RETURN",
                                      "AUTHORIZATION",
                                      "AUTHORIZATION_ADVICE",
                                      "AUTHORIZATION_EXPIRY",
                                      "AUTHORIZATION_REVERSAL",
                                      "BALANCE_INQUIRY",
                                      "CLEARING",
                                      "CORRECTION_CREDIT",
                                      "CORRECTION_DEBIT",
                                      "CREDIT_AUTHORIZATION",
                                      "CREDIT_AUTHORIZATION_ADVICE",
                                      "FINANCIAL_AUTHORIZATION",
                                      "FINANCIAL_CREDIT_AUTHORIZATION",
                                      "RETURN",
                                      "RETURN_REVERSAL",
                                      "TRANSFER",
                                      "TRANSFER_INSUFFICIENT_FUNDS"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "pending_amount": {
                              "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                              "type": "integer"
                            },
                            "result": {
                              "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                              "enum": ["APPROVED", "DECLINED"],
                              "type": "string"
                            },
                            "settled_amount": {
                              "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                              "type": "integer"
                            },
                            "status": {
                              "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                              "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                              "type": "string"
                            },
                            "token": {
                              "description": "Globally unique identifier.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "updated": {
                              "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                              "format": "date-time",
                              "type": "string"
                            }
                          },
                          "required": [
                            "category",
                            "created",
                            "currency",
                            "descriptor",
                            "events",
                            "pending_amount",
                            "result",
                            "settled_amount",
                            "status",
                            "token",
                            "updated"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "direction": {
                              "enum": ["CREDIT", "DEBIT"],
                              "title": "ACH Direction",
                              "type": "string"
                            },
                            "external_bank_account_token": {
                              "format": "uuid",
                              "title": "External Bank Account Token",
                              "type": "string"
                            },
                            "method": {
                              "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                              "title": "Payment Method",
                              "type": "string"
                            },
                            "method_attributes": {
                              "properties": {
                                "company_id": {
                                  "title": "Company ID",
                                  "type": "string"
                                },
                                "receipt_routing_number": {
                                  "title": "Company ID",
                                  "type": "string"
                                },
                                "retries": {
                                  "title": "Retries",
                                  "type": "integer"
                                },
                                "return_reason_code": {
                                  "title": "Return Reason Code",
                                  "type": "string"
                                },
                                "sec_code": {
                                  "enum": ["CCD", "PPD", "WEB"],
                                  "title": "SEC Code",
                                  "type": "string"
                                }
                              },
                              "required": ["sec_code"],
                              "title": "PaymentMethodAttributes",
                              "type": "object"
                            },
                            "source": {
                              "enum": ["CUSTOMER", "LITHIC"],
                              "title": "Payment Message Source",
                              "type": "string"
                            },
                            "user_defined_id": {
                              "maxLength": 512,
                              "title": "User Defined Id",
                              "type": "string"
                            }
                          },
                          "required": ["direction", "method", "method_attributes", "source"],
                          "type": "object"
                        }
                      ],
                      "title": "PaymentResponse"
                    },
                    {
                      "properties": {
                        "balance": {
                          "description": "Balance of a Financial Account",
                          "properties": {
                            "available_amount": {
                              "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                              "type": "integer"
                            },
                            "created": {
                              "description": "Date and time for when the balance was first created.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "currency": {
                              "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                              "type": "string"
                            },
                            "financial_account_token": {
                              "description": "Globally unique identifier for the financial account that holds this balance.",
                              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                              "format": "uuid",
                              "type": "string"
                            },
                            "financial_account_type": {
                              "description": "Type of financial account.",
                              "enum": ["ISSUING", "OPERATING", "RESERVE"],
                              "type": "string"
                            },
                            "last_transaction_event_token": {
                              "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "last_transaction_token": {
                              "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "pending_amount": {
                              "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                              "type": "integer"
                            },
                            "total_amount": {
                              "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                              "type": "integer"
                            },
                            "updated": {
                              "description": "Date and time for when the balance was last updated.",
                              "format": "date-time",
                              "type": "string"
                            }
                          },
                          "required": [
                            "available_amount",
                            "created",
                            "currency",
                            "financial_account_token",
                            "financial_account_type",
                            "last_transaction_event_token",
                            "last_transaction_token",
                            "pending_amount",
                            "total_amount",
                            "updated"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "PostPaymentResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Create payment",
        "tags": ["Payment"]
      }
    },
    "/payments/{payment_token}": {
      "get": {
        "description": "Get the payment by token.",
        "operationId": "getPaymentByToken",
        "parameters": [
          {
            "in": "path",
            "name": "payment_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Payment Token",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "category": {
                          "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                          "enum": ["ACH", "CARD", "TRANSFER"],
                          "type": "string"
                        },
                        "created": {
                          "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "currency": {
                          "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                          "type": "string"
                        },
                        "descriptor": {
                          "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                          "type": "string"
                        },
                        "events": {
                          "description": "A list of all financial events that have modified this financial transaction.",
                          "items": {
                            "properties": {
                              "amount": {
                                "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                "type": "integer"
                              },
                              "created": {
                                "description": "Date and time when the financial event occurred. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "result": {
                                "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                "enum": ["APPROVED", "DECLINED"],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "type": {
                                "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                "enum": [
                                  "ACH_INSUFFICIENT_FUNDS",
                                  "ACH_ORIGINATION_PENDING",
                                  "ACH_ORIGINATION_RELEASED",
                                  "ACH_RECEIPT_PENDING",
                                  "ACH_RECEIPT_RELEASED",
                                  "ACH_RETURN",
                                  "AUTHORIZATION",
                                  "AUTHORIZATION_ADVICE",
                                  "AUTHORIZATION_EXPIRY",
                                  "AUTHORIZATION_REVERSAL",
                                  "BALANCE_INQUIRY",
                                  "CLEARING",
                                  "CORRECTION_CREDIT",
                                  "CORRECTION_DEBIT",
                                  "CREDIT_AUTHORIZATION",
                                  "CREDIT_AUTHORIZATION_ADVICE",
                                  "FINANCIAL_AUTHORIZATION",
                                  "FINANCIAL_CREDIT_AUTHORIZATION",
                                  "RETURN",
                                  "RETURN_REVERSAL",
                                  "TRANSFER",
                                  "TRANSFER_INSUFFICIENT_FUNDS"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pending_amount": {
                          "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                          "type": "integer"
                        },
                        "result": {
                          "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                          "enum": ["APPROVED", "DECLINED"],
                          "type": "string"
                        },
                        "settled_amount": {
                          "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                          "type": "integer"
                        },
                        "status": {
                          "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                          "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "updated": {
                          "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "category",
                        "created",
                        "currency",
                        "descriptor",
                        "events",
                        "pending_amount",
                        "result",
                        "settled_amount",
                        "status",
                        "token",
                        "updated"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "direction": {
                          "enum": ["CREDIT", "DEBIT"],
                          "title": "ACH Direction",
                          "type": "string"
                        },
                        "external_bank_account_token": {
                          "format": "uuid",
                          "title": "External Bank Account Token",
                          "type": "string"
                        },
                        "method": {
                          "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                          "title": "Payment Method",
                          "type": "string"
                        },
                        "method_attributes": {
                          "properties": {
                            "company_id": {
                              "title": "Company ID",
                              "type": "string"
                            },
                            "receipt_routing_number": {
                              "title": "Company ID",
                              "type": "string"
                            },
                            "retries": {
                              "title": "Retries",
                              "type": "integer"
                            },
                            "return_reason_code": {
                              "title": "Return Reason Code",
                              "type": "string"
                            },
                            "sec_code": {
                              "enum": ["CCD", "PPD", "WEB"],
                              "title": "SEC Code",
                              "type": "string"
                            }
                          },
                          "required": ["sec_code"],
                          "title": "PaymentMethodAttributes",
                          "type": "object"
                        },
                        "source": {
                          "enum": ["CUSTOMER", "LITHIC"],
                          "title": "Payment Message Source",
                          "type": "string"
                        },
                        "user_defined_id": {
                          "maxLength": 512,
                          "title": "User Defined Id",
                          "type": "string"
                        }
                      },
                      "required": ["direction", "method", "method_attributes", "source"],
                      "type": "object"
                    }
                  ],
                  "title": "PaymentResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get payment by token",
        "tags": ["Payment"]
      }
    },
    "/payments/{payment_token}/retry": {
      "post": {
        "description": "Retry an origination which has been returned.",
        "operationId": "retryPayment",
        "parameters": [
          {
            "in": "path",
            "name": "payment_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Payment Token",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "properties": {
                            "category": {
                              "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                              "enum": ["ACH", "CARD", "TRANSFER"],
                              "type": "string"
                            },
                            "created": {
                              "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "currency": {
                              "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                              "type": "string"
                            },
                            "descriptor": {
                              "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                              "type": "string"
                            },
                            "events": {
                              "description": "A list of all financial events that have modified this financial transaction.",
                              "items": {
                                "properties": {
                                  "amount": {
                                    "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                    "type": "integer"
                                  },
                                  "created": {
                                    "description": "Date and time when the financial event occurred. UTC time zone.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "result": {
                                    "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                    "enum": ["APPROVED", "DECLINED"],
                                    "type": "string"
                                  },
                                  "token": {
                                    "description": "Globally unique identifier.",
                                    "format": "uuid",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                    "enum": [
                                      "ACH_INSUFFICIENT_FUNDS",
                                      "ACH_ORIGINATION_PENDING",
                                      "ACH_ORIGINATION_RELEASED",
                                      "ACH_RECEIPT_PENDING",
                                      "ACH_RECEIPT_RELEASED",
                                      "ACH_RETURN",
                                      "AUTHORIZATION",
                                      "AUTHORIZATION_ADVICE",
                                      "AUTHORIZATION_EXPIRY",
                                      "AUTHORIZATION_REVERSAL",
                                      "BALANCE_INQUIRY",
                                      "CLEARING",
                                      "CORRECTION_CREDIT",
                                      "CORRECTION_DEBIT",
                                      "CREDIT_AUTHORIZATION",
                                      "CREDIT_AUTHORIZATION_ADVICE",
                                      "FINANCIAL_AUTHORIZATION",
                                      "FINANCIAL_CREDIT_AUTHORIZATION",
                                      "RETURN",
                                      "RETURN_REVERSAL",
                                      "TRANSFER",
                                      "TRANSFER_INSUFFICIENT_FUNDS"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "pending_amount": {
                              "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                              "type": "integer"
                            },
                            "result": {
                              "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                              "enum": ["APPROVED", "DECLINED"],
                              "type": "string"
                            },
                            "settled_amount": {
                              "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                              "type": "integer"
                            },
                            "status": {
                              "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                              "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                              "type": "string"
                            },
                            "token": {
                              "description": "Globally unique identifier.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "updated": {
                              "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                              "format": "date-time",
                              "type": "string"
                            }
                          },
                          "required": [
                            "category",
                            "created",
                            "currency",
                            "descriptor",
                            "events",
                            "pending_amount",
                            "result",
                            "settled_amount",
                            "status",
                            "token",
                            "updated"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "direction": {
                              "enum": ["CREDIT", "DEBIT"],
                              "title": "ACH Direction",
                              "type": "string"
                            },
                            "external_bank_account_token": {
                              "format": "uuid",
                              "title": "External Bank Account Token",
                              "type": "string"
                            },
                            "method": {
                              "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                              "title": "Payment Method",
                              "type": "string"
                            },
                            "method_attributes": {
                              "properties": {
                                "company_id": {
                                  "title": "Company ID",
                                  "type": "string"
                                },
                                "receipt_routing_number": {
                                  "title": "Company ID",
                                  "type": "string"
                                },
                                "retries": {
                                  "title": "Retries",
                                  "type": "integer"
                                },
                                "return_reason_code": {
                                  "title": "Return Reason Code",
                                  "type": "string"
                                },
                                "sec_code": {
                                  "enum": ["CCD", "PPD", "WEB"],
                                  "title": "SEC Code",
                                  "type": "string"
                                }
                              },
                              "required": ["sec_code"],
                              "title": "PaymentMethodAttributes",
                              "type": "object"
                            },
                            "source": {
                              "enum": ["CUSTOMER", "LITHIC"],
                              "title": "Payment Message Source",
                              "type": "string"
                            },
                            "user_defined_id": {
                              "maxLength": 512,
                              "title": "User Defined Id",
                              "type": "string"
                            }
                          },
                          "required": ["direction", "method", "method_attributes", "source"],
                          "type": "object"
                        }
                      ],
                      "title": "PaymentResponse"
                    },
                    {
                      "properties": {
                        "balance": {
                          "description": "Balance of a Financial Account",
                          "properties": {
                            "available_amount": {
                              "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                              "type": "integer"
                            },
                            "created": {
                              "description": "Date and time for when the balance was first created.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "currency": {
                              "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                              "type": "string"
                            },
                            "financial_account_token": {
                              "description": "Globally unique identifier for the financial account that holds this balance.",
                              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                              "format": "uuid",
                              "type": "string"
                            },
                            "financial_account_type": {
                              "description": "Type of financial account.",
                              "enum": ["ISSUING", "OPERATING", "RESERVE"],
                              "type": "string"
                            },
                            "last_transaction_event_token": {
                              "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "last_transaction_token": {
                              "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "pending_amount": {
                              "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                              "type": "integer"
                            },
                            "total_amount": {
                              "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                              "type": "integer"
                            },
                            "updated": {
                              "description": "Date and time for when the balance was last updated.",
                              "format": "date-time",
                              "type": "string"
                            }
                          },
                          "required": [
                            "available_amount",
                            "created",
                            "currency",
                            "financial_account_token",
                            "financial_account_type",
                            "last_transaction_event_token",
                            "last_transaction_token",
                            "pending_amount",
                            "total_amount",
                            "updated"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "PostPaymentResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Retry payment",
        "tags": ["Payment"]
      }
    },
    "/reports/settlement/details/{report_date}": {
      "get": {
        "description": "List details.",
        "operationId": "getSettlementDetails",
        "parameters": [
          {
            "description": "Date of the settlement report to retrieve.",
            "example": "2023-09-01",
            "in": "path",
            "name": "report_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "account_token": "6c25d6a4-4ff3-46f0-8f9b-f2cbb7e20e09",
                      "card_program_token": "62135b36-324f-443a-a630-bab38fe86868",
                      "card_token": "047298ea-5789-46e4-95fa-154aeeab6af3",
                      "created": "2023-06-17T13:00:29.979106",
                      "currency": "USD",
                      "disputes_gross_amount": 0,
                      "event_tokens": ["8fce9192-41ff-4a7a-8359-bd33b3e0a7c9"],
                      "institution": "00001",
                      "interchange_fee_extended_precision": -70000,
                      "interchange_gross_amount": -7,
                      "network": "VISA",
                      "other_fees_details": {},
                      "other_fees_gross_amount": 0,
                      "report_date": "2023-06-16",
                      "settlement_date": "2023-06-16",
                      "token": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                      "transaction_token": "0e98152b-3753-4a17-bfe2-c6f575c83b85",
                      "transactions_gross_amount": 1900,
                      "type": "CLEARING",
                      "updated": "2023-06-17T13:00:29.979106"
                    }
                  ],
                  "has_more": false,
                  "page_size": 1
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
                            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                            "format": "uuid",
                            "type": "string"
                          },
                          "card_program_token": {
                            "description": "Globally unique identifier denoting the card program that the associated Transaction occurred on.",
                            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                            "format": "uuid",
                            "type": "string"
                          },
                          "card_token": {
                            "description": "Globally unique identifier denoting the card that the associated Transaction occurred on.",
                            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time when the transaction first occurred. UTC time zone.",
                            "example": "2023-06-01T00:00:00",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "Three-digit alphabetic ISO 4217 code.",
                            "example": "840",
                            "maxLength": 3,
                            "minLength": 3,
                            "nullable": false,
                            "type": "string"
                          },
                          "disputes_gross_amount": {
                            "description": "The total gross amount of disputes settlements.",
                            "example": 0,
                            "type": "integer"
                          },
                          "event_tokens": {
                            "description": "Globally unique identifiers denoting the Events associated with this settlement.",
                            "example": ["e34a817f-119d-4976-9fb3-8b020b8bbec3"],
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "institution": {
                            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
                            "example": "00001",
                            "type": "string"
                          },
                          "interchange_fee_extended_precision": {
                            "description": "The total amount of interchange in six-digit extended precision.",
                            "example": -70000,
                            "type": "integer"
                          },
                          "interchange_gross_amount": {
                            "description": "The total amount of interchange.",
                            "example": -7,
                            "type": "integer"
                          },
                          "network": {
                            "description": "Card network where the transaction took place.",
                            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                            "example": "MASTERCARD",
                            "nullable": false,
                            "type": "string"
                          },
                          "other_fees_details": {
                            "description": "The total gross amount of other fees by type.",
                            "properties": {
                              "ISA": {
                                "title": "ISA",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "other_fees_gross_amount": {
                            "description": "Total amount of gross other fees outside of interchange.",
                            "example": 0,
                            "type": "integer"
                          },
                          "report_date": {
                            "description": "Date of when the report was first generated.",
                            "example": "2023-06-01",
                            "type": "string"
                          },
                          "settlement_date": {
                            "description": "Date of when money movement is triggered for the transaction.",
                            "example": "2023-06-01",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier denoting the Settlement Detail.",
                            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                            "format": "uuid",
                            "type": "string"
                          },
                          "transaction_token": {
                            "description": "Globally unique identifier denoting the associated Transaction object.",
                            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
                            "format": "uuid",
                            "type": "string"
                          },
                          "transactions_gross_amount": {
                            "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
                            "example": 1900,
                            "type": "integer"
                          },
                          "type": {
                            "description": "The type of settlement record.",
                            "enum": [
                              "ADJUSTMENT",
                              "ARBITRATION",
                              "CHARGEBACK",
                              "CLEARING",
                              "FEE",
                              "FINANCIAL",
                              "NON-FINANCIAL",
                              "PREARBITRATION",
                              "REPRESENTMENT"
                            ],
                            "example": "CLEARING",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time when the transaction first occurred. UTC time zone.",
                            "example": "2023-06-01T00:00:00",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "account_token",
                          "card_program_token",
                          "card_token",
                          "created",
                          "currency",
                          "disputes_gross_amount",
                          "event_tokens",
                          "institution",
                          "interchange_fee_extended_precision",
                          "interchange_gross_amount",
                          "network",
                          "other_fees_details",
                          "other_fees_gross_amount",
                          "report_date",
                          "settlement_date",
                          "token",
                          "transaction_token",
                          "transactions_gross_amount",
                          "type",
                          "updated"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "More data exists.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List settlement details",
        "tags": ["Settlement Report"]
      }
    },
    "/reports/settlement/summary/{report_date}": {
      "get": {
        "description": "Get the settlement report for a specified report date.",
        "operationId": "getSummary",
        "parameters": [
          {
            "description": "Date of the settlement report to retrieve.",
            "example": "2023-09-01",
            "in": "path",
            "name": "report_date",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created": {
                      "description": "Date and time when the transaction first occurred. UTC time zone.",
                      "example": "2023-06-01T00:00:00",
                      "format": "date-time",
                      "type": "string"
                    },
                    "currency": {
                      "description": "Three-digit alphabetic ISO 4217 code.",
                      "example": "840",
                      "maxLength": 3,
                      "minLength": 3,
                      "nullable": false,
                      "type": "string"
                    },
                    "details": {
                      "items": {
                        "nullable": true,
                        "properties": {
                          "disputes_gross_amount": {
                            "description": "The total gross amount of disputes settlements.",
                            "example": 0,
                            "type": "integer"
                          },
                          "institution": {
                            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
                            "example": "00001",
                            "type": "string"
                          },
                          "interchange_gross_amount": {
                            "description": "The total amount of interchange.",
                            "example": -7,
                            "type": "integer"
                          },
                          "network": {
                            "description": "Card network where the transaction took place",
                            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                            "example": "MASTERCARD",
                            "nullable": false,
                            "type": "string"
                          },
                          "other_fees_gross_amount": {
                            "description": "Total amount of gross other fees outside of interchange.",
                            "example": 0,
                            "type": "integer"
                          },
                          "settled_net_amount": {
                            "description": "The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).",
                            "example": 1893,
                            "type": "integer"
                          },
                          "transactions_gross_amount": {
                            "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
                            "example": 1900,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "disputes_gross_amount": {
                      "description": "The total gross amount of disputes settlements.",
                      "example": 0,
                      "type": "integer"
                    },
                    "interchange_gross_amount": {
                      "description": "The total amount of interchange.",
                      "example": -7,
                      "type": "integer"
                    },
                    "other_fees_gross_amount": {
                      "description": "Total amount of gross other fees outside of interchange.",
                      "example": 0,
                      "type": "integer"
                    },
                    "report_date": {
                      "description": "Date of when the report was first generated.",
                      "example": "2023-06-01",
                      "type": "string"
                    },
                    "settled_net_amount": {
                      "description": "The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).",
                      "example": 1893,
                      "type": "integer"
                    },
                    "transactions_gross_amount": {
                      "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
                      "example": 1900,
                      "type": "integer"
                    },
                    "updated": {
                      "description": "Date and time when the transaction first occurred. UTC time zone.",
                      "example": "2023-06-01T00:00:00",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "created",
                    "currency",
                    "details",
                    "disputes_gross_amount",
                    "interchange_gross_amount",
                    "other_fees_gross_amount",
                    "report_date",
                    "settled_net_amount",
                    "transactions_gross_amount",
                    "updated"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get settlement summary",
        "tags": ["Settlement Report"]
      }
    },
    "/responder_endpoints": {
      "delete": {
        "operationId": "deleteResponderEndpoint",
        "parameters": [
          {
            "description": "The type of the endpoint.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": ["AUTH_STREAM_ACCESS", "THREE_DS_DECISIONING", "TOKENIZATION_DECISIONING"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Endpoint disenrolled successfully"
          }
        },
        "summary": "Disenroll a responder endpoint",
        "tags": ["Responder Endpoints"]
      },
      "get": {
        "operationId": "getResponderEndpoints",
        "parameters": [
          {
            "description": "The type of the endpoint.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": ["AUTH_STREAM_ACCESS", "THREE_DS_DECISIONING", "TOKENIZATION_DECISIONING"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "enrolled": {
                      "description": "True if the instance has an endpoint enrolled.",
                      "type": "boolean"
                    },
                    "url": {
                      "description": "The URL of the currently enrolled endpoint or null.",
                      "format": "uri",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Responder endpoint status"
          }
        },
        "summary": "Check the status of a responder endpoint",
        "tags": ["Responder Endpoints"]
      },
      "post": {
        "operationId": "postResponderEndpoints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "description": "The type of the endpoint.",
                    "enum": ["AUTH_STREAM_ACCESS", "THREE_DS_DECISIONING", "TOKENIZATION_DECISIONING"],
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL for the responder endpoint (must be http(s)).",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "enrolled": {
                      "description": "True if the endpoint was enrolled successfully.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Endpoint enrolled successfully"
          }
        },
        "summary": "Enroll a responder endpoint",
        "tags": ["Responder Endpoints"]
      }
    },
    "/simulate/authorization_advice": {
      "post": {
        "description": "Simulates an authorization advice request from the payment network as if it came from a merchant acquirer. An authorization advice request changes the amount of the transaction.\n",
        "operationId": "postSimulateAuthorizationAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateAuthorizationAdvice": {
                  "summary": "Simulate an authorization",
                  "value": {
                    "amount": 3831,
                    "descriptor": "COFFEE SHOP",
                    "pan": "4111111289144142",
                    "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents) to authorize. This amount will override the transaction's amount that was originally set by /v1/simulate/authorize.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "token": {
                    "description": "The transaction token returned from the /v1/simulate/authorize response.",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["amount", "token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39",
                  "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "A unique token to reference this transaction.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "debugging_request_id": {
                          "description": "Identifier to help debug an error.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "message": {
                          "description": "Explanation of error response.",
                          "type": "string"
                        }
                      },
                      "required": ["debugging_request_id", "message"],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "token": {
                          "description": "A unique token to reference this transaction.",
                          "example": "b68ba424-ab69-4cbc-a946-30d90181b621",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate authorization advice",
        "tags": ["Transaction"]
      }
    },
    "/simulate/authorize": {
      "post": {
        "description": "Simulates an authorization request from the payment network as if it came from a merchant acquirer. If you're configured for ASA, simulating auths requires your ASA client to be set up properly (respond with a valid JSON to the ASA request). For users that are not configured for ASA, a daily transaction limit of $5000 USD is applied by default. This limit can be modified via the [update account](https://docs.lithic.com/reference/patchaccountbytoken) endpoint.\n",
        "operationId": "postSimulateAuthorize",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateAuthorization": {
                  "summary": "Simulate an authorization",
                  "value": {
                    "amount": 3831,
                    "descriptor": "COFFEE SHOP",
                    "pan": "4111111289144142"
                  }
                },
                "simulateBalanceInquiry": {
                  "summary": "Simulate a balance inquiry",
                  "value": {
                    "amount": 0,
                    "descriptor": "NEIGHBORHOOD ATM",
                    "pan": "4111111289144142",
                    "status": "BALANCE_INQUIRY"
                  }
                },
                "simulateFinancialCreditAuthorization": {
                  "summary": "Simulate a financial credit authorization",
                  "value": {
                    "amount": 3831,
                    "descriptor": "COFFEE SHOP",
                    "pan": "4111111289144142",
                    "status": "FINANCIAL_CREDIT_AUTHORIZATION"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents) to authorize. For credit authorizations and financial credit authorizations, any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction. For balance inquiries, this field must be set to 0.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "descriptor": {
                    "description": "Merchant descriptor.",
                    "example": "COFFEE SHOP",
                    "maxLength": 25,
                    "minLength": 1,
                    "type": "string"
                  },
                  "mcc": {
                    "description": "Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.\nSupported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).\n",
                    "example": "5812",
                    "type": "string"
                  },
                  "merchant_acceptor_id": {
                    "description": "Unique identifier to identify the payment card acceptor.",
                    "example": "OODKZAPJVN4YS7O",
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string"
                  },
                  "merchant_amount": {
                    "description": "Amount of the transaction to be simulated in currency specified in merchant_currency, including any acquirer fees.",
                    "type": "integer"
                  },
                  "merchant_currency": {
                    "description": "3-digit alphabetic ISO 4217 currency code.",
                    "example": "GBP",
                    "type": "string"
                  },
                  "pan": {
                    "description": "Sixteen digit card number.",
                    "example": "4111111289144142",
                    "maxLength": 16,
                    "minLength": 16,
                    "type": "string"
                  },
                  "partial_approval_capable": {
                    "description": "Set to true if the terminal is capable of partial approval otherwise false.\nPartial approval is when part of a transaction is approved and another\npayment must be used for the remainder.\n",
                    "type": "boolean"
                  },
                  "status": {
                    "default": "AUTHORIZATION",
                    "description": "Type of event to simulate.\n* `AUTHORIZATION` is a dual message purchase authorization, meaning a subsequent clearing step is required to settle the transaction.\n* `BALANCE_INQUIRY` is a $0 authorization that includes a request for the balance held on the card, and is most typically seen when a cardholder requests to view a card's balance at an ATM.\n* `CREDIT_AUTHORIZATION` is a dual message request from a merchant to authorize a refund or credit, meaning a subsequent clearing step is required to settle the transaction.\n* `FINANCIAL_AUTHORIZATION` is a single message request from a merchant to debit funds immediately (such as an ATM withdrawal), and no subsequent clearing is required to settle the transaction.\n* `FINANCIAL_CREDIT_AUTHORIZATION` is a single message request from a merchant to credit funds immediately, and no subsequent clearing is required to settle the transaction.\n",
                    "enum": [
                      "AUTHORIZATION",
                      "BALANCE_INQUIRY",
                      "CREDIT_AUTHORIZATION",
                      "FINANCIAL_AUTHORIZATION",
                      "FINANCIAL_CREDIT_AUTHORIZATION"
                    ],
                    "example": "AUTHORIZATION",
                    "type": "string"
                  }
                },
                "required": ["amount", "descriptor", "pan"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39",
                  "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "A unique token to reference this transaction with later calls to void or clear the authorization.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "debugging_request_id": {
                          "description": "Identifier to help debug an error.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "message": {
                          "description": "Explanation of error response.",
                          "type": "string"
                        }
                      },
                      "required": ["debugging_request_id", "message"],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "token": {
                          "description": "A unique token to reference this transaction.",
                          "example": "b68ba424-ab69-4cbc-a946-30d90181b621",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate authorization",
        "tags": ["Transaction"]
      }
    },
    "/simulate/clearing": {
      "post": {
        "description": "Clears an existing authorization. After this event, the transaction is no longer pending.\n\nIf no `amount` is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.\n",
        "operationId": "postSimulateClearing",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateClear": {
                  "summary": "Simulate settling a transaction",
                  "value": {
                    "amount": 0,
                    "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents) to complete. Typically this will match the original authorization, but may be more or less.\n\nIf no amount is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.\n",
                    "type": "integer"
                  },
                  "token": {
                    "description": "The transaction token returned from the /v1/simulate/authorize response.",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "3ec51ef1-b68d-4243-be6c-2204229b09cf"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate clearing transaction",
        "tags": ["Transaction"]
      }
    },
    "/simulate/credit_authorization_advice": {
      "post": {
        "description": "Simulates a credit authorization advice message from the payment network.\nThis message indicates that a credit authorization was approved on your behalf by the network.\n",
        "operationId": "postSimulateCreditAuthorizationAdvice",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateCreditAuthorizationAdvice": {
                  "summary": "Simulate a credit authorization advice message",
                  "value": {
                    "amount": 3831,
                    "descriptor": "COFFEE SHOP",
                    "merchant_acceptor_id": "XRKGDPOWEWQRRWU",
                    "pan": "4111111289144142"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents). Any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "descriptor": {
                    "description": "Merchant descriptor.",
                    "example": "COFFEE SHOP",
                    "maxLength": 25,
                    "minLength": 1,
                    "type": "string"
                  },
                  "mcc": {
                    "description": "Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.\nSupported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).\n",
                    "example": "5812",
                    "type": "string"
                  },
                  "merchant_acceptor_id": {
                    "description": "Unique identifier to identify the payment card acceptor.",
                    "example": "XRKGDPOWEWQRRWU",
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string"
                  },
                  "pan": {
                    "description": "Sixteen digit card number.",
                    "example": "4111111289144142",
                    "maxLength": 16,
                    "minLength": 16,
                    "type": "string"
                  }
                },
                "required": ["amount", "descriptor", "pan"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39",
                  "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "A unique token to reference this transaction.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "debugging_request_id": {
                          "description": "Identifier to help debug an error.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "message": {
                          "description": "Explanation of error response.",
                          "type": "string"
                        }
                      },
                      "required": ["debugging_request_id", "message"],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "token": {
                          "description": "A unique token to reference this transaction.",
                          "example": "b68ba424-ab69-4cbc-a946-30d90181b621",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Unprocessable Entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate credit authorization advice",
        "tags": ["Transaction"]
      }
    },
    "/simulate/event_subscriptions/{event_subscription_token}/send_example": {
      "post": {
        "description": "Send an example message for event.",
        "operationId": "sendEventSubscriptionExample",
        "parameters": [
          {
            "in": "path",
            "name": "event_subscription_token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "event_type": {
                    "description": "Event type to send example message for.",
                    "enum": [
                      "account_holder.created",
                      "account_holder.updated",
                      "account_holder.verification",
                      "balance.updated",
                      "card.created",
                      "card.renewed",
                      "card.shipped",
                      "card_transaction.updated",
                      "digital_wallet.tokenization_approval_request",
                      "digital_wallet.tokenization_result",
                      "digital_wallet.tokenization_two_factor_authentication_code",
                      "dispute.updated",
                      "dispute_evidence.upload_failed",
                      "payment_transaction.created",
                      "payment_transaction.updated",
                      "three_ds_authentication.created",
                      "transfer_transaction.created"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Send event type example message",
        "tags": ["Event"]
      }
    },
    "/simulate/payments/release": {
      "post": {
        "description": "Simulates a release of a Payment.",
        "operationId": "simulatePaymentsRelease",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_token": {
                    "format": "uuid",
                    "title": "Payment Token",
                    "type": "string"
                  }
                },
                "required": ["payment_token"],
                "title": "SimulateReleaseRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "format": "uuid",
                      "title": "Debugging Request Id",
                      "type": "string"
                    },
                    "result": {
                      "enum": ["APPROVED", "DECLINED"],
                      "title": "Result",
                      "type": "string"
                    },
                    "transaction_event_token": {
                      "format": "uuid",
                      "title": "Transaction Event Token",
                      "type": "string"
                    }
                  },
                  "title": "SimulateReleaseResponse",
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate release payment",
        "tags": ["Payment"]
      }
    },
    "/simulate/payments/return": {
      "post": {
        "description": "Simulates a return of a Payment.",
        "operationId": "simulatePaymentsReturn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "payment_token": {
                    "format": "uuid",
                    "title": "Payment Token",
                    "type": "string"
                  },
                  "return_reason_code": {
                    "default": "R01",
                    "title": "Payment Token",
                    "type": "string"
                  }
                },
                "required": ["payment_token"],
                "title": "SimulateReturnRequest",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "format": "uuid",
                      "title": "Debugging Request Id",
                      "type": "string"
                    },
                    "result": {
                      "enum": ["APPROVED", "DECLINED"],
                      "title": "Result",
                      "type": "string"
                    },
                    "transaction_event_token": {
                      "format": "uuid",
                      "title": "Transaction Event Token",
                      "type": "string"
                    }
                  },
                  "title": "SimulateReturnResponse",
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate return payment",
        "tags": ["Payment"]
      }
    },
    "/simulate/return": {
      "post": {
        "description": "Returns (aka refunds) an amount back to a card. Returns are cleared immediately and do not spend time in a `PENDING` state.\n",
        "operationId": "postSimulateReturn",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateReturn": {
                  "summary": "Simulate a return",
                  "value": {
                    "amount": 3831,
                    "descriptor": "COFFEE SHOP",
                    "pan": "4111111289144142"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents) to authorize.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "descriptor": {
                    "description": "Merchant descriptor.",
                    "example": "COFFEE SHOP",
                    "maxLength": 25,
                    "minLength": 1,
                    "type": "string"
                  },
                  "pan": {
                    "description": "Sixteen digit card number.",
                    "example": "4111111289144142",
                    "maxLength": 16,
                    "minLength": 16,
                    "type": "string"
                  }
                },
                "required": ["amount", "descriptor", "pan"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39",
                  "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "A unique token to reference this transaction.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate return",
        "tags": ["Transaction"]
      }
    },
    "/simulate/return_reversal": {
      "post": {
        "description": "Voids a settled credit transaction – i.e., a transaction with a negative amount and `SETTLED` status. These can be credit authorizations that have already cleared or financial credit authorizations.\n",
        "operationId": "postSimulateReturnReversal",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateReturnReversal": {
                  "summary": "Simulate a return reversal",
                  "value": {
                    "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                  }
                }
              },
              "schema": {
                "properties": {
                  "token": {
                    "description": "The transaction token returned from the /v1/simulate/authorize response.",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate return reversal",
        "tags": ["Transaction"]
      }
    },
    "/simulate/tokenizations": {
      "post": {
        "description": "This endpoint is used to simulate a card's tokenization in the Digital Wallet and merchant tokenization ecosystem.\n",
        "operationId": "postSimulateTokenizations",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateTokenizations": {
                  "summary": "Simulates a card's tokenization",
                  "value": {
                    "account_score": 5,
                    "cvv": "776",
                    "device_score": 5,
                    "expiration_date": "08/29",
                    "pan": "4111111289144142",
                    "tokenization_source": "APPLE_PAY",
                    "wallet_recommended_decision": "APPROVED"
                  }
                }
              },
              "schema": {
                "properties": {
                  "account_score": {
                    "default": 5,
                    "description": "The account score (1-5) that represents how the Digital Wallet's view on how reputable an end user's account is.",
                    "type": "integer"
                  },
                  "cvv": {
                    "description": "The three digit cvv for the card.",
                    "example": "776",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string"
                  },
                  "device_score": {
                    "default": 5,
                    "description": "The device score (1-5) that represents how the Digital Wallet's view on how reputable an end user's device is.",
                    "type": "integer"
                  },
                  "expiration_date": {
                    "description": "The expiration date of the card in 'MM/YY' format.",
                    "maxLength": 5,
                    "minLength": 5,
                    "type": "string"
                  },
                  "pan": {
                    "description": "The sixteen digit card number.",
                    "example": "4111111289144142",
                    "maxLength": 16,
                    "minLength": 16,
                    "type": "string"
                  },
                  "tokenization_source": {
                    "description": "The source of the tokenization request.",
                    "enum": ["APPLE_PAY", "GOOGLE", "SAMSUNG_PAY"],
                    "type": "string"
                  },
                  "wallet_recommended_decision": {
                    "default": "APPROVED",
                    "description": "The decision that the Digital Wallet's recommend",
                    "enum": ["APPROVED", "DECLINED", "REQUIRE_ADDITIONAL_AUTHENTICATION"],
                    "type": "string"
                  }
                },
                "required": ["cvv", "expiration_date", "pan", "tokenization_source"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "61c3acef-3c2c-4d61-9352-941397b92ca3",
                  "card_token": "16a410c9-7f5c-43e9-8108-bb8a72c063f7",
                  "created_at": "2023-08-28T15:57:14.578051",
                  "events": [
                    {
                      "created_at": "2023-09-13T16:01:13.643241",
                      "result": "TOKEN_ACTIVATED",
                      "token": "a690b617-d3d4-4976-82f6-901f817ad98a",
                      "type": "TOKENIZATION_UPDATED"
                    },
                    {
                      "created_at": "2023-09-13T16:01:13.643241",
                      "result": "APPROVED",
                      "token": "2b2a1038-45f3-42e4-98bb-e745be3f1de1",
                      "type": "TOKENIZATION_AUTHORIZATION"
                    }
                  ],
                  "status": "ACTIVE",
                  "token": "3e9a10da-11be-4a62-a510-d43548bfcec1",
                  "token_requestor_name": "APPLE_PAY",
                  "token_unique_reference": "de25183f-6121-4ce5-8f2e-16b7fb07f252",
                  "updated_at": "2023-08-28T15:57:14.578051"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "The account token associated with the card being tokenized.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "card_token": {
                            "description": "The card token associated with the card being tokenized.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "Date and time when the tokenization first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of events related to the tokenization.",
                            "items": {
                              "properties": {
                                "created_at": {
                                  "description": "Date and time when the tokenization event first occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "Enum representing the result of the tokenization event",
                                  "enum": [
                                    "APPROVED",
                                    "DECLINED",
                                    "NOTIFICATION_DELIVERED",
                                    "REQUIRE_ADDITIONAL_AUTHENTICATION",
                                    "TOKEN_ACTIVATED",
                                    "TOKEN_CREATED",
                                    "TOKEN_DEACTIVATED",
                                    "TOKEN_INACTIVE",
                                    "TOKEN_STATE_UNKNOWN",
                                    "TOKEN_SUSPENDED",
                                    "TOKEN_UPDATED"
                                  ],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier for a Tokenization Event",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Enum representing the type of tokenization event that occurred",
                                  "enum": [
                                    "TOKENIZATION_2FA",
                                    "TOKENIZATION_AUTHORIZATION",
                                    "TOKENIZATION_DECISIONING",
                                    "TOKENIZATION_ELIGIBILITY_CHECK",
                                    "TOKENIZATION_UPDATED"
                                  ],
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "The status of the tokenization request",
                            "enum": [
                              "ACTIVE",
                              "DEACTIVATED",
                              "INACTIVE",
                              "PAUSED",
                              "PENDING_2FA",
                              "PENDING_ACTIVATION",
                              "UNKNOWN"
                            ],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for a Tokenization",
                            "format": "uuid",
                            "type": "string"
                          },
                          "token_requestor_name": {
                            "description": "The entity that is requested the tokenization. Represents a Digital Wallet.",
                            "enum": [
                              "AMAZON_ONE",
                              "ANDROID_PAY",
                              "APPLE_PAY",
                              "FITBIT_PAY",
                              "GARMIN_PAY",
                              "MICROSOFT_PAY",
                              "SAMSUNG_PAY",
                              "UNKNOWN",
                              "VISA_CHECKOUT"
                            ],
                            "type": "string"
                          },
                          "token_unique_reference": {
                            "description": "The network's unique reference for the tokenization.",
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "Latest date and time when the tokenization was updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "account_token",
                          "card_token",
                          "created_at",
                          "status",
                          "token",
                          "token_requestor_name",
                          "token_unique_reference",
                          "updated_at"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate a card's tokenization",
        "tags": ["Tokenization"]
      }
    },
    "/simulate/void": {
      "post": {
        "description": "Voids an existing, uncleared (aka pending) authorization. If amount is not sent the full amount will be voided. Cannot be used on partially completed transactions, but can be used on partially voided transactions. _Note that simulating an authorization expiry on credit authorizations or credit authorization advice is not currently supported but will be added soon._\n",
        "operationId": "postSimulateVoid",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateAuthorizationExpiry": {
                  "summary": "Simulate expiring a transaction",
                  "value": {
                    "amount": 100,
                    "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac",
                    "type": "AUTHORIZATION_EXPIRY"
                  }
                },
                "simulateAuthorizationReversal": {
                  "summary": "Simulate reversing a transaction",
                  "value": {
                    "amount": 100,
                    "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac",
                    "type": "AUTHORIZATION_REVERSAL"
                  }
                }
              },
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount (in cents) to void. Typically this will match the original authorization, but may be less.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "token": {
                    "description": "The transaction token returned from the /v1/simulate/authorize response.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": {
                    "default": "AUTHORIZATION_REVERSAL",
                    "description": "Type of event to simulate. Defaults to `AUTHORIZATION_REVERSAL`.\n\n* `AUTHORIZATION_EXPIRY` indicates authorization has expired and been reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` indicates authorization was reversed by the merchant.\n",
                    "enum": ["AUTHORIZATION_EXPIRY", "AUTHORIZATION_REVERSAL"],
                    "example": "AUTHORIZATION_EXPIRY",
                    "type": "string"
                  }
                },
                "required": ["token"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "3ec51ef1-b68d-4243-be6c-2204229b09cf"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate void transaction",
        "tags": ["Transaction"]
      }
    },
    "/status": {
      "get": {
        "description": "Status of api",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Endpoint for users to check whether they can reach the api."
          }
        },
        "security": [{}],
        "summary": "API status check",
        "tags": ["Status"]
      }
    },
    "/three_ds_authentication/simulate": {
      "post": {
        "description": "Simulates a 3DS authentication request from the payment network as if it came from an ACS. If you're configured for 3DS Customer Decisioning, simulating authentications requires your customer decisioning endpoint to be set up properly (respond with a valid JSON).\n",
        "operationId": "postSimulateAuthentication",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "simulateAuthentication": {
                  "summary": "Simulate an authentication",
                  "value": {
                    "merchant": {
                      "country": "USA",
                      "id": "OODKZAPJVN4YS7O",
                      "mcc": "5812",
                      "name": "COFFEE SHOP"
                    },
                    "pan": "4111111289144142",
                    "transaction": {
                      "amount": 100,
                      "currency": "USD"
                    }
                  }
                }
              },
              "schema": {
                "properties": {
                  "merchant": {
                    "properties": {
                      "country": {
                        "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                        "example": "USA",
                        "type": "string"
                      },
                      "id": {
                        "description": "Unique identifier to identify the payment card acceptor. Corresponds to `merchant_acceptor_id` in authorization.",
                        "example": "OODKZAPJVN4YS7O",
                        "maxLength": 15,
                        "minLength": 1,
                        "type": "string"
                      },
                      "mcc": {
                        "description": "Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.\nSupported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).\n",
                        "example": "5812",
                        "type": "string"
                      },
                      "name": {
                        "description": "Merchant descriptor, corresponds to `descriptor` in authorization.",
                        "example": "COFFEE SHOP",
                        "maxLength": 25,
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": ["country", "id", "mcc", "name"],
                    "type": "object"
                  },
                  "pan": {
                    "description": "Sixteen digit card number.",
                    "example": "4111111289144142",
                    "maxLength": 16,
                    "minLength": 16,
                    "type": "string"
                  },
                  "transaction": {
                    "properties": {
                      "amount": {
                        "description": "Amount (in cents) to authenticate.",
                        "minimum": 0,
                        "type": "integer"
                      },
                      "currency": {
                        "description": "3-digit alphabetic ISO 4217 currency code.",
                        "example": "GBP",
                        "type": "string"
                      }
                    },
                    "required": ["amount", "currency"],
                    "type": "object"
                  }
                },
                "required": ["merchant", "pan", "transaction"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "debugging_request_id": "d31645af-da9e-4952-b7dc-3ffb06618b39",
                  "token": "fabd829d-7f7b-4432-a8f2-07ea4889aaac"
                },
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Debugging request ID to share with Lithic Support team.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token": {
                      "description": "A unique token to reference this transaction with later calls to void or clear the authorization.",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Simulate 3DS authentication",
        "tags": ["3DS"]
      }
    },
    "/three_ds_authentication/{three_ds_authentication_token}": {
      "get": {
        "description": "Get 3DS Authentication by token",
        "operationId": "getThreeDsAuthenticationByToken",
        "parameters": [
          {
            "description": "3DS Authentication Token",
            "in": "path",
            "name": "three_ds_authentication_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "account_type": {
                      "description": "Type of account/card that is being used for the transaction. Maps to EMV 3DS field acctType.\n",
                      "enum": ["CREDIT", "DEBIT", "NOT_APPLICABLE"],
                      "nullable": true,
                      "type": "string"
                    },
                    "additional_data": {
                      "description": "Object containing additional data about the 3DS request that is beyond the EMV 3DS standard spec (e.g., specific fields that only certain card networks send but are not required across all 3DS requests).\n",
                      "nullable": true,
                      "properties": {
                        "network_decision": {
                          "description": "Mastercard only: Indicates whether the network would have considered the authentication request to be low risk or not.\n",
                          "enum": ["LOW_RISK", "NOT_LOW_RISK"],
                          "nullable": true,
                          "type": "string"
                        },
                        "network_risk_score": {
                          "description": "Mastercard only: Assessment by the network of the authentication risk level, with a higher value indicating a higher amount of risk.\n",
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "app": {
                      "description": "Object containing data about the app used in the e-commerce transaction. Present if the channel is 'APP_BASED'.\n",
                      "properties": {
                        "device_info": {
                          "description": "Device information gathered from the cardholder's device - JSON name/value pairs that is Base64url encoded. Maps to EMV 3DS field deviceInfo.\n",
                          "nullable": true,
                          "type": "string"
                        },
                        "ip": {
                          "anyOf": [
                            {
                              "format": "ipv4",
                              "type": "string"
                            },
                            {
                              "format": "ipv6",
                              "type": "string"
                            }
                          ],
                          "description": "External IP address used by the app generating the 3DS authentication request. Maps to EMV 3DS field appIp.\n"
                        }
                      }
                    },
                    "authentication_request_type": {
                      "description": "Type of authentication request - i.e., the type of transaction or interaction is causing the merchant to request an authentication. Maps to EMV 3DS field threeDSRequestorAuthenticationInd.\n",
                      "enum": [
                        "ADD_CARD",
                        "BILLING_AGREEMENT",
                        "DELAYED_SHIPMENT",
                        "EMV_TOKEN_CARDHOLDER_VERIFICATION",
                        "INSTALLMENT_TRANSACTION",
                        "MAINTAIN_CARD",
                        "PAYMENT_TRANSACTION",
                        "RECURRING_TRANSACTION",
                        "SPLIT_PAYMENT",
                        "SPLIT_SHIPMENT"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "authentication_result": {
                      "description": "Indicates the outcome of the 3DS authentication process.",
                      "enum": ["DECLINE", "SUCCESS"],
                      "nullable": true,
                      "type": "string"
                    },
                    "browser": {
                      "description": "Object containing data about the browser used in the e-commerce transaction. Present if the channel is 'BROWSER'.\n",
                      "properties": {
                        "ip": {
                          "anyOf": [
                            {
                              "format": "ipv4",
                              "type": "string"
                            },
                            {
                              "format": "ipv6",
                              "type": "string"
                            }
                          ],
                          "description": "IP address of the browser as returned by the HTTP headers to the 3DS requestor (e.g., merchant or digital wallet). Maps to EMV 3DS field browserIP.\n",
                          "nullable": true
                        },
                        "java_enabled": {
                          "description": "Indicates whether the cardholder's browser has the ability to execute Java. Maps to EMV 3DS field browserJavaEnabled.\n",
                          "nullable": true,
                          "type": "boolean"
                        },
                        "javascript_enabled": {
                          "description": "Indicates whether the cardholder's browser has the ability to execute JavaScript. Maps to EMV 3DS field browserJavascriptEnabled.\n",
                          "nullable": true,
                          "type": "boolean"
                        },
                        "language": {
                          "description": "Language of the cardholder's browser as defined in IETF BCP47. Maps to EMV 3DS field browserLanguage.\n",
                          "nullable": true,
                          "type": "string"
                        },
                        "time_zone": {
                          "description": "Time zone of the cardholder's browser offset in minutes between UTC and the cardholder browser's local time. The offset is positive if the local time is behind UTC and negative if it is ahead. Maps to EMV 3DS field browserTz.\n",
                          "nullable": true,
                          "type": "string"
                        },
                        "user_agent": {
                          "description": "Content of the HTTP user-agent header. Maps to EMV 3DS field browserUserAgent.\n",
                          "nullable": true,
                          "type": "string"
                        }
                      }
                    },
                    "card_expiry_check": {
                      "description": "Indicates whether the expiration date provided by the cardholder during checkout matches Lithic's record of the card's expiration date.\n",
                      "enum": ["MATCH", "MISMATCH", "NOT_PRESENT"],
                      "type": "string"
                    },
                    "card_token": {
                      "description": "Globally unique identifier for the card on which the 3DS authentication has occurred.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "cardholder": {
                      "description": "Object containing data about the cardholder provided during the transaction.",
                      "properties": {
                        "address_match": {
                          "description": "Indicates whether the shipping address and billing address provided by the cardholder are the same. This value - and assessment of whether the addresses match - is provided directly in the 3DS request and is not determined by Lithic. Maps to EMV 3DS field addrMatch.\n",
                          "nullable": true,
                          "type": "boolean"
                        },
                        "billing_address": {
                          "description": "Object containing data on the billing address provided during the transaction.",
                          "type": "object",
                          "properties": {
                            "address1": {
                              "description": "First line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "address2": {
                              "description": "Second line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "address3": {
                              "description": "Third line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "city": {
                              "description": "City of the address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "country": {
                              "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                              "maxLength": 3,
                              "minLength": 3,
                              "nullable": true,
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                              "nullable": true,
                              "type": "string"
                            }
                          }
                        },
                        "email": {
                          "description": "Email address that is either provided by the cardholder or is on file with the merchant in a 3RI request. Maps to EMV 3DS field email.\n",
                          "maxLength": 254,
                          "minLength": 1,
                          "nullable": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the cardholder. Maps to EMV 3DS field cardholderName.",
                          "maxLength": 36,
                          "minLength": 1,
                          "nullable": true,
                          "type": "string"
                        },
                        "phone_number_home": {
                          "description": "Home phone number provided by the cardholder. Maps to EMV 3DS fields homePhone.cc and homePhone.subscriber.\n",
                          "maxLength": 18,
                          "minLength": 1,
                          "nullable": true,
                          "type": "string"
                        },
                        "phone_number_mobile": {
                          "description": "Mobile/cell phone number provided by the cardholder. Maps to EMV 3DS fields mobilePhone.cc and mobilePhone.subscriber.\n",
                          "maxLength": 18,
                          "minLength": 1,
                          "nullable": true,
                          "type": "string"
                        },
                        "phone_number_work": {
                          "description": "Work phone number provided by the cardholder. Maps to EMV 3DS fields workPhone.cc and workPhone.subscriber.\n",
                          "maxLength": 18,
                          "minLength": 1,
                          "nullable": true,
                          "type": "string"
                        },
                        "shipping_address": {
                          "description": "Object containing data on the shipping address provided during the transaction.",
                          "type": "object",
                          "properties": {
                            "address1": {
                              "description": "First line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "address2": {
                              "description": "Second line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "address3": {
                              "description": "Third line of the street address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "city": {
                              "description": "City of the address provided by the cardholder.",
                              "nullable": true,
                              "type": "string"
                            },
                            "country": {
                              "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                              "maxLength": 3,
                              "minLength": 3,
                              "nullable": true,
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                              "nullable": true,
                              "type": "string"
                            }
                          }
                        }
                      },
                      "type": "object"
                    },
                    "channel": {
                      "description": "Channel in which the authentication occurs. Maps to EMV 3DS field deviceChannel.",
                      "enum": ["APP_BASED", "BROWSER", "THREE_DS_REQUESTOR_INITIATED"],
                      "type": "string"
                    },
                    "created": {
                      "description": "Date and time when the authentication was created in Lithic's system.\n",
                      "format": "date-time",
                      "type": "string"
                    },
                    "decision_made_by": {
                      "description": "Entity that made the authentication decision.",
                      "enum": ["CUSTOMER_ENDPOINT", "LITHIC_DEFAULT", "LITHIC_RULES", "NETWORK", "UNKNOWN"],
                      "nullable": true,
                      "type": "string"
                    },
                    "merchant": {
                      "description": "Object containing data about the merchant involved in the e-commerce transaction.",
                      "properties": {
                        "country": {
                          "description": "Country code of the merchant requesting 3DS authentication. Maps to EMV 3DS field merchantCountryCode.\n",
                          "maxLength": 3,
                          "minLength": 3,
                          "type": "string"
                        },
                        "id": {
                          "description": "Merchant identifier as assigned by the acquirer. Maps to EMV 3DS field acquirerMerchantId.\n",
                          "type": "string"
                        },
                        "mcc": {
                          "description": "Merchant category code assigned to the merchant that describes its business activity type. Maps to EMV 3DS field mcc.\n",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the merchant. Maps to EMV 3DS field merchantName.",
                          "type": "string"
                        },
                        "risk_indicator": {
                          "description": "Object containing additional data indicating additional risk factors related to the e-commerce transaction.\n",
                          "properties": {
                            "delivery_email_address": {
                              "description": "In transactions with electronic delivery, email address to which merchandise is delivered. Maps to EMV 3DS field deliveryEmailAddress.\n",
                              "nullable": true,
                              "type": "string"
                            },
                            "delivery_time_frame": {
                              "description": "The delivery time frame for the merchandise. Maps to EMV 3DS field deliveryTimeframe.\n",
                              "enum": [
                                "ELECTRONIC_DELIVERY",
                                "OVERNIGHT_SHIPPING",
                                "SAME_DAY_SHIPPING",
                                "TWO_DAY_OR_MORE_SHIPPING"
                              ],
                              "nullable": true,
                              "type": "string"
                            },
                            "gift_card_amount": {
                              "description": "In prepaid or gift card purchase transactions, purchase amount total in major units (e.g., a purchase of USD $205.10 would be 205). Maps to EMV 3DS field giftCardAmount.\n",
                              "nullable": true,
                              "type": "number"
                            },
                            "gift_card_count": {
                              "description": "In prepaid or gift card purchase transactions, count of individual prepaid or gift cards/codes purchased. Maps to EMV 3DS field giftCardCount.\n",
                              "nullable": true,
                              "type": "number"
                            },
                            "gift_card_currency": {
                              "description": "In prepaid or gift card purchase transactions, currency code of the gift card. Maps to EMV 3DS field giftCardCurr.\n",
                              "maxLength": 3,
                              "minLength": 3,
                              "nullable": true,
                              "type": "string"
                            },
                            "order_availability": {
                              "description": "Indicates whether the purchase is for merchandise that is available now or at a future date. Maps to EMV 3DS field preOrderPurchaseInd.\n",
                              "enum": ["FUTURE_AVAILABILITY", "MERCHANDISE_AVAILABLE"],
                              "nullable": true,
                              "type": "string"
                            },
                            "pre_order_available_date": {
                              "description": "In pre-order purchase transactions, the expected date that the merchandise will be available. Maps to EMV 3DS field preOrderDate.\n",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "reorder_items": {
                              "description": "Indicates whether the cardholder is reordering previously purchased merchandise. Maps to EMV 3DS field reorderItemsInd.",
                              "enum": ["FIRST_TIME_ORDERED", "REORDERED"],
                              "nullable": true,
                              "type": "string"
                            },
                            "shipping_method": {
                              "description": "Shipping method that the cardholder chose for the transaction. If purchase includes one or more item, this indicator is used for the physical goods; if the purchase only includes digital goods, this indicator is used to describe the most expensive item purchased. Maps to EMV 3DS field shipIndicator.\n",
                              "enum": [
                                "DIGITAL_GOODS",
                                "LOCKER_DELIVERY",
                                "OTHER",
                                "PICK_UP_AND_GO_DELIVERY",
                                "SHIP_TO_BILLING_ADDRESS",
                                "SHIP_TO_NON_BILLING_ADDRESS",
                                "SHIP_TO_OTHER_VERIFIED_ADDRESS",
                                "SHIP_TO_STORE",
                                "TRAVEL_AND_EVENT_TICKETS"
                              ],
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": ["country", "id", "mcc", "name", "risk_indicator"],
                      "type": "object"
                    },
                    "message_category": {
                      "description": "Either PAYMENT_AUTHENTICATION or NON_PAYMENT_AUTHENTICATION.  For NON_PAYMENT_AUTHENTICATION, additional_data and transaction fields are not populated.\n",
                      "enum": ["NON_PAYMENT_AUTHENTICATION", "PAYMENT_AUTHENTICATION"],
                      "type": "string"
                    },
                    "three_ri_request_type": {
                      "description": "Type of 3DS Requestor Initiated (3RI) request i.e., a 3DS authentication that takes place at the initiation of the merchant rather than the cardholder. The most common example of this is where a merchant is authenticating before billing for a recurring transaction such as a pay TV subscription or a utility bill. Maps to EMV 3DS field threeRIInd.\n",
                      "enum": [
                        "ACCOUNT_VERIFICATION",
                        "ADD_CARD",
                        "BILLING_AGREEMENT",
                        "CARD_SECURITY_CODE_STATUS_CHECK",
                        "DELAYED_SHIPMENT",
                        "DEVICE_BINDING_STATUS_CHECK",
                        "INSTALLMENT_TRANSACTION",
                        "MAIL_ORDER",
                        "MAINTAIN_CARD_INFO",
                        "OTHER_PAYMENT",
                        "RECURRING_TRANSACTION",
                        "SPLIT_PAYMENT",
                        "SPLIT_SHIPMENT",
                        "TELEPHONE_ORDER",
                        "TOP_UP",
                        "TRUST_LIST_STATUS_CHECK"
                      ],
                      "nullable": true,
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier for the 3DS authentication.\n",
                      "format": "uuid",
                      "type": "string"
                    },
                    "transaction": {
                      "description": "Object containing data about the e-commerce transaction for which the merchant is requesting authentication.",
                      "nullable": true,
                      "properties": {
                        "amount": {
                          "description": "Amount of the purchase in minor units of currency with all punctuation removed. Maps to EMV 3DS field purchaseAmount.\n",
                          "type": "number"
                        },
                        "currency": {
                          "description": "Currency of the purchase. Maps to EMV 3DS field purchaseCurrency.\n",
                          "maxLength": 3,
                          "minLength": 3,
                          "type": "string"
                        },
                        "currency_exponent": {
                          "description": "Minor units of currency, as specified in ISO 4217 currency exponent. Maps to EMV 3DS field purchaseExponent.\n",
                          "type": "number"
                        },
                        "date_time": {
                          "description": "Date and time when the authentication was generated by the merchant/acquirer's 3DS server. Maps to EMV 3DS field purchaseDate.\n",
                          "format": "date-time",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of the transaction for which a 3DS authentication request is occurring. Maps to EMV 3DS field transType.\n",
                          "enum": [
                            "ACCOUNT_FUNDING",
                            "CHECK_ACCEPTANCE",
                            "GOODS_SERVICE_PURCHASE",
                            "PREPAID_ACTIVATION_AND_LOAD",
                            "QUASI_CASH_TRANSACTION"
                          ],
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": ["amount", "currency", "currency_exponent", "date_time", "type"],
                      "type": "object"
                    }
                  },
                  "required": [
                    "account_type",
                    "authentication_result",
                    "card_expiry_check",
                    "card_token",
                    "cardholder",
                    "channel",
                    "created",
                    "decision_made_by",
                    "merchant",
                    "message_category",
                    "token"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get 3DS authentication",
        "tags": ["3DS"]
      }
    },
    "/three_ds_decisioning/secret": {
      "get": {
        "description": "Retrieve the 3DS Decisioning HMAC secret key. If one does not exist for your program yet, calling this endpoint will create one for you. The headers (which you can use to verify 3DS Decisioning requests) will begin appearing shortly after calling this endpoint for the first time. See [this page](https://docs.lithic.com/docs/3ds-decisioning#3ds-decisioning-hmac-secrets) for more detail about verifying 3DS Decisioning requests.\n",
        "operationId": "getThreeDsDecisioningSecret",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "The 3DS Decisioning HMAC secret",
                      "example": "whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Retrieve the 3DS Decisioning HMAC secret key",
        "tags": ["3DS"]
      }
    },
    "/three_ds_decisioning/secret/rotate": {
      "post": {
        "description": "Generate a new 3DS Decisioning HMAC secret key. The old secret key will be deactivated 24 hours after a successful request to this endpoint. Make a [`GET /three_ds_decisioning/secret`](https://docs.lithic.com/reference/getthreedsdecisioningsecret) request to retrieve the new secret key.\n",
        "operationId": "rotateThreeDsDecisioningSecret",
        "responses": {
          "204": {
            "description": "We have successfully rotated the secret key."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Rotate the 3DS Decisioning HMAC secret key",
        "tags": ["3DS"]
      }
    },
    "/tokenization_decisioning/secret": {
      "get": {
        "description": "Retrieve the Tokenization Decisioning secret key. If one does not exist your program yet, calling this endpoint will create one for you. The headers of the Tokenization Decisioning request will contain a hmac signature which you can use to verify requests originate from Lithic. See [this page](https://docs.lithic.com/docs/events-api#verifying-webhooks) for more detail about verifying Tokenization Decisioning requests.\n",
        "operationId": "getTokenizationDecisioningSecret",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "The Tokenization Decisioning HMAC secret",
                      "example": "whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Retrieve the Tokenization Decisioning HMAC secret key",
        "tags": ["Tokenization"]
      }
    },
    "/tokenization_decisioning/secret/rotate": {
      "post": {
        "description": "Generate a new Tokenization Decisioning secret key. The old Tokenization Decisioning secret key will be deactivated 24 hours after a successful request to this endpoint.\n",
        "operationId": "rotateTokenizationDecisioningSecret",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "description": "The new Tokenization Decisioning HMAC secret",
                      "example": "whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Rotate the Tokenization Decisioning HMAC secret key",
        "tags": ["Tokenization"]
      }
    },
    "/tokenizations": {
      "get": {
        "description": "List card tokenizations",
        "operationId": "getTokenizations",
        "parameters": [
          {
            "description": "Filters for tokenizations associated with a specific account.",
            "in": "query",
            "name": "account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for tokenizations created after this date.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filters for tokenizations associated with a specific card.",
            "in": "query",
            "name": "card_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filter for tokenizations created before this date.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "account_token": "61c3acef-3c2c-4d61-9352-941397b92ca3",
                      "card_token": "16a410c9-7f5c-43e9-8108-bb8a72c063f7",
                      "created_at": "2023-08-28T15:57:14.578051",
                      "events": [
                        {
                          "created_at": "2023-09-13T16:01:13.643241",
                          "result": "TOKEN_ACTIVATED",
                          "token": "a690b617-d3d4-4976-82f6-901f817ad98a",
                          "type": "TOKENIZATION_UPDATED"
                        },
                        {
                          "created_at": "2023-09-13T16:01:13.643241",
                          "result": "APPROVED",
                          "token": "2b2a1038-45f3-42e4-98bb-e745be3f1de1",
                          "type": "TOKENIZATION_AUTHORIZATION"
                        }
                      ],
                      "status": "ACTIVE",
                      "token": "3e9a10da-11be-4a62-a510-d43548bfcec1",
                      "token_requestor_name": "APPLE_PAY",
                      "token_unique_reference": "DM4MMC0000332872ef1029f38fa0184b5c9260383da192b22",
                      "updated_at": "2023-08-28T15:57:14.578051"
                    }
                  ],
                  "has_more": false
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "account_token": {
                            "description": "The account token associated with the card being tokenized.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "card_token": {
                            "description": "The card token associated with the card being tokenized.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "Date and time when the tokenization first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of events related to the tokenization.",
                            "items": {
                              "properties": {
                                "created_at": {
                                  "description": "Date and time when the tokenization event first occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "Enum representing the result of the tokenization event",
                                  "enum": [
                                    "APPROVED",
                                    "DECLINED",
                                    "NOTIFICATION_DELIVERED",
                                    "REQUIRE_ADDITIONAL_AUTHENTICATION",
                                    "TOKEN_ACTIVATED",
                                    "TOKEN_CREATED",
                                    "TOKEN_DEACTIVATED",
                                    "TOKEN_INACTIVE",
                                    "TOKEN_STATE_UNKNOWN",
                                    "TOKEN_SUSPENDED",
                                    "TOKEN_UPDATED"
                                  ],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier for a Tokenization Event",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Enum representing the type of tokenization event that occurred",
                                  "enum": [
                                    "TOKENIZATION_2FA",
                                    "TOKENIZATION_AUTHORIZATION",
                                    "TOKENIZATION_DECISIONING",
                                    "TOKENIZATION_ELIGIBILITY_CHECK",
                                    "TOKENIZATION_UPDATED"
                                  ],
                                  "type": "string"
                                }
                              }
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "The status of the tokenization request",
                            "enum": [
                              "ACTIVE",
                              "DEACTIVATED",
                              "INACTIVE",
                              "PAUSED",
                              "PENDING_2FA",
                              "PENDING_ACTIVATION",
                              "UNKNOWN"
                            ],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier for a Tokenization",
                            "format": "uuid",
                            "type": "string"
                          },
                          "token_requestor_name": {
                            "description": "The entity that is requested the tokenization. Represents a Digital Wallet.",
                            "enum": [
                              "AMAZON_ONE",
                              "ANDROID_PAY",
                              "APPLE_PAY",
                              "FITBIT_PAY",
                              "GARMIN_PAY",
                              "MICROSOFT_PAY",
                              "SAMSUNG_PAY",
                              "UNKNOWN",
                              "VISA_CHECKOUT"
                            ],
                            "type": "string"
                          },
                          "token_unique_reference": {
                            "description": "The network's unique reference for the tokenization.",
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "Latest date and time when the tokenization was updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "account_token",
                          "card_token",
                          "created_at",
                          "status",
                          "token",
                          "token_requestor_name",
                          "token_unique_reference",
                          "updated_at"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get a card's tokenizations",
        "tags": ["Tokenization"]
      }
    },
    "/tokenizations/{tokenization_token}": {
      "get": {
        "description": "Get tokenization",
        "operationId": "getTokenization",
        "parameters": [
          {
            "description": "Tokenization token",
            "in": "path",
            "name": "tokenization_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "account_token": "61c3acef-3c2c-4d61-9352-941397b92ca3",
                  "card_token": "16a410c9-7f5c-43e9-8108-bb8a72c063f7",
                  "created_at": "2023-08-28T15:57:14.578051",
                  "events": [
                    {
                      "created_at": "2023-09-13T16:01:13.643241",
                      "result": "TOKEN_ACTIVATED",
                      "token": "a690b617-d3d4-4976-82f6-901f817ad98a",
                      "type": "TOKENIZATION_UPDATED"
                    },
                    {
                      "created_at": "2023-09-13T16:01:13.643241",
                      "result": "APPROVED",
                      "token": "2b2a1038-45f3-42e4-98bb-e745be3f1de1",
                      "type": "TOKENIZATION_AUTHORIZATION"
                    }
                  ],
                  "status": "ACTIVE",
                  "token": "3e9a10da-11be-4a62-a510-d43548bfcec1",
                  "token_requestor_name": "APPLE_PAY",
                  "token_unique_reference": "DM4MMC0000332872ef1029f38fa0184b5c9260383da192b22",
                  "updated_at": "2023-08-28T15:57:14.578051"
                },
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "account_token": {
                          "description": "The account token associated with the card being tokenized.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "card_token": {
                          "description": "The card token associated with the card being tokenized.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "created_at": {
                          "description": "Date and time when the tokenization first occurred. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "events": {
                          "description": "A list of events related to the tokenization.",
                          "items": {
                            "properties": {
                              "created_at": {
                                "description": "Date and time when the tokenization event first occurred. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "result": {
                                "description": "Enum representing the result of the tokenization event",
                                "enum": [
                                  "APPROVED",
                                  "DECLINED",
                                  "NOTIFICATION_DELIVERED",
                                  "REQUIRE_ADDITIONAL_AUTHENTICATION",
                                  "TOKEN_ACTIVATED",
                                  "TOKEN_CREATED",
                                  "TOKEN_DEACTIVATED",
                                  "TOKEN_INACTIVE",
                                  "TOKEN_STATE_UNKNOWN",
                                  "TOKEN_SUSPENDED",
                                  "TOKEN_UPDATED"
                                ],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier for a Tokenization Event",
                                "format": "uuid",
                                "type": "string"
                              },
                              "type": {
                                "description": "Enum representing the type of tokenization event that occurred",
                                "enum": [
                                  "TOKENIZATION_2FA",
                                  "TOKENIZATION_AUTHORIZATION",
                                  "TOKENIZATION_DECISIONING",
                                  "TOKENIZATION_ELIGIBILITY_CHECK",
                                  "TOKENIZATION_UPDATED"
                                ],
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "The status of the tokenization request",
                          "enum": [
                            "ACTIVE",
                            "DEACTIVATED",
                            "INACTIVE",
                            "PAUSED",
                            "PENDING_2FA",
                            "PENDING_ACTIVATION",
                            "UNKNOWN"
                          ],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier for a Tokenization",
                          "format": "uuid",
                          "type": "string"
                        },
                        "token_requestor_name": {
                          "description": "The entity that is requested the tokenization. Represents a Digital Wallet.",
                          "enum": [
                            "AMAZON_ONE",
                            "ANDROID_PAY",
                            "APPLE_PAY",
                            "FITBIT_PAY",
                            "GARMIN_PAY",
                            "MICROSOFT_PAY",
                            "SAMSUNG_PAY",
                            "UNKNOWN",
                            "VISA_CHECKOUT"
                          ],
                          "type": "string"
                        },
                        "token_unique_reference": {
                          "description": "The network's unique reference for the tokenization.",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Latest date and time when the tokenization was updated. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "account_token",
                        "card_token",
                        "created_at",
                        "status",
                        "token",
                        "token_requestor_name",
                        "token_unique_reference",
                        "updated_at"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get a single card tokenization",
        "tags": ["Tokenization"]
      }
    },
    "/transactions": {
      "get": {
        "description": "List card transactions.\n",
        "operationId": "getTransactions",
        "parameters": [
          {
            "description": "Filters for transactions associated with a specific account.\n",
            "in": "query",
            "name": "account_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filters for transactions associated with a specific card.",
            "in": "query",
            "name": "card_token",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Filters for transactions using transaction result field. Can filter by `APPROVED`, and `DECLINED`.",
            "in": "query",
            "name": "result",
            "schema": {
              "enum": ["APPROVED", "DECLINED"],
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "begin",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
            "in": "query",
            "name": "end",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page size (for pagination).",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 50,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "acquirer_fee": 0,
                      "acquirer_reference_number": "12345678987654321234567",
                      "amount": -7666,
                      "authorization_amount": -7666,
                      "authorization_code": "123412",
                      "avs": {
                        "address": "123 Main St",
                        "zipcode": "10234"
                      },
                      "card": {
                        "created": "2020-07-15T17:48:48Z",
                        "cvv": "574",
                        "exp_month": "07",
                        "exp_year": "2026",
                        "funding": {
                          "account_name": "Sandbox",
                          "created": "2020-07-08T17:57:36Z",
                          "last_four": "5263",
                          "nickname": "",
                          "state": "ENABLED",
                          "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                          "type": "DEPOSITORY_CHECKING"
                        },
                        "hostname": "",
                        "last_four": "6749",
                        "memo": "card 2",
                        "pan": "4111111171826749",
                        "spend_limit": 0,
                        "spend_limit_duration": "TRANSACTION",
                        "state": "OPEN",
                        "token": "079d1898-65f7-4d66-b0bc-172d2935a5fa",
                        "type": "VIRTUAL"
                      },
                      "card_token": "df942c4e-9130-4ab5-b067-778a2c55b357",
                      "cardholder_authentication": {
                        "3ds_version": null,
                        "acquirer_exemption": "MERCHANT_INITIATED_TRANSACTION",
                        "authentication_result": "SUCCESS",
                        "decision_made_by": "NETWORK",
                        "liability_shift": "3DS_AUTHENTICATED",
                        "three_ds_authentication_token": "fc60d37d-95f7-419c-b628-dd9fbf9d80d0",
                        "verification_attempted": "OTHER",
                        "verification_result": "SUCCESS"
                      },
                      "created": "2020-07-15T19:17:22Z",
                      "events": [
                        {
                          "amount": 7666,
                          "created": "2020-07-15T19:17:22Z",
                          "detailed_results": [],
                          "result": "APPROVED",
                          "token": "6a885bcb-89f6-4fcb-a0ce-7f0233ae20a0",
                          "type": "RETURN"
                        }
                      ],
                      "funding": [
                        {
                          "amount": -7666,
                          "token": "b0f0d91a-3697-46d8-85f3-20f0a585cbea",
                          "type": "DEPOSITORY_CHECKING"
                        }
                      ],
                      "merchant": {
                        "acceptor_id": "174030075991",
                        "city": "NEW YORK",
                        "country": "USA",
                        "descriptor": "Sample Return",
                        "mcc": "5812",
                        "state": "NY"
                      },
                      "merchant_amount": -7666,
                      "merchant_authorization_amount": -7666,
                      "merchant_currency": "USD",
                      "network": "VISA",
                      "network_risk_score": 0,
                      "pos": {
                        "entry_mode": {
                          "card": "NOT_PRESENT",
                          "cardholder": "PREAUTHORIZED",
                          "pan": "CONTACTLESS",
                          "pin_entered": true
                        },
                        "terminal": {
                          "attended": true,
                          "card_retention_capable": true,
                          "on_premise": true,
                          "operator": "ADMINISTRATIVE",
                          "partial_approval_capable": true,
                          "pin_capability": "UNSPECIFIED",
                          "type": "ECR"
                        }
                      },
                      "result": "APPROVED",
                      "settled_amount": -7666,
                      "status": "SETTLED",
                      "token": "9b4c99b1-2e90-4e24-b54b-90dc8af4695b",
                      "token_info": {
                        "wallet_type": "APPLE_PAY"
                      }
                    }
                  ],
                  "has_more": false
                },
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "properties": {
                          "acquirer_fee": {
                            "description": "Fee assessed by the merchant and paid for by the cardholder in the smallest unit of the currency. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.",
                            "example": 0,
                            "type": "integer"
                          },
                          "acquirer_reference_number": {
                            "description": "Unique identifier assigned to a transaction by the acquirer that can be used in dispute and chargeback filing.\n",
                            "example": "12345678987654321234567",
                            "maxLength": 23,
                            "minLength": 23,
                            "nullable": true,
                            "type": "string"
                          },
                          "amount": {
                            "description": "Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time, and will represent the settled amount once the transaction is settled.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "authorization_amount": {
                            "description": "Authorization amount (in cents) of the transaction, including any acquirer fees. This amount always represents the amount authorized for the transaction, unaffected by settlement.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "authorization_code": {
                            "description": "A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.",
                            "example": "123456",
                            "maxLength": 6,
                            "minLength": 6,
                            "type": "string"
                          },
                          "avs": {
                            "properties": {
                              "address": {
                                "description": "Cardholder address",
                                "type": "string"
                              },
                              "zipcode": {
                                "description": "Cardholder ZIP code",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "card_token": {
                            "description": "Token for the card used in this transaction.",
                            "example": "19c22c47-7a75-43ee-9891-595419830f7e",
                            "format": "uuid",
                            "type": "string"
                          },
                          "cardholder_authentication": {
                            "nullable": true,
                            "properties": {
                              "3ds_version": {
                                "description": "3-D Secure Protocol version. Possible enum values:\n* `1`: 3-D Secure Protocol version 1.x applied to the transaction.\n* `2`: 3-D Secure Protocol version 2.x applied to the transaction.\n* `null`: 3-D Secure was not used for the transaction\n",
                                "example": "2",
                                "nullable": true,
                                "type": "string"
                              },
                              "acquirer_exemption": {
                                "description": "Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible enum values:\n* `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.\n* `LOW_VALUE`: Low Value Payment exemption.\n* `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).\n* `NONE`: No exemption applied.\n* `RECURRING_PAYMENT`: Recurring Payment exemption.\n* `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.\n* `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.\n* `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.\n\nMaps to the 3-D Secure `transChallengeExemption` field.\n",
                                "enum": [
                                  "AUTHENTICATION_OUTAGE_EXCEPTION",
                                  "LOW_VALUE",
                                  "MERCHANT_INITIATED_TRANSACTION",
                                  "NONE",
                                  "RECURRING_PAYMENT",
                                  "SECURE_CORPORATE_PAYMENT",
                                  "STRONG_CUSTOMER_AUTHENTICATION_DELEGATION",
                                  "TRANSACTION_RISK_ANALYSIS"
                                ],
                                "example": "NONE",
                                "type": "string"
                              },
                              "authentication_result": {
                                "description": "Outcome of the 3DS authentication process. Possible enum values:\n* `SUCCESS`: 3DS authentication was successful and the transaction is considered authenticated.\n* `DECLINE`: 3DS authentication was attempted but was unsuccessful — i.e., the issuer declined to authenticate the cardholder; note that Lithic populates this value on a best-effort basis based on common data across the 3DS authentication and ASA data elements.\n* `ATTEMPTS`: 3DS authentication was attempted but full authentication did not occur. A proof of attempted authenticated is provided by the merchant.\n* `NONE`: 3DS authentication was not performed on the transaction.\n",
                                "enum": ["ATTEMPTS", "DECLINE", "NONE", "SUCCESS"],
                                "example": "SUCCESS",
                                "type": "string"
                              },
                              "decision_made_by": {
                                "description": "Indicator for which party made the 3DS authentication decision. Possible enum values:\n* `NETWORK`: A networks tand-in service decided on the outcome; for token authentications (as indicated in the `liability_shift` attribute), this is the default value\n* `LITHIC_DEFAULT`: A default decision was made by Lithic, without running a rules-based authentication; this value will be set on card programs that do not participate in one of our two 3DS product tiers\n* `LITHIC_RULES`: A rules-based authentication was conducted by Lithic and Lithic decided on the outcome\n* `CUSTOMER_ENDPOINT`: Lithic customer decided on the outcome based on a real-time request sent to a configured endpoint\n* `UNKNOWN`: Data on which party decided is unavailable\n",
                                "enum": [
                                  "CUSTOMER_ENDPOINT",
                                  "LITHIC_DEFAULT",
                                  "LITHIC_RULES",
                                  "NETWORK",
                                  "UNKNOWN"
                                ],
                                "example": "LITHIC_RULES",
                                "type": "string"
                              },
                              "liability_shift": {
                                "description": "Indicates whether chargeback liability shift applies to the transaction. Possible enum values:\n* `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.\n* `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.\n* `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.\n* `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.\n",
                                "enum": [
                                  "3DS_AUTHENTICATED",
                                  "ACQUIRER_EXEMPTION",
                                  "NONE",
                                  "TOKEN_AUTHENTICATED"
                                ],
                                "type": "string"
                              },
                              "three_ds_authentication_token": {
                                "description": "Unique identifier you can use to match a given 3DS authentication and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.",
                                "example": "a6e372d0-b40a-43eb-b0d1-4e1aebef5875",
                                "format": "uuid",
                                "type": "string"
                              },
                              "verification_attempted": {
                                "description": "Verification attempted values:\n* `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.\n* `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.\n* `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).\n* `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)\n* `OTP`: One-time password verification was attempted by the ACS.\n",
                                "enum": ["APP_LOGIN", "BIOMETRIC", "NONE", "OTHER", "OTP"],
                                "example": "NONE",
                                "type": "string"
                              },
                              "verification_result": {
                                "description": "This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.\n\nVerification result values:\n* `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.\n* `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.\n* `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.\n* `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.\n* `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.\n* `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.\n\nNote that the following `transStatus` values are not represented by this field:\n* `C`: Challenge Required\n* `D`: Challenge Required; decoupled authentication confirmed\n* `I`: Informational only\n* `S`: Challenge using Secure Payment Confirmation (SPC)\n",
                                "enum": [
                                  "CANCELLED",
                                  "FAILED",
                                  "FRICTIONLESS",
                                  "NOT_ATTEMPTED",
                                  "REJECTED",
                                  "SUCCESS"
                                ],
                                "example": "FRICTIONLESS",
                                "type": "string"
                              }
                            },
                            "required": [
                              "3ds_version",
                              "acquirer_exemption",
                              "authentication_result",
                              "decision_made_by",
                              "liability_shift",
                              "three_ds_authentication_token",
                              "verification_attempted",
                              "verification_result"
                            ],
                            "type": "object"
                          },
                          "created": {
                            "description": "Date and time when the transaction first occurred. UTC time zone.",
                            "example": "2023-09-26T21:14:28.637Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of all events that have modified this transaction.",
                            "items": {
                              "description": "A single card transaction may include multiple events that affect the transaction state and lifecycle.",
                              "properties": {
                                "amount": {
                                  "description": "Amount of the transaction event (in cents), including any acquirer fees.",
                                  "example": 1500,
                                  "type": "integer"
                                },
                                "created": {
                                  "description": "RFC 3339 date and time this event entered the system. UTC time zone.",
                                  "example": "2023-09-26T21:14:28.637Z",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "detailed_results": {
                                  "items": {
                                    "enum": [
                                      "ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED",
                                      "ACCOUNT_INACTIVE",
                                      "ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED",
                                      "ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED",
                                      "ACCOUNT_UNDER_REVIEW",
                                      "ADDRESS_INCORRECT",
                                      "APPROVED",
                                      "AUTH_RULE_ALLOWED_COUNTRY",
                                      "AUTH_RULE_ALLOWED_MCC",
                                      "AUTH_RULE_BLOCKED_COUNTRY",
                                      "AUTH_RULE_BLOCKED_MCC",
                                      "CARD_CLOSED",
                                      "CARD_CRYPTOGRAM_VALIDATION_FAILURE",
                                      "CARD_EXPIRED",
                                      "CARD_EXPIRY_DATE_INCORRECT",
                                      "CARD_INVALID",
                                      "CARD_PAUSED",
                                      "CARD_PIN_INCORRECT",
                                      "CARD_RESTRICTED",
                                      "CARD_SECURITY_CODE_INCORRECT",
                                      "CARD_SPEND_LIMIT_EXCEEDED",
                                      "CONTACT_CARD_ISSUER",
                                      "CUSTOMER_ASA_TIMEOUT",
                                      "CUSTOM_ASA_RESULT",
                                      "DECLINED",
                                      "DO_NOT_HONOR",
                                      "FORMAT_ERROR",
                                      "INSUFFICIENT_FUNDING_SOURCE_BALANCE",
                                      "INSUFFICIENT_FUNDS",
                                      "LITHIC_SYSTEM_ERROR",
                                      "LITHIC_SYSTEM_RATE_LIMIT",
                                      "MALFORMED_ASA_RESPONSE",
                                      "MERCHANT_INVALID",
                                      "MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE",
                                      "MERCHANT_NOT_PERMITTED",
                                      "OVER_REVERSAL_ATTEMPTED",
                                      "PROGRAM_CARD_SPEND_LIMIT_EXCEEDED",
                                      "PROGRAM_SUSPENDED",
                                      "PROGRAM_USAGE_RESTRICTION",
                                      "REVERSAL_UNMATCHED",
                                      "SECURITY_VIOLATION",
                                      "SINGLE_USE_CARD_REATTEMPTED",
                                      "TRANSACTION_INVALID",
                                      "TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL",
                                      "TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER",
                                      "TRANSACTION_PREVIOUSLY_COMPLETED",
                                      "UNAUTHORIZED_MERCHANT"
                                    ],
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "result": {
                                  "description": "`APPROVED` or decline reason.\n\nResult types:\n* `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).\n* `APPROVED` - Transaction is approved.\n* `BANK_CONNECTION_ERROR` - Please reconnect a funding source.\n* `BANK_NOT_VERIFIED` - Please confirm the funding source.\n* `CARD_CLOSED` - Card state was closed at the time of authorization.\n* `CARD_PAUSED` - Card state was paused at the time of authorization.\n* `FRAUD_ADVICE` - Transaction declined due to risk.\n* `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).\n* `INCORRECT_PIN` - PIN verification failed.\n* `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.\n* `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.\n* `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.\n* `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.\n* `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.\n* `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.\n* `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.\n* `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.\n",
                                  "enum": [
                                    "APPROVED",
                                    "BANK_CONNECTION_ERROR",
                                    "BANK_NOT_VERIFIED",
                                    "CARD_CLOSED",
                                    "CARD_PAUSED",
                                    "DECLINED",
                                    "FRAUD_ADVICE",
                                    "INACTIVE_ACCOUNT",
                                    "INCORRECT_PIN",
                                    "INSUFFICIENT_FUNDS",
                                    "INVALID_CARD_DETAILS",
                                    "MERCHANT_BLACKLIST",
                                    "SINGLE_USE_RECHARGED",
                                    "SWITCH_INOPERATIVE_ADVICE",
                                    "UNAUTHORIZED_MERCHANT",
                                    "UNKNOWN_HOST_TIMEOUT",
                                    "USER_TRANSACTION_LIMIT"
                                  ],
                                  "example": "APPROVED",
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier.",
                                  "example": "0c2adae9-f535-4505-8c35-421dad9bd0b6",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Event types:\n* `AUTHORIZATION` - Authorize a transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a transaction.\n* `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Transaction is settled.\n* `CORRECTION_DEBIT` - Manual transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.\n* `RETURN` - A refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n",
                                  "enum": [
                                    "AUTHORIZATION",
                                    "AUTHORIZATION_ADVICE",
                                    "AUTHORIZATION_EXPIRY",
                                    "AUTHORIZATION_REVERSAL",
                                    "BALANCE_INQUIRY",
                                    "CLEARING",
                                    "CORRECTION_CREDIT",
                                    "CORRECTION_DEBIT",
                                    "CREDIT_AUTHORIZATION",
                                    "CREDIT_AUTHORIZATION_ADVICE",
                                    "FINANCIAL_AUTHORIZATION",
                                    "FINANCIAL_CREDIT_AUTHORIZATION",
                                    "RETURN",
                                    "RETURN_REVERSAL",
                                    "VOID"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "amount",
                                "created",
                                "detailed_results",
                                "result",
                                "token",
                                "type"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "merchant": {
                            "properties": {
                              "acceptor_id": {
                                "description": "Unique identifier to identify the payment card acceptor.",
                                "example": "333301802529120",
                                "type": "string"
                              },
                              "city": {
                                "description": "City of card acceptor.",
                                "example": "NEW YORK",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                              },
                              "country": {
                                "description": "Uppercase country of card acceptor (see ISO 8583 specs).",
                                "example": "USA",
                                "maxLength": 3,
                                "minLength": 3,
                                "type": "string"
                              },
                              "descriptor": {
                                "description": "Short description of card acceptor.",
                                "example": "COFFEE SHOP",
                                "maxLength": 25,
                                "minLength": 1,
                                "type": "string"
                              },
                              "mcc": {
                                "description": "Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.\n",
                                "example": "5812",
                                "maxLength": 4,
                                "minLength": 4,
                                "type": "string"
                              },
                              "state": {
                                "description": "Geographic state of card acceptor (see ISO 8583 specs).",
                                "example": "NY",
                                "maxLength": 2,
                                "minLength": 2,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "merchant_amount": {
                            "description": "Analogous to the \"amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "merchant_authorization_amount": {
                            "description": "Analogous to the \"authorization_amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "merchant_currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the local currency of the transaction.",
                            "example": "USD",
                            "type": "string"
                          },
                          "network": {
                            "description": "Card network of the authorization. Can be `INTERLINK`, `MAESTRO`, `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot determine the network code from the upstream provider.\n",
                            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                            "example": "MASTERCARD",
                            "nullable": true,
                            "type": "string"
                          },
                          "network_risk_score": {
                            "description": "Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.\n\nA score may not be available for all authorizations, and where it is not, this field will be set to null.\n",
                            "type": "number"
                          },
                          "pos": {
                            "properties": {
                              "entry_mode": {
                                "properties": {
                                  "card": {
                                    "description": "Card status",
                                    "enum": ["NOT_PRESENT", "PREAUTHORIZED", "PRESENT", "UNKNOWN"],
                                    "type": "string"
                                  },
                                  "cardholder": {
                                    "description": "Cardholder Presence status",
                                    "enum": [
                                      "DEFERRED_BILLING",
                                      "ELECTRONIC_ORDER",
                                      "INSTALLMENT",
                                      "MAIL_ORDER",
                                      "NOT_PRESENT",
                                      "PREAUTHORIZED",
                                      "PRESENT",
                                      "REOCCURRING",
                                      "TELEPHONE_ORDER",
                                      "UNKNOWN"
                                    ],
                                    "type": "string"
                                  },
                                  "pan": {
                                    "description": "Method of entry for the PAN",
                                    "enum": [
                                      "AUTO_ENTRY",
                                      "BAR_CODE",
                                      "CONTACTLESS",
                                      "CREDENTIAL_ON_FILE",
                                      "ECOMMERCE",
                                      "ERROR_KEYED",
                                      "ERROR_MAGNETIC_STRIPE",
                                      "ICC",
                                      "KEY_ENTERED",
                                      "MAGNETIC_STRIPE",
                                      "MANUAL",
                                      "OCR",
                                      "SECURE_CARDLESS",
                                      "UNKNOWN",
                                      "UNSPECIFIED"
                                    ],
                                    "type": "string"
                                  },
                                  "pin_entered": {
                                    "description": "True if the PIN was entered",
                                    "type": "boolean"
                                  }
                                },
                                "required": ["card", "cardholder", "pan", "pin_entered"],
                                "type": "object"
                              },
                              "terminal": {
                                "properties": {
                                  "attended": {
                                    "description": "True if a clerk is present at the sale.",
                                    "type": "boolean"
                                  },
                                  "card_retention_capable": {
                                    "description": "True if the terminal is capable of partial approval. Partial approval is when part of a transaction is approved and another payment must be used for the remainder. Example scenario: A $40 transaction is attempted on a prepaid card with a $25 balance. If partial approval is enabled, $25 can be authorized, at which point the POS will prompt the user for an additional payment of $15.\n",
                                    "type": "boolean"
                                  },
                                  "on_premise": {
                                    "description": "True if the sale was made at the place of business (vs. mobile).",
                                    "type": "boolean"
                                  },
                                  "operator": {
                                    "description": "The person that is designed to swipe the card",
                                    "enum": ["ADMINISTRATIVE", "CARDHOLDER", "CARD_ACCEPTOR", "UNKNOWN"],
                                    "type": "string"
                                  },
                                  "pin_capability": {
                                    "description": "Status of whether the POS is able to accept PINs",
                                    "enum": ["CAPABLE", "INOPERATIVE", "NOT_CAPABLE", "UNSPECIFIED"],
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "POS Type",
                                    "enum": [
                                      "ADMINISTRATIVE",
                                      "ATM",
                                      "AUTHORIZATION",
                                      "COUPON_MACHINE",
                                      "DIAL_TERMINAL",
                                      "ECOMMERCE",
                                      "ECR",
                                      "FUEL_MACHINE",
                                      "HOME_TERMINAL",
                                      "MICR",
                                      "OFF_PREMISE",
                                      "PAYMENT",
                                      "PDA",
                                      "PHONE",
                                      "POINT",
                                      "POS_TERMINAL",
                                      "PUBLIC_UTILITY",
                                      "SELF_SERVICE",
                                      "TELEVISION",
                                      "TELLER",
                                      "TRAVELERS_CHECK_MACHINE",
                                      "UNKNOWN",
                                      "VENDING",
                                      "VOICE"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "attended",
                                  "card_retention_capable",
                                  "on_premise",
                                  "operator",
                                  "pin_capability",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": ["entry_mode", "terminal"],
                            "type": "object"
                          },
                          "result": {
                            "description": "`APPROVED` or decline reason. See Event result types\n",
                            "enum": [
                              "APPROVED",
                              "BANK_CONNECTION_ERROR",
                              "BANK_NOT_VERIFIED",
                              "CARD_CLOSED",
                              "CARD_PAUSED",
                              "DECLINED",
                              "FRAUD_ADVICE",
                              "INACTIVE_ACCOUNT",
                              "INCORRECT_PIN",
                              "INSUFFICIENT_FUNDS",
                              "INVALID_CARD_DETAILS",
                              "MERCHANT_BLACKLIST",
                              "SINGLE_USE_RECHARGED",
                              "SWITCH_INOPERATIVE_ADVICE",
                              "UNAUTHORIZED_MERCHANT",
                              "UNKNOWN_HOST_TIMEOUT",
                              "USER_TRANSACTION_LIMIT"
                            ],
                            "example": "APPROVED",
                            "type": "string"
                          },
                          "settled_amount": {
                            "description": "Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status types:\n* `DECLINED` - The transaction was declined.\n* `EXPIRED` - Lithic reversed the authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant.\n* `SETTLED` - The transaction is complete.\n* `VOIDED` - The merchant has voided the previously pending authorization.\n",
                            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                            "example": "SETTLED",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "token_info": {
                            "properties": {
                              "wallet_type": {
                                "description": "Source of the token",
                                "enum": [
                                  "APPLE_PAY",
                                  "GOOGLE_PAY",
                                  "MASTERPASS",
                                  "MERCHANT",
                                  "OTHER",
                                  "SAMSUNG_PAY"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "acquirer_fee",
                          "acquirer_reference_number",
                          "amount",
                          "authorization_amount",
                          "authorization_code",
                          "avs",
                          "card_token",
                          "created",
                          "events",
                          "merchant",
                          "merchant_amount",
                          "merchant_authorization_amount",
                          "merchant_currency",
                          "network",
                          "network_risk_score",
                          "pos",
                          "result",
                          "settled_amount",
                          "status",
                          "token",
                          "token_info"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "Indicates whether there are more transactions to be retrieved.",
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "has_more"],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "List card transactions",
        "tags": ["Transaction"]
      }
    },
    "/transactions/{transaction_token}": {
      "get": {
        "description": "Get specific card transaction.\n",
        "operationId": "getTransactionByToken",
        "parameters": [
          {
            "description": "Globally unique identifier for the transaction.",
            "examples": {
              "transactionTokenExample": {
                "summary": "A sample transaction token",
                "value": "84bc53a1-bf91-502b-97d9-f75888f8b2ab"
              }
            },
            "in": "path",
            "name": "transaction_token",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "acquirer_fee": {
                      "description": "Fee assessed by the merchant and paid for by the cardholder in the smallest unit of the currency. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.",
                      "example": 0,
                      "type": "integer"
                    },
                    "acquirer_reference_number": {
                      "description": "Unique identifier assigned to a transaction by the acquirer that can be used in dispute and chargeback filing.\n",
                      "example": "12345678987654321234567",
                      "maxLength": 23,
                      "minLength": 23,
                      "nullable": true,
                      "type": "string"
                    },
                    "amount": {
                      "description": "Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time, and will represent the settled amount once the transaction is settled.",
                      "example": 1500,
                      "type": "integer"
                    },
                    "authorization_amount": {
                      "description": "Authorization amount (in cents) of the transaction, including any acquirer fees. This amount always represents the amount authorized for the transaction, unaffected by settlement.",
                      "example": 1500,
                      "type": "integer"
                    },
                    "authorization_code": {
                      "description": "A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.",
                      "example": "123456",
                      "maxLength": 6,
                      "minLength": 6,
                      "type": "string"
                    },
                    "avs": {
                      "properties": {
                        "address": {
                          "description": "Cardholder address",
                          "type": "string"
                        },
                        "zipcode": {
                          "description": "Cardholder ZIP code",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "card_token": {
                      "description": "Token for the card used in this transaction.",
                      "example": "19c22c47-7a75-43ee-9891-595419830f7e",
                      "format": "uuid",
                      "type": "string"
                    },
                    "cardholder_authentication": {
                      "nullable": true,
                      "properties": {
                        "3ds_version": {
                          "description": "3-D Secure Protocol version. Possible enum values:\n* `1`: 3-D Secure Protocol version 1.x applied to the transaction.\n* `2`: 3-D Secure Protocol version 2.x applied to the transaction.\n* `null`: 3-D Secure was not used for the transaction\n",
                          "example": "2",
                          "nullable": true,
                          "type": "string"
                        },
                        "acquirer_exemption": {
                          "description": "Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible enum values:\n* `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.\n* `LOW_VALUE`: Low Value Payment exemption.\n* `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).\n* `NONE`: No exemption applied.\n* `RECURRING_PAYMENT`: Recurring Payment exemption.\n* `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.\n* `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.\n* `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.\n\nMaps to the 3-D Secure `transChallengeExemption` field.\n",
                          "enum": [
                            "AUTHENTICATION_OUTAGE_EXCEPTION",
                            "LOW_VALUE",
                            "MERCHANT_INITIATED_TRANSACTION",
                            "NONE",
                            "RECURRING_PAYMENT",
                            "SECURE_CORPORATE_PAYMENT",
                            "STRONG_CUSTOMER_AUTHENTICATION_DELEGATION",
                            "TRANSACTION_RISK_ANALYSIS"
                          ],
                          "example": "NONE",
                          "type": "string"
                        },
                        "authentication_result": {
                          "description": "Outcome of the 3DS authentication process. Possible enum values:\n* `SUCCESS`: 3DS authentication was successful and the transaction is considered authenticated.\n* `DECLINE`: 3DS authentication was attempted but was unsuccessful — i.e., the issuer declined to authenticate the cardholder; note that Lithic populates this value on a best-effort basis based on common data across the 3DS authentication and ASA data elements.\n* `ATTEMPTS`: 3DS authentication was attempted but full authentication did not occur. A proof of attempted authenticated is provided by the merchant.\n* `NONE`: 3DS authentication was not performed on the transaction.\n",
                          "enum": ["ATTEMPTS", "DECLINE", "NONE", "SUCCESS"],
                          "example": "SUCCESS",
                          "type": "string"
                        },
                        "decision_made_by": {
                          "description": "Indicator for which party made the 3DS authentication decision. Possible enum values:\n* `NETWORK`: A networks tand-in service decided on the outcome; for token authentications (as indicated in the `liability_shift` attribute), this is the default value\n* `LITHIC_DEFAULT`: A default decision was made by Lithic, without running a rules-based authentication; this value will be set on card programs that do not participate in one of our two 3DS product tiers\n* `LITHIC_RULES`: A rules-based authentication was conducted by Lithic and Lithic decided on the outcome\n* `CUSTOMER_ENDPOINT`: Lithic customer decided on the outcome based on a real-time request sent to a configured endpoint\n* `UNKNOWN`: Data on which party decided is unavailable\n",
                          "enum": [
                            "CUSTOMER_ENDPOINT",
                            "LITHIC_DEFAULT",
                            "LITHIC_RULES",
                            "NETWORK",
                            "UNKNOWN"
                          ],
                          "example": "LITHIC_RULES",
                          "type": "string"
                        },
                        "liability_shift": {
                          "description": "Indicates whether chargeback liability shift applies to the transaction. Possible enum values:\n* `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.\n* `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.\n* `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.\n* `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.\n",
                          "enum": ["3DS_AUTHENTICATED", "ACQUIRER_EXEMPTION", "NONE", "TOKEN_AUTHENTICATED"],
                          "type": "string"
                        },
                        "three_ds_authentication_token": {
                          "description": "Unique identifier you can use to match a given 3DS authentication and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.",
                          "example": "a6e372d0-b40a-43eb-b0d1-4e1aebef5875",
                          "format": "uuid",
                          "type": "string"
                        },
                        "verification_attempted": {
                          "description": "Verification attempted values:\n* `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.\n* `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.\n* `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).\n* `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)\n* `OTP`: One-time password verification was attempted by the ACS.\n",
                          "enum": ["APP_LOGIN", "BIOMETRIC", "NONE", "OTHER", "OTP"],
                          "example": "NONE",
                          "type": "string"
                        },
                        "verification_result": {
                          "description": "This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.\n\nVerification result values:\n* `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.\n* `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.\n* `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.\n* `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.\n* `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.\n* `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.\n\nNote that the following `transStatus` values are not represented by this field:\n* `C`: Challenge Required\n* `D`: Challenge Required; decoupled authentication confirmed\n* `I`: Informational only\n* `S`: Challenge using Secure Payment Confirmation (SPC)\n",
                          "enum": [
                            "CANCELLED",
                            "FAILED",
                            "FRICTIONLESS",
                            "NOT_ATTEMPTED",
                            "REJECTED",
                            "SUCCESS"
                          ],
                          "example": "FRICTIONLESS",
                          "type": "string"
                        }
                      },
                      "required": [
                        "3ds_version",
                        "acquirer_exemption",
                        "authentication_result",
                        "decision_made_by",
                        "liability_shift",
                        "three_ds_authentication_token",
                        "verification_attempted",
                        "verification_result"
                      ],
                      "type": "object"
                    },
                    "created": {
                      "description": "Date and time when the transaction first occurred. UTC time zone.",
                      "example": "2023-09-26T21:14:28.637Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "events": {
                      "description": "A list of all events that have modified this transaction.",
                      "items": {
                        "description": "A single card transaction may include multiple events that affect the transaction state and lifecycle.",
                        "properties": {
                          "amount": {
                            "description": "Amount of the transaction event (in cents), including any acquirer fees.",
                            "example": 1500,
                            "type": "integer"
                          },
                          "created": {
                            "description": "RFC 3339 date and time this event entered the system. UTC time zone.",
                            "example": "2023-09-26T21:14:28.637Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "detailed_results": {
                            "items": {
                              "enum": [
                                "ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED",
                                "ACCOUNT_INACTIVE",
                                "ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED",
                                "ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED",
                                "ACCOUNT_UNDER_REVIEW",
                                "ADDRESS_INCORRECT",
                                "APPROVED",
                                "AUTH_RULE_ALLOWED_COUNTRY",
                                "AUTH_RULE_ALLOWED_MCC",
                                "AUTH_RULE_BLOCKED_COUNTRY",
                                "AUTH_RULE_BLOCKED_MCC",
                                "CARD_CLOSED",
                                "CARD_CRYPTOGRAM_VALIDATION_FAILURE",
                                "CARD_EXPIRED",
                                "CARD_EXPIRY_DATE_INCORRECT",
                                "CARD_INVALID",
                                "CARD_PAUSED",
                                "CARD_PIN_INCORRECT",
                                "CARD_RESTRICTED",
                                "CARD_SECURITY_CODE_INCORRECT",
                                "CARD_SPEND_LIMIT_EXCEEDED",
                                "CONTACT_CARD_ISSUER",
                                "CUSTOMER_ASA_TIMEOUT",
                                "CUSTOM_ASA_RESULT",
                                "DECLINED",
                                "DO_NOT_HONOR",
                                "FORMAT_ERROR",
                                "INSUFFICIENT_FUNDING_SOURCE_BALANCE",
                                "INSUFFICIENT_FUNDS",
                                "LITHIC_SYSTEM_ERROR",
                                "LITHIC_SYSTEM_RATE_LIMIT",
                                "MALFORMED_ASA_RESPONSE",
                                "MERCHANT_INVALID",
                                "MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE",
                                "MERCHANT_NOT_PERMITTED",
                                "OVER_REVERSAL_ATTEMPTED",
                                "PROGRAM_CARD_SPEND_LIMIT_EXCEEDED",
                                "PROGRAM_SUSPENDED",
                                "PROGRAM_USAGE_RESTRICTION",
                                "REVERSAL_UNMATCHED",
                                "SECURITY_VIOLATION",
                                "SINGLE_USE_CARD_REATTEMPTED",
                                "TRANSACTION_INVALID",
                                "TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL",
                                "TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER",
                                "TRANSACTION_PREVIOUSLY_COMPLETED",
                                "UNAUTHORIZED_MERCHANT"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "result": {
                            "description": "`APPROVED` or decline reason.\n\nResult types:\n* `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).\n* `APPROVED` - Transaction is approved.\n* `BANK_CONNECTION_ERROR` - Please reconnect a funding source.\n* `BANK_NOT_VERIFIED` - Please confirm the funding source.\n* `CARD_CLOSED` - Card state was closed at the time of authorization.\n* `CARD_PAUSED` - Card state was paused at the time of authorization.\n* `FRAUD_ADVICE` - Transaction declined due to risk.\n* `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).\n* `INCORRECT_PIN` - PIN verification failed.\n* `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.\n* `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.\n* `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.\n* `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.\n* `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.\n* `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.\n* `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.\n* `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.\n",
                            "enum": [
                              "APPROVED",
                              "BANK_CONNECTION_ERROR",
                              "BANK_NOT_VERIFIED",
                              "CARD_CLOSED",
                              "CARD_PAUSED",
                              "DECLINED",
                              "FRAUD_ADVICE",
                              "INACTIVE_ACCOUNT",
                              "INCORRECT_PIN",
                              "INSUFFICIENT_FUNDS",
                              "INVALID_CARD_DETAILS",
                              "MERCHANT_BLACKLIST",
                              "SINGLE_USE_RECHARGED",
                              "SWITCH_INOPERATIVE_ADVICE",
                              "UNAUTHORIZED_MERCHANT",
                              "UNKNOWN_HOST_TIMEOUT",
                              "USER_TRANSACTION_LIMIT"
                            ],
                            "example": "APPROVED",
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "example": "0c2adae9-f535-4505-8c35-421dad9bd0b6",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "Event types:\n* `AUTHORIZATION` - Authorize a transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a transaction.\n* `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Transaction is settled.\n* `CORRECTION_DEBIT` - Manual transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.\n* `RETURN` - A refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n",
                            "enum": [
                              "AUTHORIZATION",
                              "AUTHORIZATION_ADVICE",
                              "AUTHORIZATION_EXPIRY",
                              "AUTHORIZATION_REVERSAL",
                              "BALANCE_INQUIRY",
                              "CLEARING",
                              "CORRECTION_CREDIT",
                              "CORRECTION_DEBIT",
                              "CREDIT_AUTHORIZATION",
                              "CREDIT_AUTHORIZATION_ADVICE",
                              "FINANCIAL_AUTHORIZATION",
                              "FINANCIAL_CREDIT_AUTHORIZATION",
                              "RETURN",
                              "RETURN_REVERSAL",
                              "VOID"
                            ],
                            "type": "string"
                          }
                        },
                        "required": ["amount", "created", "detailed_results", "result", "token", "type"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "merchant": {
                      "properties": {
                        "acceptor_id": {
                          "description": "Unique identifier to identify the payment card acceptor.",
                          "example": "333301802529120",
                          "type": "string"
                        },
                        "city": {
                          "description": "City of card acceptor.",
                          "example": "NEW YORK",
                          "maxLength": 255,
                          "minLength": 1,
                          "type": "string"
                        },
                        "country": {
                          "description": "Uppercase country of card acceptor (see ISO 8583 specs).",
                          "example": "USA",
                          "maxLength": 3,
                          "minLength": 3,
                          "type": "string"
                        },
                        "descriptor": {
                          "description": "Short description of card acceptor.",
                          "example": "COFFEE SHOP",
                          "maxLength": 25,
                          "minLength": 1,
                          "type": "string"
                        },
                        "mcc": {
                          "description": "Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.\n",
                          "example": "5812",
                          "maxLength": 4,
                          "minLength": 4,
                          "type": "string"
                        },
                        "state": {
                          "description": "Geographic state of card acceptor (see ISO 8583 specs).",
                          "example": "NY",
                          "maxLength": 2,
                          "minLength": 2,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "merchant_amount": {
                      "description": "Analogous to the \"amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                      "example": 1500,
                      "type": "integer"
                    },
                    "merchant_authorization_amount": {
                      "description": "Analogous to the \"authorization_amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                      "example": 1500,
                      "type": "integer"
                    },
                    "merchant_currency": {
                      "description": "3-digit alphabetic ISO 4217 code for the local currency of the transaction.",
                      "example": "USD",
                      "type": "string"
                    },
                    "network": {
                      "description": "Card network of the authorization. Can be `INTERLINK`, `MAESTRO`, `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot determine the network code from the upstream provider.\n",
                      "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                      "example": "MASTERCARD",
                      "nullable": true,
                      "type": "string"
                    },
                    "network_risk_score": {
                      "description": "Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.\n\nA score may not be available for all authorizations, and where it is not, this field will be set to null.\n",
                      "type": "number"
                    },
                    "pos": {
                      "properties": {
                        "entry_mode": {
                          "properties": {
                            "card": {
                              "description": "Card status",
                              "enum": ["NOT_PRESENT", "PREAUTHORIZED", "PRESENT", "UNKNOWN"],
                              "type": "string"
                            },
                            "cardholder": {
                              "description": "Cardholder Presence status",
                              "enum": [
                                "DEFERRED_BILLING",
                                "ELECTRONIC_ORDER",
                                "INSTALLMENT",
                                "MAIL_ORDER",
                                "NOT_PRESENT",
                                "PREAUTHORIZED",
                                "PRESENT",
                                "REOCCURRING",
                                "TELEPHONE_ORDER",
                                "UNKNOWN"
                              ],
                              "type": "string"
                            },
                            "pan": {
                              "description": "Method of entry for the PAN",
                              "enum": [
                                "AUTO_ENTRY",
                                "BAR_CODE",
                                "CONTACTLESS",
                                "CREDENTIAL_ON_FILE",
                                "ECOMMERCE",
                                "ERROR_KEYED",
                                "ERROR_MAGNETIC_STRIPE",
                                "ICC",
                                "KEY_ENTERED",
                                "MAGNETIC_STRIPE",
                                "MANUAL",
                                "OCR",
                                "SECURE_CARDLESS",
                                "UNKNOWN",
                                "UNSPECIFIED"
                              ],
                              "type": "string"
                            },
                            "pin_entered": {
                              "description": "True if the PIN was entered",
                              "type": "boolean"
                            }
                          },
                          "required": ["card", "cardholder", "pan", "pin_entered"],
                          "type": "object"
                        },
                        "terminal": {
                          "properties": {
                            "attended": {
                              "description": "True if a clerk is present at the sale.",
                              "type": "boolean"
                            },
                            "card_retention_capable": {
                              "description": "True if the terminal is capable of partial approval. Partial approval is when part of a transaction is approved and another payment must be used for the remainder. Example scenario: A $40 transaction is attempted on a prepaid card with a $25 balance. If partial approval is enabled, $25 can be authorized, at which point the POS will prompt the user for an additional payment of $15.\n",
                              "type": "boolean"
                            },
                            "on_premise": {
                              "description": "True if the sale was made at the place of business (vs. mobile).",
                              "type": "boolean"
                            },
                            "operator": {
                              "description": "The person that is designed to swipe the card",
                              "enum": ["ADMINISTRATIVE", "CARDHOLDER", "CARD_ACCEPTOR", "UNKNOWN"],
                              "type": "string"
                            },
                            "pin_capability": {
                              "description": "Status of whether the POS is able to accept PINs",
                              "enum": ["CAPABLE", "INOPERATIVE", "NOT_CAPABLE", "UNSPECIFIED"],
                              "type": "string"
                            },
                            "type": {
                              "description": "POS Type",
                              "enum": [
                                "ADMINISTRATIVE",
                                "ATM",
                                "AUTHORIZATION",
                                "COUPON_MACHINE",
                                "DIAL_TERMINAL",
                                "ECOMMERCE",
                                "ECR",
                                "FUEL_MACHINE",
                                "HOME_TERMINAL",
                                "MICR",
                                "OFF_PREMISE",
                                "PAYMENT",
                                "PDA",
                                "PHONE",
                                "POINT",
                                "POS_TERMINAL",
                                "PUBLIC_UTILITY",
                                "SELF_SERVICE",
                                "TELEVISION",
                                "TELLER",
                                "TRAVELERS_CHECK_MACHINE",
                                "UNKNOWN",
                                "VENDING",
                                "VOICE"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "attended",
                            "card_retention_capable",
                            "on_premise",
                            "operator",
                            "pin_capability",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": ["entry_mode", "terminal"],
                      "type": "object"
                    },
                    "result": {
                      "description": "`APPROVED` or decline reason. See Event result types\n",
                      "enum": [
                        "APPROVED",
                        "BANK_CONNECTION_ERROR",
                        "BANK_NOT_VERIFIED",
                        "CARD_CLOSED",
                        "CARD_PAUSED",
                        "DECLINED",
                        "FRAUD_ADVICE",
                        "INACTIVE_ACCOUNT",
                        "INCORRECT_PIN",
                        "INSUFFICIENT_FUNDS",
                        "INVALID_CARD_DETAILS",
                        "MERCHANT_BLACKLIST",
                        "SINGLE_USE_RECHARGED",
                        "SWITCH_INOPERATIVE_ADVICE",
                        "UNAUTHORIZED_MERCHANT",
                        "UNKNOWN_HOST_TIMEOUT",
                        "USER_TRANSACTION_LIMIT"
                      ],
                      "example": "APPROVED",
                      "type": "string"
                    },
                    "settled_amount": {
                      "description": "Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.",
                      "example": 1500,
                      "type": "integer"
                    },
                    "status": {
                      "description": "Status types:\n* `DECLINED` - The transaction was declined.\n* `EXPIRED` - Lithic reversed the authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant.\n* `SETTLED` - The transaction is complete.\n* `VOIDED` - The merchant has voided the previously pending authorization.\n",
                      "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                      "example": "SETTLED",
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "token_info": {
                      "properties": {
                        "wallet_type": {
                          "description": "Source of the token",
                          "enum": [
                            "APPLE_PAY",
                            "GOOGLE_PAY",
                            "MASTERPASS",
                            "MERCHANT",
                            "OTHER",
                            "SAMSUNG_PAY"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "acquirer_fee",
                    "acquirer_reference_number",
                    "amount",
                    "authorization_amount",
                    "authorization_code",
                    "avs",
                    "card_token",
                    "created",
                    "events",
                    "merchant",
                    "merchant_amount",
                    "merchant_authorization_amount",
                    "merchant_currency",
                    "network",
                    "network_risk_score",
                    "pos",
                    "result",
                    "settled_amount",
                    "status",
                    "token",
                    "token_info"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Get card transaction",
        "tags": ["Transaction"]
      }
    },
    "/transfer": {
      "post": {
        "description": "Transfer funds between two financial accounts or between a financial account and card",
        "operationId": "postTransfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "description": "Amount to be transferred in the currency’s smallest unit (e.g., cents for USD). This should always be a positive value.",
                    "type": "integer"
                  },
                  "from": {
                    "description": "Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "memo": {
                    "description": "Optional descriptor for the transfer.",
                    "type": "string"
                  },
                  "to": {
                    "description": "Globally unique identifier for the financial account or card that will receive the funds. Accepted type dependent on the program's use case.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "token": {
                    "description": "Customer-provided token that will serve as an idempotency token. This token will become the transaction token.",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["amount", "from", "to"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "category": {
                          "description": "Status types:\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                          "enum": ["TRANSFER"],
                          "type": "string"
                        },
                        "created": {
                          "description": "Date and time when the transfer occurred. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "currency": {
                          "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                          "type": "string"
                        },
                        "descriptor": {
                          "description": "A string that provides a description of the transfer; may be useful to display to users.",
                          "type": "string"
                        },
                        "events": {
                          "description": "A list of all financial events that have modified this trasnfer.",
                          "items": {
                            "properties": {
                              "amount": {
                                "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                "type": "integer"
                              },
                              "created": {
                                "description": "Date and time when the financial event occurred. UTC time zone.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "result": {
                                "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                "enum": ["APPROVED", "DECLINED"],
                                "type": "string"
                              },
                              "token": {
                                "description": "Globally unique identifier.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "type": {
                                "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                "enum": [
                                  "ACH_INSUFFICIENT_FUNDS",
                                  "ACH_ORIGINATION_PENDING",
                                  "ACH_ORIGINATION_RELEASED",
                                  "ACH_RECEIPT_PENDING",
                                  "ACH_RECEIPT_RELEASED",
                                  "ACH_RETURN",
                                  "AUTHORIZATION",
                                  "AUTHORIZATION_ADVICE",
                                  "AUTHORIZATION_EXPIRY",
                                  "AUTHORIZATION_REVERSAL",
                                  "BALANCE_INQUIRY",
                                  "CLEARING",
                                  "CORRECTION_CREDIT",
                                  "CORRECTION_DEBIT",
                                  "CREDIT_AUTHORIZATION",
                                  "CREDIT_AUTHORIZATION_ADVICE",
                                  "FINANCIAL_AUTHORIZATION",
                                  "FINANCIAL_CREDIT_AUTHORIZATION",
                                  "RETURN",
                                  "RETURN_REVERSAL",
                                  "TRANSFER",
                                  "TRANSFER_INSUFFICIENT_FUNDS"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "from_balance": {
                          "description": "The updated balance of the sending financial account.",
                          "items": {
                            "description": "Balance of a Financial Account",
                            "properties": {
                              "available_amount": {
                                "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                                "type": "integer"
                              },
                              "created": {
                                "description": "Date and time for when the balance was first created.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "currency": {
                                "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                                "type": "string"
                              },
                              "financial_account_token": {
                                "description": "Globally unique identifier for the financial account that holds this balance.",
                                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "format": "uuid",
                                "type": "string"
                              },
                              "financial_account_type": {
                                "description": "Type of financial account.",
                                "enum": ["ISSUING", "OPERATING", "RESERVE"],
                                "type": "string"
                              },
                              "last_transaction_event_token": {
                                "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "last_transaction_token": {
                                "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "pending_amount": {
                                "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                                "type": "integer"
                              },
                              "total_amount": {
                                "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                                "type": "integer"
                              },
                              "updated": {
                                "description": "Date and time for when the balance was last updated.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "available_amount",
                              "created",
                              "currency",
                              "financial_account_token",
                              "financial_account_type",
                              "last_transaction_event_token",
                              "last_transaction_token",
                              "pending_amount",
                              "total_amount",
                              "updated"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pending_amount": {
                          "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                          "type": "integer"
                        },
                        "result": {
                          "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                          "enum": ["APPROVED", "DECLINED"],
                          "type": "string"
                        },
                        "settled_amount": {
                          "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents).",
                          "type": "integer"
                        },
                        "status": {
                          "description": "Status types:\n* `DECLINED` - The transfer was declined.\n* `EXPIRED` - The transfer was held in pending for too long and expired.\n* `PENDING` - The transfer is pending release from a hold.\n* `SETTLED` - The transfer is completed.\n* `VOIDED` - The transfer was reversed before it settled.\n",
                          "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                          "type": "string"
                        },
                        "to_balance": {
                          "description": "The updated balance of the receiving financial account.",
                          "items": {
                            "description": "Balance of a Financial Account",
                            "properties": {
                              "available_amount": {
                                "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                                "type": "integer"
                              },
                              "created": {
                                "description": "Date and time for when the balance was first created.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "currency": {
                                "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                                "type": "string"
                              },
                              "financial_account_token": {
                                "description": "Globally unique identifier for the financial account that holds this balance.",
                                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "format": "uuid",
                                "type": "string"
                              },
                              "financial_account_type": {
                                "description": "Type of financial account.",
                                "enum": ["ISSUING", "OPERATING", "RESERVE"],
                                "type": "string"
                              },
                              "last_transaction_event_token": {
                                "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "last_transaction_token": {
                                "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "pending_amount": {
                                "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                                "type": "integer"
                              },
                              "total_amount": {
                                "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                                "type": "integer"
                              },
                              "updated": {
                                "description": "Date and time for when the balance was last updated.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "required": [
                              "available_amount",
                              "created",
                              "currency",
                              "financial_account_token",
                              "financial_account_type",
                              "last_transaction_event_token",
                              "last_transaction_token",
                              "pending_amount",
                              "total_amount",
                              "updated"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "token": {
                          "description": "Globally unique identifier for the transfer event.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "updated": {
                          "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "The specified resource was not found."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                }
              }
            },
            "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
          }
        },
        "summary": "Transfer funds within Lithic",
        "tags": ["Financial Account"]
      }
    }
  },
  "components": {
    "parameters": {
      "accountHolderTokenPath": {
        "description": "Globally unique identifier for the account holder.",
        "examples": {
          "accountHolderTokenExample": {
            "summary": "A sample account holder token",
            "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "account_holder_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "accountToken": {
        "description": "Globally unique identifier for account.",
        "examples": {
          "accountTokenExample": {
            "summary": "A sample account token",
            "value": "d86a0a4d-7459-471a-83b4-431136320828"
          }
        },
        "in": "path",
        "name": "account_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "authRuleToken": {
        "description": "Globally unique identifier for the Auth Rule.",
        "examples": {
          "accountHolderTokenExample": {
            "summary": "A sample authorization rule token",
            "value": "50ca12c3-ae11-513b-20e0-e55421f8b2ab"
          }
        },
        "in": "path",
        "name": "auth_rule_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "beginDate": {
        "description": "Date string in RFC 3339 format. Only entries created after the specified date will be included.",
        "in": "query",
        "name": "begin",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "beginTime": {
        "description": "Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.",
        "in": "query",
        "name": "begin",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "cardProgramTokenPath": {
        "description": "Globally unique identifier for the card program.",
        "examples": {
          "cardProgramTokenExample": {
            "summary": "A sample card program token",
            "value": "65db64b2-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "card_program_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "cardToken": {
        "examples": {
          "cardTokenExample": {
            "summary": "A sample card token",
            "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "card_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "cardTokenDigitalWallet": {
        "description": "The unique token of the card to add to the device's digital wallet.",
        "examples": {
          "cardTokenExample": {
            "summary": "A sample card token",
            "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "card_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "disputeEvidenceToken": {
        "examples": {
          "disputeEvidenceExample": {
            "summary": "A sample dispute evidence token",
            "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "evidence_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "disputeToken": {
        "examples": {
          "disputeTokenExample": {
            "summary": "A sample dispute token",
            "value": "73ca53a1-ae89-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "dispute_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "documentToken": {
        "description": "Globally unique identifier for the document.",
        "examples": {
          "documentTokenExample": {
            "summary": "A sample document token",
            "value": "76ca80c3-bf90-491a-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "document_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "endDate": {
        "description": "Date string in RFC 3339 format. Only entries created before the specified date will be included.",
        "in": "query",
        "name": "end",
        "schema": {
          "format": "date",
          "type": "string"
        }
      },
      "endTime": {
        "description": "Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.",
        "in": "query",
        "name": "end",
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "endingBefore": {
        "description": "A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.",
        "in": "query",
        "name": "ending_before",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "eventSubscriptionToken": {
        "in": "path",
        "name": "event_subscription_token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "eventToken": {
        "in": "path",
        "name": "event_token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "financialAccountToken": {
        "description": "Globally unique identifier for financial account.",
        "examples": {
          "financialAccountTokenExample": {
            "summary": "A sample financial account token",
            "value": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "in": "path",
        "name": "financial_account_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "financialTransactionToken": {
        "description": "Globally unique identifier for financial transaction token.",
        "examples": {
          "financialTransactionTokenExample": {
            "summary": "A sample financial transaction token",
            "value": "18394f8e-711b-4b3e-ae21-d35a9eafe7d1"
          }
        },
        "in": "path",
        "name": "financial_transaction_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "fundingSourceToken": {
        "examples": {
          "fundingSourceTokenExample": {
            "summary": "A sample funding source token",
            "value": "73ca53a1-bf91-502b-97d9-f64788f8b2ab"
          }
        },
        "in": "path",
        "name": "funding_source_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "pageSize": {
        "description": "Page size (for pagination).",
        "in": "query",
        "name": "page_size",
        "schema": {
          "default": 50,
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "startingAfter": {
        "description": "A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.",
        "in": "query",
        "name": "starting_after",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "statementToken": {
        "description": "Globally unique identifier for statements.",
        "examples": {
          "statementTokenExample": {
            "summary": "A sample statement token",
            "value": "2UJf2y1JT6nsvDRH4rgSlfWs6sw"
          }
        },
        "in": "path",
        "name": "statement_token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "transactionToken": {
        "description": "Globally unique identifier for the transaction.",
        "examples": {
          "transactionTokenExample": {
            "summary": "A sample transaction token",
            "value": "84bc53a1-bf91-502b-97d9-f75888f8b2ab"
          }
        },
        "in": "path",
        "name": "transaction_token",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "A parameter in the query given in the request does not match the valid queries for the endpoint."
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "The request could not be completed due to a conflict with the current state of the target resource."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "Client is not authorized to call the endpoint\n"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "The specified resource was not found."
      },
      "SimulateAuthorizationFailure": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "debugging_request_id": {
                      "description": "Identifier to help debug an error.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "message": {
                      "description": "Explanation of error response.",
                      "type": "string"
                    }
                  },
                  "required": ["debugging_request_id", "message"],
                  "type": "object"
                },
                {
                  "properties": {
                    "token": {
                      "description": "A unique token to reference this transaction.",
                      "example": "b68ba424-ab69-4cbc-a946-30d90181b621",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            }
          }
        },
        "description": "Unprocessable Entity."
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "Client has exceeded the number of allowed requests in a given time period.\n\n|   |   |\n|---|---|\n| Rate limited, too many requests per second | User has exceeded their per second rate limit |\n| Rate limited, reached daily limit | User has exceeded their daily rate limit |\n| Rate limited, too many keys tried | One IP has queried too many different API keys |\n"
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "|   |   |\n|---|---|\n| User has not been authenticated | Invalid or missing API key |\n| API key is not active | The API key used is no longer active |\n| Could not find API key | The API key provided is not associated with any user |\n| Please provide API key in Authorization header | The Authorization header is not in the request |\n| Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |\n| Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |\n| Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |\n"
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "debugging_request_id": {
                  "description": "Identifier to help debug an error.",
                  "format": "uuid",
                  "type": "string"
                },
                "message": {
                  "description": "Explanation of error response.",
                  "type": "string"
                }
              },
              "required": ["debugging_request_id", "message"],
              "type": "object"
            }
          }
        },
        "description": "Unprocessable entity."
      }
    },
    "schemas": {
      "ASAClientResponse": {
        "description": "## Response Time\nThe request timeout is configurable per request, with a default of 5 seconds. Response before the timeout does not guarantee that the authorization will succeed.\n\n## AVS Matching\nAVS response is optional. If AVS is present and a response is not received, Lithic will return AVS validated. If AVS attributes aren’t included in the authorization, any AVS response result will be ignored.\n\n## Returned Balances\nBALANCE_INQUIRY ASA messages require a settled and available amount to be returned. If no balance is returned, Lithic will return $0 for both attributes.\n",
        "properties": {
          "avs_result": {
            "description": "AVS response result.",
            "enum": ["FAIL", "MATCH", "MATCH_ADDRESS_ONLY", "MATCH_ZIP_ONLY"],
            "type": "string"
          },
          "balance": {
            "description": "Available amount and settled amount values. These values can be used by merchants for authorization decisions as well as balance display at POS/ATM.",
            "properties": {
              "amount": {
                "description": "Settled amount (in cents).",
                "example": 100,
                "type": "integer"
              },
              "available": {
                "description": "Available amount (in cents).",
                "example": 200,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "result": {
            "description": "ASA response result. `APPROVED` to accept the authorization. Any other response will decline the authorization.\n\n|   |   |   |\n|---|---|---|\n| **Decline reason** | **Description** |\n| CARD_CLOSED | Card is permanently closed. Using `CARD_CLOSED` will result in subsequent authorizations being declined on the ASA client's behalf |\n| CARD_PAUSED | Card is not yet activated, or in a paused state |\n| ACCOUNT_INACTIVE | Same as `CARD_PAUSED`, will be deprecated in future versions |\n| AVS_INVALID | Prevent acquirers from approving the transaction despite incorrect AVS. Note: AVS response is not required for this decline type |\n| VELOCITY_EXCEEDED | Transaction exceeds issuer-set velocity limits. Acquirers may retry the transaction at a later date |\n| UNAUTHORIZED_MERCHANT | Can be used for restricted MCCs, countries, or transaction types (e.g. money transfer transactions) |\n| INSUFFICIENT_FUNDS | User has insufficient funds. Acquirers may retry the transaction at a later time |\n| MALFORMED_RESPONSE | The response to Lithic's Auth Stream Access (ASA) request was malformed. |\n",
            "enum": [
              "ACCOUNT_INACTIVE",
              "AVS_INVALID",
              "CARD_CLOSED",
              "CARD_PAUSED",
              "INSUFFICIENT_FUNDS",
              "MALFORMED_RESPONSE",
              "UNAUTHORIZED_MERCHANT",
              "VELOCITY_EXCEEDED"
            ],
            "type": "string"
          },
          "token": {
            "description": "The transaction token from the ASA request.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["result", "token", "type"],
        "type": "object"
      },
      "AccountConfiguration": {
        "properties": {
          "account_holder": {
            "properties": {
              "business_account_token": {
                "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.",
                "example": "e87db14a-4abf-4901-adad-5d5c9f46aff2",
                "type": "string"
              },
              "email": {
                "description": "Email address.",
                "example": "jack@lithic.com",
                "type": "string"
              },
              "phone_number": {
                "description": "Phone number of the individual.",
                "example": "+12124007676",
                "type": "string"
              },
              "token": {
                "description": "Globally unique identifier for the account holder.",
                "example": "95e5f1b7-cfd5-4520-aa3c-2451bab8608d",
                "type": "string"
              }
            },
            "required": ["business_account_token", "email", "phone_number", "token"],
            "type": "object"
          },
          "auth_rule_tokens": {
            "description": "List of identifiers for the Auth Rule(s) that are applied on the account.\n",
            "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "spend_limit": {
            "description": "Spend limit information for the user containing the daily, monthly, and lifetime spend limit of the account. Any charges to a card owned by this account will be declined once their transaction volume has surpassed the value in the applicable time limit (rolling). A lifetime limit of 0 indicates that the lifetime limit feature is disabled.\n",
            "properties": {
              "daily": {
                "description": "Daily spend limit (in cents).",
                "example": 10000,
                "minimum": 0,
                "type": "integer"
              },
              "lifetime": {
                "description": "Total spend limit over account lifetime (in cents).",
                "example": 100000,
                "minimum": 0,
                "type": "integer"
              },
              "monthly": {
                "description": "Monthly spend limit (in cents).",
                "example": 40000,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": ["daily", "lifetime", "monthly"],
            "type": "object"
          },
          "state": {
            "description": "Account state:\n  * `ACTIVE` - Account is able to transact and create new cards.\n  * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.\n",
            "enum": ["ACTIVE", "PAUSED"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for the account. This is the same as the account_token returned by the enroll endpoint. If using this parameter, do not include pagination.\n",
            "example": "b68b7424-aa69-4cbc-a946-30d90181b621",
            "format": "uuid",
            "type": "string"
          },
          "verification_address": {
            "properties": {
              "address1": {
                "description": "Valid deliverable address (no PO boxes).",
                "example": "124 Old Forest Way",
                "type": "string"
              },
              "address2": {
                "description": "Unit or apartment number (if applicable).",
                "example": "Apt 21",
                "type": "string"
              },
              "city": {
                "description": "City name.",
                "example": "Seattle",
                "type": "string"
              },
              "country": {
                "description": "Country name. Only USA is currently supported.",
                "example": "USA",
                "type": "string"
              },
              "postal_code": {
                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.",
                "example": "98109",
                "type": "string"
              },
              "state": {
                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.",
                "example": "WA",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "type": "object"
          }
        },
        "required": ["spend_limit", "state", "token"],
        "type": "object"
      },
      "AccountCreditConfigurationRequest": {
        "properties": {
          "billing_period": {
            "description": "Number of days within the billing period",
            "type": "integer"
          },
          "credit_limit": {
            "description": "Credit limit extended to the Business Account",
            "type": "integer"
          },
          "external_bank_account_token": {
            "description": "The external bank account token to use for auto-collections",
            "format": "uuid",
            "type": "string"
          },
          "payment_period": {
            "description": "Number of days after the billing period ends that a payment is required",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AccountHolder": {
        "properties": {
          "account_token": {
            "description": "Globally unique identifier for the account.",
            "format": "uuid",
            "type": "string"
          },
          "beneficial_owner_entities": {
            "description": "Only present when user_type == \"BUSINESS\". List of all entities with >25% ownership in the company.\n",
            "items": {
              "properties": {
                "address": {
                  "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                  "properties": {
                    "address1": {
                      "description": "Valid deliverable address (no PO boxes).",
                      "example": "123 Old Forest Way",
                      "type": "string"
                    },
                    "address2": {
                      "description": "Unit or apartment number (if applicable).",
                      "type": "string"
                    },
                    "city": {
                      "description": "Name of city.",
                      "example": "Omaha",
                      "type": "string"
                    },
                    "country": {
                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                      "example": "USA",
                      "type": "string"
                    },
                    "postal_code": {
                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                      "example": "68022",
                      "type": "string"
                    },
                    "state": {
                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                      "example": "NE",
                      "type": "string"
                    }
                  },
                  "required": ["address1", "city", "country", "postal_code", "state"],
                  "type": "object"
                },
                "dba_business_name": {
                  "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                  "type": "string"
                },
                "government_id": {
                  "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                  "example": "114-123-1513",
                  "type": "string"
                },
                "legal_business_name": {
                  "description": "Legal (formal) business name.",
                  "example": "Acme, Inc.",
                  "type": "string"
                },
                "parent_company": {
                  "description": "Parent company name (if applicable).",
                  "type": "string"
                },
                "phone_numbers": {
                  "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                  "items": {
                    "description": "Business phone number, entered in E.164 format.",
                    "example": "+12124007676",
                    "type": "string"
                  },
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          },
          "beneficial_owner_individuals": {
            "description": "Only present when user_type == \"BUSINESS\". List of all individuals with >25% ownership in the company.\n",
            "items": {
              "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
              "properties": {
                "address": {
                  "description": "Individual's current address",
                  "properties": {
                    "address1": {
                      "description": "Valid deliverable address (no PO boxes).",
                      "example": "123 Old Forest Way",
                      "type": "string"
                    },
                    "address2": {
                      "description": "Unit or apartment number (if applicable).",
                      "type": "string"
                    },
                    "city": {
                      "description": "Name of city.",
                      "example": "Omaha",
                      "type": "string"
                    },
                    "country": {
                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                      "example": "USA",
                      "type": "string"
                    },
                    "postal_code": {
                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                      "example": "68022",
                      "type": "string"
                    },
                    "state": {
                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                      "example": "NE",
                      "type": "string"
                    }
                  },
                  "required": ["address1", "city", "country", "postal_code", "state"],
                  "type": "object"
                },
                "dob": {
                  "description": "Individual's date of birth, as an RFC 3339 date.",
                  "example": "1991-03-08 08:00:00",
                  "type": "string"
                },
                "email": {
                  "description": "Individual's email address.",
                  "example": "tom@middle-earth.com",
                  "type": "string"
                },
                "first_name": {
                  "description": "Individual's first name, as it appears on government-issued identity documents.",
                  "example": "Tom",
                  "type": "string"
                },
                "last_name": {
                  "description": "Individual's last name, as it appears on government-issued identity documents.",
                  "example": "Bombadil",
                  "type": "string"
                },
                "phone_number": {
                  "description": "Individual's phone number, entered in E.164 format.",
                  "example": "+12124007676",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          },
          "business_account_token": {
            "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
            "format": "uuid",
            "type": "string"
          },
          "business_entity": {
            "properties": {
              "address": {
                "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dba_business_name": {
                "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                "type": "string"
              },
              "government_id": {
                "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                "example": "114-123-1513",
                "type": "string"
              },
              "legal_business_name": {
                "description": "Legal (formal) business name.",
                "example": "Acme, Inc.",
                "type": "string"
              },
              "parent_company": {
                "description": "Parent company name (if applicable).",
                "type": "string"
              },
              "phone_numbers": {
                "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                "items": {
                  "description": "Business phone number, entered in E.164 format.",
                  "example": "+12124007676",
                  "type": "string"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
            "type": "object",
            "description": "Only present when user_type == \"BUSINESS\". Information about the business for which the account is being opened and KYB is being run."
          },
          "control_person": {
            "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
            "properties": {
              "address": {
                "description": "Individual's current address",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dob": {
                "description": "Individual's date of birth, as an RFC 3339 date.",
                "example": "1991-03-08 08:00:00",
                "type": "string"
              },
              "email": {
                "description": "Individual's email address.",
                "example": "tom@middle-earth.com",
                "type": "string"
              },
              "first_name": {
                "description": "Individual's first name, as it appears on government-issued identity documents.",
                "example": "Tom",
                "type": "string"
              },
              "last_name": {
                "description": "Individual's last name, as it appears on government-issued identity documents.",
                "example": "Bombadil",
                "type": "string"
              },
              "phone_number": {
                "description": "Individual's phone number, entered in E.164 format.",
                "example": "+12124007676",
                "type": "string"
              }
            },
            "type": "object"
          },
          "created": {
            "description": "Timestamp of when the account holder was created.",
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "description": "<\n  Deprecated.\n  Use control_person.email when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary email of Account Holder.\n",
            "example": "+12124007676",
            "type": "string"
          },
          "exemption_type": {
            "description": "The type of KYC exemption for a KYC-Exempt Account Holder.",
            "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
            "type": "string"
          },
          "external_id": {
            "description": "Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.",
            "format": "string",
            "type": "string"
          },
          "individual": {
            "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
            "properties": {
              "address": {
                "description": "Individual's current address",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dob": {
                "description": "Individual's date of birth, as an RFC 3339 date.",
                "example": "1991-03-08 08:00:00",
                "type": "string"
              },
              "email": {
                "description": "Individual's email address.",
                "example": "tom@middle-earth.com",
                "type": "string"
              },
              "first_name": {
                "description": "Individual's first name, as it appears on government-issued identity documents.",
                "example": "Tom",
                "type": "string"
              },
              "last_name": {
                "description": "Individual's last name, as it appears on government-issued identity documents.",
                "example": "Bombadil",
                "type": "string"
              },
              "phone_number": {
                "description": "Individual's phone number, entered in E.164 format.",
                "example": "+12124007676",
                "type": "string"
              }
            },
            "type": "object"
          },
          "nature_of_business": {
            "description": "Only present when user_type == \"BUSINESS\". User-submitted description of the business.",
            "format": "string",
            "type": "string"
          },
          "phone_number": {
            "description": "<\n  Deprecated.\n  Use control_person.phone_number when user_type == \"BUSINESS\".\n  Use individual.phone_number when user_type == \"INDIVIDUAL\".\n>\nPrimary phone of Account Holder, entered in E.164 format.\n",
            "example": "+12124007676",
            "type": "string"
          },
          "status": {
            "description": "<Deprecated. Use verification_application.status instead>\nKYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
            "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
            "type": "string"
          },
          "status_reasons": {
            "description": "<Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.",
            "items": {
              "enum": [
                "ADDRESS_VERIFICATION_FAILURE",
                "AGE_THRESHOLD_FAILURE",
                "COMPLETE_VERIFICATION_FAILURE",
                "DOB_VERIFICATION_FAILURE",
                "ID_VERIFICATION_FAILURE",
                "MAX_DOCUMENT_ATTEMPTS",
                "MAX_RESUBMISSION_ATTEMPTS",
                "NAME_VERIFICATION_FAILURE",
                "OTHER_VERIFICATION_FAILURE",
                "RISK_THRESHOLD_FAILURE",
                "WATCHLIST_ALERT_FAILURE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "description": "Globally unique identifier for the account holder.",
            "format": "uuid",
            "type": "string"
          },
          "user_type": {
            "description": "The type of Account Holder. If the type is \"INDIVIDUAL\", the \"individual\" attribute will be present.\nIf the type is \"BUSINESS\" then the \"business_entity\", \"control_person\", \"beneficial_owner_individuals\", \"beneficial_owner_entities\",\n\"nature_of_business\", and \"website_url\" attributes will be present.\n",
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "type": "string"
          },
          "verification_application": {
            "description": "Information about the most recent identity verification attempt",
            "properties": {
              "created": {
                "description": "Timestamp of when the application was created.",
                "format": "date-time",
                "type": "string"
              },
              "status": {
                "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
                "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
                "type": "string"
              },
              "status_reasons": {
                "description": "Reason for the evaluation status.",
                "items": {
                  "enum": [
                    "ADDRESS_VERIFICATION_FAILURE",
                    "AGE_THRESHOLD_FAILURE",
                    "COMPLETE_VERIFICATION_FAILURE",
                    "DOB_VERIFICATION_FAILURE",
                    "ID_VERIFICATION_FAILURE",
                    "MAX_DOCUMENT_ATTEMPTS",
                    "MAX_RESUBMISSION_ATTEMPTS",
                    "NAME_VERIFICATION_FAILURE",
                    "OTHER_VERIFICATION_FAILURE",
                    "RISK_THRESHOLD_FAILURE",
                    "WATCHLIST_ALERT_FAILURE"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "updated": {
                "description": "Timestamp of when the application was last updated.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "website_url": {
            "description": "Only present when user_type == \"BUSINESS\". Business's primary website.",
            "format": "string",
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object"
      },
      "AccountHolderCollectionsConfiguration": {
        "properties": {
          "billing_period": {
            "description": "Number of days within the billing period",
            "type": "integer"
          },
          "external_bank_account_token": {
            "description": "The external bank account token to use for auto-collections",
            "format": "uuid",
            "type": "string"
          },
          "payment_period": {
            "description": "Number of days after the billing period ends that a payment is required",
            "type": "integer"
          }
        },
        "required": ["billing_period", "payment_period"],
        "type": "object"
      },
      "AccountHolderDocument": {
        "description": "Describes the document and the required document image uploads required to re-run KYC.",
        "example": {
          "account_holder_token": "aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149",
          "document_type": "drivers_license",
          "required_document_uploads": [
            {
              "image_type": "front",
              "status": "PENDING",
              "status_reasons": [],
              "upload_url": "https://lithic-document-verification-uploads.com"
            },
            {
              "image_type": "back",
              "status": "UPLOADED",
              "status_reasons": [],
              "upload_url": "https://lithic-document-verification-uploads.com"
            }
          ],
          "token": "12345678-3630-4cd0-bbec-1a0fa5c7e149"
        },
        "properties": {
          "account_holder_token": {
            "description": "Globally unique identifier for the account holder.",
            "format": "uuid",
            "type": "string"
          },
          "document_type": {
            "description": "Type of documentation to be submitted for verification.",
            "enum": ["commercial_license", "drivers_license", "passport", "passport_card", "visa"],
            "type": "string"
          },
          "required_document_uploads": {
            "items": {
              "description": "Represents a single image of the document to upload.",
              "properties": {
                "image_type": {
                  "description": "Type of image to upload.",
                  "enum": ["back", "front"],
                  "type": "string"
                },
                "status": {
                  "description": "Status of document image upload.",
                  "enum": ["COMPLETED", "FAILED", "PENDING", "UPLOADED"],
                  "type": "string"
                },
                "status_reasons": {
                  "items": {
                    "description": "Reasons for document image upload status.",
                    "enum": [
                      "BACK_IMAGE_BLURRY",
                      "FILE_SIZE_TOO_LARGE",
                      "FRONT_IMAGE_BLURRY",
                      "FRONT_IMAGE_GLARE",
                      "INVALID_FILE_TYPE",
                      "UNKNOWN_ERROR"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "upload_url": {
                  "description": "URL to upload document image to.\n\nNote that the upload URLs expire after 7 days. If an upload URL expires, you can\nrefresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.\n",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "token": {
            "description": "Globally unique identifier for the document.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountHolderIndividualResponse": {
        "description": "Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.",
        "properties": {
          "address": {
            "description": "Individual's current address",
            "properties": {
              "address1": {
                "description": "Valid deliverable address (no PO boxes).",
                "example": "123 Old Forest Way",
                "type": "string"
              },
              "address2": {
                "description": "Unit or apartment number (if applicable).",
                "type": "string"
              },
              "city": {
                "description": "Name of city.",
                "example": "Omaha",
                "type": "string"
              },
              "country": {
                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                "example": "USA",
                "type": "string"
              },
              "postal_code": {
                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                "example": "68022",
                "type": "string"
              },
              "state": {
                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                "example": "NE",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "type": "object"
          },
          "dob": {
            "description": "Individual's date of birth, as an RFC 3339 date.",
            "example": "1991-03-08 08:00:00",
            "type": "string"
          },
          "email": {
            "description": "Individual's email address.",
            "example": "tom@middle-earth.com",
            "type": "string"
          },
          "first_name": {
            "description": "Individual's first name, as it appears on government-issued identity documents.",
            "example": "Tom",
            "type": "string"
          },
          "last_name": {
            "description": "Individual's last name, as it appears on government-issued identity documents.",
            "example": "Bombadil",
            "type": "string"
          },
          "phone_number": {
            "description": "Individual's phone number, entered in E.164 format.",
            "example": "+12124007676",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountHolderVerificationApplication": {
        "description": "Represents the status of an identity verification application for an account holder",
        "properties": {
          "created": {
            "description": "Timestamp of when the application was created.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "KYC and KYB evaluation states.\nNote: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.\n",
            "enum": ["ACCEPTED", "PENDING_DOCUMENT", "PENDING_RESUBMIT", "REJECTED"],
            "type": "string"
          },
          "status_reasons": {
            "description": "Reason for the evaluation status.",
            "items": {
              "enum": [
                "ADDRESS_VERIFICATION_FAILURE",
                "AGE_THRESHOLD_FAILURE",
                "COMPLETE_VERIFICATION_FAILURE",
                "DOB_VERIFICATION_FAILURE",
                "ID_VERIFICATION_FAILURE",
                "MAX_DOCUMENT_ATTEMPTS",
                "MAX_RESUBMISSION_ATTEMPTS",
                "NAME_VERIFICATION_FAILURE",
                "OTHER_VERIFICATION_FAILURE",
                "RISK_THRESHOLD_FAILURE",
                "WATCHLIST_ALERT_FAILURE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "updated": {
            "description": "Timestamp of when the application was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountSpendLimits": {
        "properties": {
          "available_spend_limit": {
            "properties": {
              "daily": {
                "description": "The available spend limit relative to the daily limit configured on the Account.",
                "example": 100000,
                "type": "integer"
              },
              "lifetime": {
                "description": "The available spend limit relative to the lifetime limit configured on the Account.",
                "example": 300000,
                "type": "integer"
              },
              "monthly": {
                "description": "The available spend limit relative to the monthly limit configured on the Account.",
                "example": 200000,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": ["available_spend_limit"],
        "type": "object"
      },
      "AccountState": {
        "enum": ["CLOSED", "ENABLED", "PAUSED"],
        "title": "AccountState"
      },
      "AccountType": {
        "enum": ["CHECKING", "SAVINGS"],
        "title": "AccountType"
      },
      "Address": {
        "properties": {
          "address1": {
            "description": "Valid deliverable address (no PO boxes).",
            "example": "123 Old Forest Way",
            "type": "string"
          },
          "address2": {
            "description": "Unit or apartment number (if applicable).",
            "type": "string"
          },
          "city": {
            "description": "Name of city.",
            "example": "Omaha",
            "type": "string"
          },
          "country": {
            "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
            "example": "USA",
            "type": "string"
          },
          "postal_code": {
            "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
            "example": "68022",
            "type": "string"
          },
          "state": {
            "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
            "example": "NE",
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "postal_code", "state"],
        "type": "object"
      },
      "AggregateBalance": {
        "description": "Aggregate Balance across all end-user accounts",
        "properties": {
          "available_amount": {
            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "created": {
            "description": "Date and time for when the balance was first created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
            "type": "string"
          },
          "financial_account_type": {
            "description": "Type of financial account",
            "enum": ["ISSUING", "OPERATING", "RESERVE"],
            "type": "string"
          },
          "last_financial_account_token": {
            "description": "Globally unique identifier for the financial account that had its balance updated most recently",
            "format": "uuid",
            "type": "string"
          },
          "last_transaction_event_token": {
            "description": "Globally unique identifier for the last transaction event that impacted this balance",
            "format": "uuid",
            "type": "string"
          },
          "last_transaction_token": {
            "description": "Globally unique identifier for the last transaction that impacted this balance",
            "format": "uuid",
            "type": "string"
          },
          "pending_amount": {
            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "total_amount": {
            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "updated": {
            "description": "Date and time for when the balance was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "available_amount",
          "created",
          "currency",
          "financial_account_type",
          "last_financial_account_token",
          "last_transaction_event_token",
          "last_transaction_token",
          "pending_amount",
          "total_amount",
          "updated"
        ],
        "type": "object"
      },
      "AuthRule": {
        "allOf": [
          {
            "properties": {
              "account_tokens": {
                "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "allowed_countries": {
                "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
                "example": ["MEX"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "allowed_mcc": {
                "description": "Merchant category codes for which the Auth Rule permits transactions.",
                "example": ["3000"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "blocked_countries": {
                "description": "Countries in which the Auth Rule automatically declines transactions.",
                "example": ["CAN", "USA"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "blocked_mcc": {
                "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
                "example": ["5811", "5812"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "card_tokens": {
                "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
                "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "program_level": {
                "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
                "example": false,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "state": {
                "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
                "enum": ["ACTIVE", "INACTIVE"],
                "type": "string"
              },
              "token": {
                "description": "Globally unique identifier.",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "AuthRuleRequest": {
        "properties": {
          "account_tokens": {
            "description": "Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.",
            "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowed_countries": {
            "description": "Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; \"allowing\" those countries in an Auth Rule does not override the Lithic-wide restrictions.\n",
            "example": ["MEX"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowed_mcc": {
            "description": "Merchant category codes for which the Auth Rule permits transactions.",
            "example": ["3000"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_countries": {
            "description": "Countries in which the Auth Rule automatically declines transactions.",
            "example": ["CAN", "USA"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_mcc": {
            "description": "Merchant category codes for which the Auth Rule automatically declines transactions.",
            "example": ["5811", "5812"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "card_tokens": {
            "description": "Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.",
            "example": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "program_level": {
            "description": "Boolean indicating whether the Auth Rule is applied at the program level.",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AuthRuleResponseOnly": {
        "properties": {
          "state": {
            "description": "Indicates whether the Auth Rule is ACTIVE or INACTIVE",
            "enum": ["ACTIVE", "INACTIVE"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Balance": {
        "description": "Balance of a Financial Account",
        "properties": {
          "available_amount": {
            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "created": {
            "description": "Date and time for when the balance was first created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
            "type": "string"
          },
          "financial_account_token": {
            "description": "Globally unique identifier for the financial account that holds this balance.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "format": "uuid",
            "type": "string"
          },
          "financial_account_type": {
            "description": "Type of financial account.",
            "enum": ["ISSUING", "OPERATING", "RESERVE"],
            "type": "string"
          },
          "last_transaction_event_token": {
            "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
            "format": "uuid",
            "type": "string"
          },
          "last_transaction_token": {
            "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
            "format": "uuid",
            "type": "string"
          },
          "pending_amount": {
            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
            "type": "integer"
          },
          "total_amount": {
            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
            "type": "integer"
          },
          "updated": {
            "description": "Date and time for when the balance was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "available_amount",
          "created",
          "currency",
          "financial_account_token",
          "financial_account_type",
          "last_transaction_event_token",
          "last_transaction_token",
          "pending_amount",
          "total_amount",
          "updated"
        ],
        "type": "object"
      },
      "BankAccountApiResponse": {
        "properties": {
          "account_token": {
            "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
            "format": "uuid",
            "title": "Account Token",
            "type": "string"
          },
          "address": {
            "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
            "properties": {
              "address1": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address1",
                "type": "string"
              },
              "address2": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address2",
                "type": "string"
              },
              "city": {
                "maxLength": 40,
                "minLength": 1,
                "title": "City",
                "type": "string"
              },
              "country": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^[A-Z]{3}$",
                "title": "Country",
                "type": "string"
              },
              "postal_code": {
                "maxLength": 10,
                "minLength": 5,
                "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                "title": "Postal Code",
                "type": "string"
              },
              "state": {
                "maxLength": 2,
                "minLength": 2,
                "title": "State",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "title": "Address",
            "type": "object"
          },
          "company_id": {
            "description": "Optional field that helps identify bank accounts in receipts",
            "title": "Company Id",
            "type": "string"
          },
          "country": {
            "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
            "title": "Country",
            "type": "string"
          },
          "created": {
            "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "currency": {
            "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
            "title": "Currency",
            "type": "string"
          },
          "dob": {
            "description": "Date of Birth of the Individual that owns the external bank account",
            "format": "date",
            "title": "Date of Birth",
            "type": "string"
          },
          "doing_business_as": {
            "title": "Doing Business As",
            "type": "string"
          },
          "last_four": {
            "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
            "title": "Last Four",
            "type": "string"
          },
          "name": {
            "description": "The nickname given to this record of External Bank Account",
            "title": "Name",
            "type": "string"
          },
          "owner": {
            "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
            "title": "Owner",
            "type": "string"
          },
          "owner_type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "title": "Owner Type",
            "type": "string"
          },
          "routing_number": {
            "title": "Routing Number",
            "type": "string"
          },
          "state": {
            "enum": ["CLOSED", "ENABLED", "PAUSED"],
            "title": "State",
            "type": "string"
          },
          "token": {
            "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
            "format": "uuid",
            "title": "Token",
            "type": "string"
          },
          "type": {
            "enum": ["CHECKING", "SAVINGS"],
            "title": "Type",
            "type": "string"
          },
          "user_defined_id": {
            "title": "User Defined ID",
            "type": "string"
          },
          "verification_attempts": {
            "description": "The number of attempts at verification",
            "title": "Verification Attempts",
            "type": "integer"
          },
          "verification_failed_reason": {
            "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
            "title": "Verification Failed Reason",
            "type": "string"
          },
          "verification_method": {
            "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
            "title": "Verification Method",
            "type": "string"
          },
          "verification_state": {
            "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
            "title": "Verification State",
            "type": "string"
          }
        },
        "required": [
          "country",
          "created",
          "currency",
          "last_four",
          "owner",
          "owner_type",
          "routing_number",
          "state",
          "token",
          "type",
          "verification_attempts",
          "verification_method",
          "verification_state"
        ],
        "title": "BankAccountApiResponse",
        "type": "object"
      },
      "BankAccountsApiResponse": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "account_token": {
                  "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                  "format": "uuid",
                  "title": "Account Token",
                  "type": "string"
                },
                "address": {
                  "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                  "properties": {
                    "address1": {
                      "maxLength": 40,
                      "minLength": 1,
                      "title": "Address1",
                      "type": "string"
                    },
                    "address2": {
                      "maxLength": 40,
                      "minLength": 1,
                      "title": "Address2",
                      "type": "string"
                    },
                    "city": {
                      "maxLength": 40,
                      "minLength": 1,
                      "title": "City",
                      "type": "string"
                    },
                    "country": {
                      "maxLength": 3,
                      "minLength": 3,
                      "pattern": "^[A-Z]{3}$",
                      "title": "Country",
                      "type": "string"
                    },
                    "postal_code": {
                      "maxLength": 10,
                      "minLength": 5,
                      "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                      "title": "Postal Code",
                      "type": "string"
                    },
                    "state": {
                      "maxLength": 2,
                      "minLength": 2,
                      "title": "State",
                      "type": "string"
                    }
                  },
                  "required": ["address1", "city", "country", "postal_code", "state"],
                  "title": "Address",
                  "type": "object"
                },
                "company_id": {
                  "description": "Optional field that helps identify bank accounts in receipts",
                  "title": "Company Id",
                  "type": "string"
                },
                "country": {
                  "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                  "title": "Country",
                  "type": "string"
                },
                "created": {
                  "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                  "format": "date-time",
                  "title": "Created",
                  "type": "string"
                },
                "currency": {
                  "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                  "title": "Currency",
                  "type": "string"
                },
                "dob": {
                  "description": "Date of Birth of the Individual that owns the external bank account",
                  "format": "date",
                  "title": "Date of Birth",
                  "type": "string"
                },
                "doing_business_as": {
                  "title": "Doing Business As",
                  "type": "string"
                },
                "last_four": {
                  "description": "The last 4 digits of the bank account. Derived by Lithic from the account number passed",
                  "title": "Last Four",
                  "type": "string"
                },
                "name": {
                  "description": "The nickname given to this record of External Bank Account",
                  "title": "Name",
                  "type": "string"
                },
                "owner": {
                  "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                  "title": "Owner",
                  "type": "string"
                },
                "owner_type": {
                  "enum": ["BUSINESS", "INDIVIDUAL"],
                  "title": "Owner Type",
                  "type": "string"
                },
                "routing_number": {
                  "title": "Routing Number",
                  "type": "string"
                },
                "state": {
                  "enum": ["CLOSED", "ENABLED", "PAUSED"],
                  "title": "State",
                  "type": "string"
                },
                "token": {
                  "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                  "format": "uuid",
                  "title": "Token",
                  "type": "string"
                },
                "type": {
                  "enum": ["CHECKING", "SAVINGS"],
                  "title": "Type",
                  "type": "string"
                },
                "user_defined_id": {
                  "title": "User Defined ID",
                  "type": "string"
                },
                "verification_attempts": {
                  "description": "The number of attempts at verification",
                  "title": "Verification Attempts",
                  "type": "integer"
                },
                "verification_failed_reason": {
                  "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                  "title": "Verification Failed Reason",
                  "type": "string"
                },
                "verification_method": {
                  "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                  "title": "Verification Method",
                  "type": "string"
                },
                "verification_state": {
                  "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                  "title": "Verification State",
                  "type": "string"
                }
              },
              "required": [
                "country",
                "created",
                "currency",
                "last_four",
                "owner",
                "owner_type",
                "routing_number",
                "state",
                "token",
                "type",
                "verification_attempts",
                "verification_method",
                "verification_state"
              ],
              "title": "BankAccountApiResponse",
              "type": "object"
            },
            "title": "Data",
            "type": "array"
          },
          "has_more": {
            "title": "More data exists",
            "type": "boolean"
          }
        },
        "required": ["data", "has_more"],
        "title": "BankAccountsApiResponse",
        "type": "object"
      },
      "BankVerifiedCreateBankAccountApiRequest": {
        "properties": {
          "account_number": {
            "title": "Account Number",
            "type": "string"
          },
          "account_token": {
            "format": "uuid",
            "title": "Account Token",
            "type": "string"
          },
          "address": {
            "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
            "properties": {
              "address1": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address1",
                "type": "string"
              },
              "address2": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address2",
                "type": "string"
              },
              "city": {
                "maxLength": 40,
                "minLength": 1,
                "title": "City",
                "type": "string"
              },
              "country": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^[A-Z]{3}$",
                "title": "Country",
                "type": "string"
              },
              "postal_code": {
                "maxLength": 10,
                "minLength": 5,
                "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                "title": "Postal Code",
                "type": "string"
              },
              "state": {
                "maxLength": 2,
                "minLength": 2,
                "title": "State",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "title": "Address",
            "type": "object"
          },
          "company_id": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]*$",
            "title": "Company Id",
            "type": "string"
          },
          "country": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "title": "Country",
            "type": "string"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "title": "Currency",
            "type": "string"
          },
          "dob": {
            "description": "Date of Birth of the Individual that owns the external bank account",
            "format": "date",
            "title": "Date of Birth",
            "type": "string"
          },
          "doing_business_as": {
            "title": "Doing Business As",
            "type": "string"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[!-~ ]*$",
            "title": "Name",
            "type": "string"
          },
          "owner": {
            "maxLength": 22,
            "minLength": 1,
            "pattern": "^[!-~ ]*$",
            "title": "Owner",
            "type": "string"
          },
          "owner_type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "title": "OwnerType",
            "type": "string"
          },
          "routing_number": {
            "minLength": 1,
            "pattern": "^[0-9]{9}$",
            "title": "Routing Number",
            "type": "string"
          },
          "type": {
            "enum": ["CHECKING", "SAVINGS"],
            "title": "AccountType"
          },
          "user_defined_id": {
            "title": "User Defined ID",
            "type": "string"
          },
          "verification_enforcement": {
            "default": true,
            "description": "Indicates whether verification was enforced for a given association record. For MICRO_DEPOSIT, option to disable verification if the external bank account has already been verified before. By default, verification will be required unless users pass in a value of false",
            "title": "Verification Enforcement",
            "type": "boolean"
          },
          "verification_method": {
            "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
            "title": "VerificationMethod",
            "type": "string"
          }
        },
        "required": [
          "account_number",
          "country",
          "currency",
          "owner",
          "owner_type",
          "routing_number",
          "type",
          "verification_method"
        ],
        "title": "BankVerifiedCreateBankAccountApiRequest",
        "type": "object"
      },
      "BusinessAccount": {
        "properties": {
          "collections_configuration": {
            "properties": {
              "billing_period": {
                "description": "Number of days within the billing period",
                "type": "integer"
              },
              "external_bank_account_token": {
                "description": "The external bank account token to use for auto-collections",
                "format": "uuid",
                "type": "string"
              },
              "payment_period": {
                "description": "Number of days after the billing period ends that a payment is required",
                "type": "integer"
              }
            },
            "required": ["billing_period", "payment_period"],
            "type": "object"
          },
          "credit_limit": {
            "description": "Credit limit extended to the Account",
            "type": "integer"
          },
          "token": {
            "description": "Account token",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object"
      },
      "BusinessEntity": {
        "properties": {
          "address": {
            "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
            "properties": {
              "address1": {
                "description": "Valid deliverable address (no PO boxes).",
                "example": "123 Old Forest Way",
                "type": "string"
              },
              "address2": {
                "description": "Unit or apartment number (if applicable).",
                "type": "string"
              },
              "city": {
                "description": "Name of city.",
                "example": "Omaha",
                "type": "string"
              },
              "country": {
                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                "example": "USA",
                "type": "string"
              },
              "postal_code": {
                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                "example": "68022",
                "type": "string"
              },
              "state": {
                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                "example": "NE",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "type": "object"
          },
          "dba_business_name": {
            "description": "Any name that the business operates under that is not its legal business name (if applicable).",
            "type": "string"
          },
          "government_id": {
            "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
            "example": "114-123-1513",
            "type": "string"
          },
          "legal_business_name": {
            "description": "Legal (formal) business name.",
            "example": "Acme, Inc.",
            "type": "string"
          },
          "parent_company": {
            "description": "Parent company name (if applicable).",
            "type": "string"
          },
          "phone_numbers": {
            "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
            "items": {
              "description": "Business phone number, entered in E.164 format.",
              "example": "+12124007676",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
        "type": "object"
      },
      "Card": {
        "properties": {
          "account_token": {
            "description": "Globally unique identifier for the account to which the card belongs.",
            "example": "f3f4918c-dee9-464d-a819-4aa42901d624",
            "format": "uuid",
            "type": "string"
          },
          "auth_rule_tokens": {
            "description": "List of identifiers for the Auth Rule(s) that are applied on the card.\n",
            "example": ["b68b7424-aa69-4cbc-a946-30d90181b621"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "card_program_token": {
            "description": "Globally unique identifier for the card program on which the card exists.",
            "example": "5e9483eb-8103-4e16-9794-2106111b2eca",
            "format": "uuid",
            "type": "string"
          },
          "created": {
            "description": "An RFC 3339 timestamp for when the card was created. UTC time zone.",
            "example": "2021-06-28T22:53:15Z",
            "format": "date-time",
            "type": "string"
          },
          "cvv": {
            "description": "Three digit cvv printed on the back of the card.",
            "example": "776",
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "x-lithic-tag": "Enterprise"
          },
          "digital_card_art_token": {
            "description": "Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).",
            "example": "00000000-0000-0000-1000-000000000000",
            "format": "uuid",
            "type": "string"
          },
          "exp_month": {
            "description": "Two digit (MM) expiry month.",
            "example": "06",
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "x-lithic-tag": "Enterprise"
          },
          "exp_year": {
            "description": "Four digit (yyyy) expiry year.",
            "example": "2027",
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "x-lithic-tag": "Enterprise"
          },
          "funding": {
            "properties": {
              "account_name": {
                "description": "Account name identifying the funding source. This may be `null`.",
                "type": "string"
              },
              "created": {
                "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
                "format": "date-time",
                "type": "string"
              },
              "last_four": {
                "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
                "maxLength": 4,
                "minLength": 4,
                "type": "string"
              },
              "nickname": {
                "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "state": {
                "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
                "enum": ["DELETED", "ENABLED", "PENDING"],
                "type": "string"
              },
              "token": {
                "description": "A globally unique identifier for this FundingAccount.",
                "format": "uuid",
                "type": "string"
              },
              "type": {
                "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
                "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
                "type": "string"
              }
            },
            "required": ["created", "last_four", "state", "token", "type"],
            "type": "object"
          },
          "hostname": {
            "description": "Hostname of card’s locked merchant (will be empty if not applicable).",
            "type": "string"
          },
          "last_four": {
            "description": "Last four digits of the card number.",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "memo": {
            "description": "Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.",
            "example": "New Card",
            "type": "string"
          },
          "pan": {
            "description": "Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.\n",
            "example": "4111111289144142",
            "maxLength": 16,
            "minLength": 16,
            "type": "string",
            "x-lithic-tag": "Enterprise"
          },
          "product_id": {
            "description": "Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.",
            "example": "1",
            "type": "string"
          },
          "spend_limit": {
            "description": "Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.",
            "example": 1000,
            "type": "integer"
          },
          "spend_limit_duration": {
            "description": "Spend limit duration values:\n* `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.\n* `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.\n* `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.\n* `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit. ",
            "enum": ["ANNUALLY", "FOREVER", "MONTHLY", "TRANSACTION"],
            "type": "string"
          },
          "state": {
            "description": "Card state values:\n* `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.\n* `OPEN` - Card will approve authorizations (if they match card and account parameters).\n* `PAUSED` - Card will decline authorizations, but can be resumed at a later time.\n* `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for \"Card Present\" purchases where the physical card itself is present.\n* `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.\n\nIn sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.\n",
            "enum": ["CLOSED", "OPEN", "PAUSED", "PENDING_ACTIVATION", "PENDING_FULFILLMENT"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "example": "7ef7d65c-9023-4da3-b113-3b8583fd7951",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Card types:\n* `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).\n* `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.\n* `SINGLE_USE` - Card is closed upon first successful authorization.\n* `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.\n",
            "enum": ["MERCHANT_LOCKED", "PHYSICAL", "SINGLE_USE", "VIRTUAL"],
            "type": "string"
          }
        },
        "required": [
          "account_token",
          "card_program_token",
          "created",
          "funding",
          "last_four",
          "spend_limit",
          "spend_limit_duration",
          "state",
          "token",
          "type"
        ],
        "type": "object"
      },
      "CardAggregateBalance": {
        "description": "Card Aggregate Balance across all end-user accounts",
        "properties": {
          "available_amount": {
            "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "created": {
            "description": "Date and time for when the balance was first created.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
            "type": "string"
          },
          "last_card_token": {
            "description": "Globally unique identifier for the card that had its balance updated most recently",
            "format": "uuid",
            "type": "string"
          },
          "last_transaction_event_token": {
            "description": "Globally unique identifier for the last transaction event that impacted this balance",
            "format": "uuid",
            "type": "string"
          },
          "last_transaction_token": {
            "description": "Globally unique identifier for the last transaction that impacted this balance",
            "format": "uuid",
            "type": "string"
          },
          "pending_amount": {
            "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "total_amount": {
            "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)",
            "type": "integer"
          },
          "updated": {
            "description": "Date and time for when the balance was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "available_amount",
          "created",
          "currency",
          "last_card_token",
          "last_transaction_event_token",
          "last_transaction_token",
          "pending_amount",
          "total_amount",
          "updated"
        ],
        "type": "object"
      },
      "CardProgram": {
        "properties": {
          "created": {
            "description": "Timestamp of when the card program was created.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The name of the card program.",
            "example": "My Prepaid Program",
            "type": "string"
          },
          "pan_range_end": {
            "description": "The first digits of the card number that this card program ends with.",
            "example": "52304803",
            "type": "string"
          },
          "pan_range_start": {
            "description": "The first digits of the card number that this card program starts with.",
            "example": "52304803",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["created", "name", "pan_range_end", "pan_range_start", "token"],
        "type": "object"
      },
      "CardSpendLimits": {
        "properties": {
          "available_spend_limit": {
            "properties": {
              "annually": {
                "description": "The available spend limit relative to the annual limit configured on the Card.",
                "example": 200000,
                "type": "integer"
              },
              "forever": {
                "description": "The available spend limit relative to the forever limit configured on the Card.",
                "example": 300000,
                "type": "integer"
              },
              "monthly": {
                "description": "The available spend limit relative to the monthly limit configured on the Card.",
                "example": 200000,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": ["available_spend_limit"],
        "type": "object"
      },
      "CardholderAuthentication": {
        "nullable": true,
        "properties": {
          "3ds_version": {
            "description": "3-D Secure Protocol version. Possible enum values:\n* `1`: 3-D Secure Protocol version 1.x applied to the transaction.\n* `2`: 3-D Secure Protocol version 2.x applied to the transaction.\n* `null`: 3-D Secure was not used for the transaction\n",
            "example": "2",
            "nullable": true,
            "type": "string"
          },
          "acquirer_exemption": {
            "description": "Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible enum values:\n* `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.\n* `LOW_VALUE`: Low Value Payment exemption.\n* `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).\n* `NONE`: No exemption applied.\n* `RECURRING_PAYMENT`: Recurring Payment exemption.\n* `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.\n* `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.\n* `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.\n\nMaps to the 3-D Secure `transChallengeExemption` field.\n",
            "enum": [
              "AUTHENTICATION_OUTAGE_EXCEPTION",
              "LOW_VALUE",
              "MERCHANT_INITIATED_TRANSACTION",
              "NONE",
              "RECURRING_PAYMENT",
              "SECURE_CORPORATE_PAYMENT",
              "STRONG_CUSTOMER_AUTHENTICATION_DELEGATION",
              "TRANSACTION_RISK_ANALYSIS"
            ],
            "example": "NONE",
            "type": "string"
          },
          "authentication_result": {
            "description": "Outcome of the 3DS authentication process. Possible enum values:\n* `SUCCESS`: 3DS authentication was successful and the transaction is considered authenticated.\n* `DECLINE`: 3DS authentication was attempted but was unsuccessful — i.e., the issuer declined to authenticate the cardholder; note that Lithic populates this value on a best-effort basis based on common data across the 3DS authentication and ASA data elements.\n* `ATTEMPTS`: 3DS authentication was attempted but full authentication did not occur. A proof of attempted authenticated is provided by the merchant.\n* `NONE`: 3DS authentication was not performed on the transaction.\n",
            "enum": ["ATTEMPTS", "DECLINE", "NONE", "SUCCESS"],
            "example": "SUCCESS",
            "type": "string"
          },
          "decision_made_by": {
            "description": "Indicator for which party made the 3DS authentication decision. Possible enum values:\n* `NETWORK`: A networks tand-in service decided on the outcome; for token authentications (as indicated in the `liability_shift` attribute), this is the default value\n* `LITHIC_DEFAULT`: A default decision was made by Lithic, without running a rules-based authentication; this value will be set on card programs that do not participate in one of our two 3DS product tiers\n* `LITHIC_RULES`: A rules-based authentication was conducted by Lithic and Lithic decided on the outcome\n* `CUSTOMER_ENDPOINT`: Lithic customer decided on the outcome based on a real-time request sent to a configured endpoint\n* `UNKNOWN`: Data on which party decided is unavailable\n",
            "enum": ["CUSTOMER_ENDPOINT", "LITHIC_DEFAULT", "LITHIC_RULES", "NETWORK", "UNKNOWN"],
            "example": "LITHIC_RULES",
            "type": "string"
          },
          "liability_shift": {
            "description": "Indicates whether chargeback liability shift applies to the transaction. Possible enum values:\n* `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.\n* `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.\n* `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.\n* `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.\n",
            "enum": ["3DS_AUTHENTICATED", "ACQUIRER_EXEMPTION", "NONE", "TOKEN_AUTHENTICATED"],
            "type": "string"
          },
          "three_ds_authentication_token": {
            "description": "Unique identifier you can use to match a given 3DS authentication and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.",
            "example": "a6e372d0-b40a-43eb-b0d1-4e1aebef5875",
            "format": "uuid",
            "type": "string"
          },
          "verification_attempted": {
            "description": "Verification attempted values:\n* `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.\n* `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.\n* `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).\n* `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)\n* `OTP`: One-time password verification was attempted by the ACS.\n",
            "enum": ["APP_LOGIN", "BIOMETRIC", "NONE", "OTHER", "OTP"],
            "example": "NONE",
            "type": "string"
          },
          "verification_result": {
            "description": "This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.\n\nVerification result values:\n* `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.\n* `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.\n* `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.\n* `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.\n* `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.\n* `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.\n\nNote that the following `transStatus` values are not represented by this field:\n* `C`: Challenge Required\n* `D`: Challenge Required; decoupled authentication confirmed\n* `I`: Informational only\n* `S`: Challenge using Secure Payment Confirmation (SPC)\n",
            "enum": ["CANCELLED", "FAILED", "FRICTIONLESS", "NOT_ATTEMPTED", "REJECTED", "SUCCESS"],
            "example": "FRICTIONLESS",
            "type": "string"
          }
        },
        "required": [
          "3ds_version",
          "acquirer_exemption",
          "authentication_result",
          "decision_made_by",
          "liability_shift",
          "three_ds_authentication_token",
          "verification_attempted",
          "verification_result"
        ],
        "type": "object"
      },
      "Carrier": {
        "properties": {
          "qr_code_url": {
            "description": "QR code url to display on the card carrier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateFinancialAccountRequest": {
        "properties": {
          "account_token": {
            "format": "uuid",
            "title": "Account token to create the new account under",
            "type": "string"
          },
          "nickname": {
            "maxLength": 256,
            "title": "Nickname of the financial account",
            "type": "string"
          },
          "type": {
            "enum": ["OPERATING"],
            "title": "Account Type",
            "type": "string"
          }
        },
        "required": ["nickname", "type"],
        "title": "CreateFinancialAccountRequest",
        "type": "object"
      },
      "CreatePaymentRequest": {
        "properties": {
          "amount": {
            "minimum": 1,
            "title": "Amount",
            "type": "integer"
          },
          "external_bank_account_token": {
            "format": "uuid",
            "title": "External Bank Account Token",
            "type": "string"
          },
          "financial_account_token": {
            "format": "uuid",
            "title": "Financial Account Token",
            "type": "string"
          },
          "memo": {
            "maxLength": 512,
            "title": "Memo",
            "type": "string"
          },
          "method": {
            "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
            "title": "Payment Method",
            "type": "string"
          },
          "method_attributes": {
            "properties": {
              "company_id": {
                "title": "Company ID",
                "type": "string"
              },
              "receipt_routing_number": {
                "title": "Company ID",
                "type": "string"
              },
              "retries": {
                "title": "Retries",
                "type": "integer"
              },
              "return_reason_code": {
                "title": "Return Reason Code",
                "type": "string"
              },
              "sec_code": {
                "enum": ["CCD", "PPD", "WEB"],
                "title": "SEC Code",
                "type": "string"
              }
            },
            "required": ["sec_code"],
            "title": "PaymentMethodAttributes",
            "type": "object"
          },
          "token": {
            "description": "Customer-provided token that will serve as an idempotency token. This token will become the transaction token.",
            "format": "uuid",
            "title": "Token",
            "type": "string"
          },
          "type": {
            "enum": ["COLLECTION", "PAYMENT"],
            "title": "Payment Type",
            "type": "string"
          },
          "user_defined_id": {
            "maxLength": 512,
            "title": "User Defined Id",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "external_bank_account_token",
          "financial_account_token",
          "method",
          "method_attributes",
          "type"
        ],
        "title": "CreatePaymentRequest",
        "type": "object"
      },
      "DigitalCardArt": {
        "properties": {
          "card_program_token": {
            "description": "Globally unique identifier for the card program.",
            "format": "uuid",
            "type": "string"
          },
          "created": {
            "description": "Timestamp of when card art was created.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the card art.",
            "type": "string"
          },
          "is_card_program_default": {
            "description": "Whether the card art is the default card art to be added upon tokenization.",
            "type": "boolean"
          },
          "is_enabled": {
            "description": "Whether the card art is enabled.",
            "type": "boolean"
          },
          "network": {
            "description": "Card network.",
            "enum": ["MASTERCARD", "VISA"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for the card art.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["card_program_token", "created", "description", "is_enabled", "network", "token"],
        "type": "object"
      },
      "Dispute": {
        "description": "Dispute.",
        "properties": {
          "amount": {
            "description": "Amount under dispute. May be different from the original transaction amount.",
            "type": "integer"
          },
          "arbitration_date": {
            "description": "Date dispute entered arbitration.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Timestamp of when first Dispute was reported.",
            "format": "date-time",
            "type": "string"
          },
          "customer_filed_date": {
            "description": "Date that the dispute was filed by the customer making the dispute.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "customer_note": {
            "description": "End customer description of the reason for the dispute.",
            "maxLength": 10000,
            "nullable": true,
            "type": "string"
          },
          "network_claim_ids": {
            "description": "Unique identifiers for the dispute from the network.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "network_filed_date": {
            "description": "Date that the dispute was submitted to the network.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "network_reason_code": {
            "description": "Network reason code used to file the dispute.",
            "nullable": true,
            "type": "string"
          },
          "prearbitration_date": {
            "description": "Date dispute entered pre-arbitration.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "primary_claim_id": {
            "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
            "nullable": true,
            "type": "string"
          },
          "reason": {
            "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
            "enum": [
              "ATM_CASH_MISDISPENSE",
              "CANCELLED",
              "DUPLICATED",
              "FRAUD_CARD_NOT_PRESENT",
              "FRAUD_CARD_PRESENT",
              "FRAUD_OTHER",
              "GOODS_SERVICES_NOT_AS_DESCRIBED",
              "GOODS_SERVICES_NOT_RECEIVED",
              "INCORRECT_AMOUNT",
              "MISSING_AUTH",
              "OTHER",
              "PROCESSING_ERROR",
              "RECURRING_TRANSACTION_NOT_CANCELLED",
              "REFUND_NOT_PROCESSED"
            ],
            "type": "string"
          },
          "representment_date": {
            "description": "Date the representment was received.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "resolution_amount": {
            "description": "Resolution amount net of network fees.",
            "nullable": true,
            "type": "integer"
          },
          "resolution_date": {
            "description": "Date that the dispute was resolved.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "resolution_note": {
            "description": "Note by Dispute team on the case resolution.",
            "maxLength": 10000,
            "nullable": true,
            "type": "string"
          },
          "resolution_reason": {
            "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
            "enum": [
              "CASE_LOST",
              "NETWORK_REJECTED",
              "NO_DISPUTE_RIGHTS_3DS",
              "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
              "NO_DISPUTE_RIGHTS_CONTACTLESS",
              "NO_DISPUTE_RIGHTS_HYBRID",
              "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
              "NO_DISPUTE_RIGHTS_OTHER",
              "PAST_FILING_DATE",
              "PREARBITRATION_REJECTED",
              "PROCESSOR_REJECTED_OTHER",
              "REFUNDED",
              "REFUNDED_AFTER_CHARGEBACK",
              "WITHDRAWN",
              "WON_ARBITRATION",
              "WON_FIRST_CHARGEBACK",
              "WON_PREARBITRATION"
            ],
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
            "enum": [
              "ARBITRATION",
              "CASE_CLOSED",
              "CASE_WON",
              "NEW",
              "PENDING_CUSTOMER",
              "PREARBITRATION",
              "REPRESENTMENT",
              "SUBMITTED"
            ],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "transaction_token": {
            "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "arbitration_date",
          "created",
          "customer_filed_date",
          "customer_note",
          "network_claim_ids",
          "network_filed_date",
          "network_reason_code",
          "prearbitration_date",
          "primary_claim_id",
          "reason",
          "representment_date",
          "resolution_amount",
          "resolution_date",
          "resolution_note",
          "resolution_reason",
          "status",
          "token",
          "transaction_token"
        ],
        "type": "object"
      },
      "DisputeEvidence": {
        "description": "Dispute evidence.",
        "properties": {
          "created": {
            "description": "Timestamp of when dispute evidence was created.",
            "format": "date-time",
            "type": "string"
          },
          "dispute_token": {
            "description": "Dispute token evidence is attached to.",
            "format": "uuid",
            "type": "string"
          },
          "download_url": {
            "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
            "type": "string"
          },
          "filename": {
            "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "upload_status": {
            "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
            "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
            "type": "string"
          },
          "upload_url": {
            "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
            "type": "string"
          }
        },
        "required": ["created", "dispute_token", "token", "upload_status"],
        "type": "object"
      },
      "EmbedRequest": {
        "properties": {
          "css": {
            "description": "A publicly available URI, so the white-labeled card element can be styled with the client's branding.",
            "type": "string"
          },
          "expiration": {
            "description": "An RFC 3339 timestamp for when the request should expire. UTC time zone.\n\nIf no timezone is specified, UTC will be used. If payload does not contain an expiration, the request will never expire.\n\nUsing an `expiration` reduces the risk of a [replay attack](https://en.wikipedia.org/wiki/Replay_attack). Without supplying the `expiration`, in the event that a malicious user gets a copy of your request in transit, they will be able to obtain the response data indefinitely.\n",
            "format": "date-time",
            "type": "string"
          },
          "target_origin": {
            "description": "Required if you want to post the element clicked to the parent iframe.\n\nIf you supply this param, you can also capture click events in the parent iframe by adding an event listener.\n",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for the card to be displayed.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object"
      },
      "Error": {
        "properties": {
          "debugging_request_id": {
            "description": "Identifier to help debug an error.",
            "format": "uuid",
            "type": "string"
          },
          "message": {
            "description": "Explanation of error response.",
            "type": "string"
          }
        },
        "required": ["debugging_request_id", "message"],
        "type": "object"
      },
      "Event": {
        "description": "A single event that affects the transaction state and lifecycle.",
        "properties": {
          "created": {
            "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
            "format": "date-time",
            "type": "string"
          },
          "event_type": {
            "description": "Event types:\n* `account_holder.created` - Notification that a new account holder has been created and was not rejected.\n* `account_holder.updated` - Notification that an account holder was updated.\n* `account_holder.verification` - Notification than an account holder's identity verification is complete.\n* `card.created` - Notification that a card has been created.\n* `card.renewed` - Notification that a card has been renewed.\n* `card.shipped` - Physical card shipment notification. See https://docs.lithic.com/docs/cards#physical-card-shipped-webhook.\n* `card_transaction.updated` - Transaction Lifecycle webhook. See https://docs.lithic.com/docs/transaction-webhooks.\n* `dispute.updated` - A dispute has been updated.\n* `digital_wallet.tokenization_approval_request` - Card network's request to Lithic to activate a digital wallet token.\n* `digital_wallet.tokenization_result` - Notification of the end result of a tokenization, whether successful or failed.\n* `digital_wallet.tokenization_two_factor_authentication_code` - A code to be passed to an end user to complete digital wallet authentication. See https://docs.lithic.com/docs/tokenization-control#digital-wallet-tokenization-auth-code.\n",
            "enum": [
              "account_holder.created",
              "account_holder.updated",
              "account_holder.verification",
              "balance.updated",
              "card.created",
              "card.renewed",
              "card.shipped",
              "card_transaction.updated",
              "digital_wallet.tokenization_approval_request",
              "digital_wallet.tokenization_result",
              "digital_wallet.tokenization_two_factor_authentication_code",
              "dispute.updated",
              "dispute_evidence.upload_failed",
              "payment_transaction.created",
              "payment_transaction.updated",
              "three_ds_authentication.created",
              "transfer_transaction.created"
            ],
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "token": {
            "description": "Globally unique identifier.",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
            "type": "string"
          }
        },
        "required": ["created", "event_type", "payload", "token"],
        "type": "object"
      },
      "EventSubscription": {
        "description": "A subscription to specific event types.",
        "properties": {
          "description": {
            "description": "A description of the subscription.",
            "type": "string"
          },
          "disabled": {
            "description": "Whether the subscription is disabled.",
            "type": "boolean"
          },
          "event_types": {
            "items": {
              "enum": [
                "account_holder.created",
                "account_holder.updated",
                "account_holder.verification",
                "balance.updated",
                "card.created",
                "card.renewed",
                "card.shipped",
                "card_transaction.updated",
                "digital_wallet.tokenization_approval_request",
                "digital_wallet.tokenization_result",
                "digital_wallet.tokenization_two_factor_authentication_code",
                "dispute.updated",
                "dispute_evidence.upload_failed",
                "payment_transaction.created",
                "payment_transaction.updated",
                "three_ds_authentication.created",
                "transfer_transaction.created"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "description": "Globally unique identifier.",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": ["description", "disabled", "token", "url"],
        "type": "object"
      },
      "ExternalBankAccountAddress": {
        "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
        "properties": {
          "address1": {
            "maxLength": 40,
            "minLength": 1,
            "title": "Address1",
            "type": "string"
          },
          "address2": {
            "maxLength": 40,
            "minLength": 1,
            "title": "Address2",
            "type": "string"
          },
          "city": {
            "maxLength": 40,
            "minLength": 1,
            "title": "City",
            "type": "string"
          },
          "country": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^[A-Z]{3}$",
            "title": "Country",
            "type": "string"
          },
          "postal_code": {
            "maxLength": 10,
            "minLength": 5,
            "pattern": "^[0-9]{5}(-[0-9]{4})?$",
            "title": "Postal Code",
            "type": "string"
          },
          "state": {
            "maxLength": 2,
            "minLength": 2,
            "title": "State",
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "postal_code", "state"],
        "title": "Address",
        "type": "object"
      },
      "FinancialAccount": {
        "description": "Financial Account",
        "properties": {
          "account_number": {
            "description": "Account number for your Lithic-assigned bank account number, if applicable.",
            "type": "string"
          },
          "created": {
            "description": "Date and time for when the financial account was first created.",
            "format": "date-time",
            "type": "string"
          },
          "nickname": {
            "description": "User-defined nickname for the financial account.",
            "type": "string"
          },
          "routing_number": {
            "description": "Routing number for your Lithic-assigned bank account number, if applicable.",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for the financial account.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Type of financial account",
            "enum": ["ISSUING", "OPERATING", "RESERVE"],
            "type": "string"
          },
          "updated": {
            "description": "Date and time for when the financial account was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["created", "token", "type", "updated"],
        "type": "object"
      },
      "FinancialEvent": {
        "properties": {
          "amount": {
            "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
            "type": "integer"
          },
          "created": {
            "description": "Date and time when the financial event occurred. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "result": {
            "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
            "enum": ["APPROVED", "DECLINED"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
            "enum": [
              "ACH_INSUFFICIENT_FUNDS",
              "ACH_ORIGINATION_PENDING",
              "ACH_ORIGINATION_RELEASED",
              "ACH_RECEIPT_PENDING",
              "ACH_RECEIPT_RELEASED",
              "ACH_RETURN",
              "AUTHORIZATION",
              "AUTHORIZATION_ADVICE",
              "AUTHORIZATION_EXPIRY",
              "AUTHORIZATION_REVERSAL",
              "BALANCE_INQUIRY",
              "CLEARING",
              "CORRECTION_CREDIT",
              "CORRECTION_DEBIT",
              "CREDIT_AUTHORIZATION",
              "CREDIT_AUTHORIZATION_ADVICE",
              "FINANCIAL_AUTHORIZATION",
              "FINANCIAL_CREDIT_AUTHORIZATION",
              "RETURN",
              "RETURN_REVERSAL",
              "TRANSFER",
              "TRANSFER_INSUFFICIENT_FUNDS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FinancialEventType": {
        "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
        "enum": [
          "ACH_INSUFFICIENT_FUNDS",
          "ACH_ORIGINATION_PENDING",
          "ACH_ORIGINATION_RELEASED",
          "ACH_RECEIPT_PENDING",
          "ACH_RECEIPT_RELEASED",
          "ACH_RETURN",
          "AUTHORIZATION",
          "AUTHORIZATION_ADVICE",
          "AUTHORIZATION_EXPIRY",
          "AUTHORIZATION_REVERSAL",
          "BALANCE_INQUIRY",
          "CLEARING",
          "CORRECTION_CREDIT",
          "CORRECTION_DEBIT",
          "CREDIT_AUTHORIZATION",
          "CREDIT_AUTHORIZATION_ADVICE",
          "FINANCIAL_AUTHORIZATION",
          "FINANCIAL_CREDIT_AUTHORIZATION",
          "RETURN",
          "RETURN_REVERSAL",
          "TRANSFER",
          "TRANSFER_INSUFFICIENT_FUNDS"
        ],
        "type": "string"
      },
      "FinancialTransaction": {
        "properties": {
          "category": {
            "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
            "enum": ["ACH", "CARD", "TRANSFER"],
            "type": "string"
          },
          "created": {
            "description": "Date and time when the financial transaction first occurred. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
            "type": "string"
          },
          "descriptor": {
            "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
            "type": "string"
          },
          "events": {
            "description": "A list of all financial events that have modified this financial transaction.",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                  "type": "integer"
                },
                "created": {
                  "description": "Date and time when the financial event occurred. UTC time zone.",
                  "format": "date-time",
                  "type": "string"
                },
                "result": {
                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                  "enum": ["APPROVED", "DECLINED"],
                  "type": "string"
                },
                "token": {
                  "description": "Globally unique identifier.",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                  "enum": [
                    "ACH_INSUFFICIENT_FUNDS",
                    "ACH_ORIGINATION_PENDING",
                    "ACH_ORIGINATION_RELEASED",
                    "ACH_RECEIPT_PENDING",
                    "ACH_RECEIPT_RELEASED",
                    "ACH_RETURN",
                    "AUTHORIZATION",
                    "AUTHORIZATION_ADVICE",
                    "AUTHORIZATION_EXPIRY",
                    "AUTHORIZATION_REVERSAL",
                    "BALANCE_INQUIRY",
                    "CLEARING",
                    "CORRECTION_CREDIT",
                    "CORRECTION_DEBIT",
                    "CREDIT_AUTHORIZATION",
                    "CREDIT_AUTHORIZATION_ADVICE",
                    "FINANCIAL_AUTHORIZATION",
                    "FINANCIAL_CREDIT_AUTHORIZATION",
                    "RETURN",
                    "RETURN_REVERSAL",
                    "TRANSFER",
                    "TRANSFER_INSUFFICIENT_FUNDS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "pending_amount": {
            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
            "type": "integer"
          },
          "result": {
            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
            "enum": ["APPROVED", "DECLINED"],
            "type": "string"
          },
          "settled_amount": {
            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
            "type": "integer"
          },
          "status": {
            "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "updated": {
            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "category",
          "created",
          "currency",
          "descriptor",
          "events",
          "pending_amount",
          "result",
          "settled_amount",
          "status",
          "token",
          "updated"
        ],
        "type": "object"
      },
      "FundingAccount": {
        "properties": {
          "account_name": {
            "description": "Account name identifying the funding source. This may be `null`.",
            "type": "string"
          },
          "created": {
            "description": "An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "last_four": {
            "description": "The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "nickname": {
            "description": "The nickname given to the `FundingAccount` or `null` if it has no nickname.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "description": "State of funding source.\n\nFunding source states:\n* `ENABLED` - The funding account is available to use for card creation and transactions.\n* `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.\n* `DELETED` - The founding account has been deleted.\n",
            "enum": ["DELETED", "ENABLED", "PENDING"],
            "type": "string"
          },
          "token": {
            "description": "A globally unique identifier for this FundingAccount.",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Types of funding source:\n* `DEPOSITORY_CHECKING` - Bank checking account.\n* `DEPOSITORY_SAVINGS` - Bank savings account.\n",
            "enum": ["DEPOSITORY_CHECKING", "DEPOSITORY_SAVINGS"],
            "type": "string"
          }
        },
        "required": ["created", "last_four", "state", "token", "type"],
        "type": "object"
      },
      "Individual": {
        "properties": {
          "address": {
            "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
            "properties": {
              "address1": {
                "description": "Valid deliverable address (no PO boxes).",
                "example": "123 Old Forest Way",
                "type": "string"
              },
              "address2": {
                "description": "Unit or apartment number (if applicable).",
                "type": "string"
              },
              "city": {
                "description": "Name of city.",
                "example": "Omaha",
                "type": "string"
              },
              "country": {
                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                "example": "USA",
                "type": "string"
              },
              "postal_code": {
                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                "example": "68022",
                "type": "string"
              },
              "state": {
                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                "example": "NE",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "type": "object"
          },
          "dob": {
            "description": "Individual's date of birth, as an RFC 3339 date.",
            "example": "1991-03-08 08:00:00",
            "type": "string"
          },
          "email": {
            "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
            "example": "tom@middle-earth.com",
            "type": "string"
          },
          "first_name": {
            "description": "Individual's first name, as it appears on government-issued identity documents.",
            "example": "Tom",
            "type": "string"
          },
          "government_id": {
            "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
            "example": "111-23-1412",
            "type": "string"
          },
          "last_name": {
            "description": "Individual's last name, as it appears on government-issued identity documents.",
            "example": "Bombadil",
            "type": "string"
          },
          "phone_number": {
            "description": "Individual's phone number, entered in E.164 format.\n",
            "example": "+12124007676",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Kyb": {
        "properties": {
          "beneficial_owner_entities": {
            "description": "List of all entities with >25% ownership in the company. If no entity or individual owns >25% of the company, and the largest shareholder is an entity, please identify them in this field. See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background. If no business owner is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_individuals` must be populated. on entities that should be included.\n",
            "items": {
              "properties": {
                "address": {
                  "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                  "properties": {
                    "address1": {
                      "description": "Valid deliverable address (no PO boxes).",
                      "example": "123 Old Forest Way",
                      "type": "string"
                    },
                    "address2": {
                      "description": "Unit or apartment number (if applicable).",
                      "type": "string"
                    },
                    "city": {
                      "description": "Name of city.",
                      "example": "Omaha",
                      "type": "string"
                    },
                    "country": {
                      "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                      "example": "USA",
                      "type": "string"
                    },
                    "postal_code": {
                      "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                      "example": "68022",
                      "type": "string"
                    },
                    "state": {
                      "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                      "example": "NE",
                      "type": "string"
                    }
                  },
                  "required": ["address1", "city", "country", "postal_code", "state"],
                  "type": "object"
                },
                "dba_business_name": {
                  "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                  "type": "string"
                },
                "government_id": {
                  "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                  "example": "114-123-1513",
                  "type": "string"
                },
                "legal_business_name": {
                  "description": "Legal (formal) business name.",
                  "example": "Acme, Inc.",
                  "type": "string"
                },
                "parent_company": {
                  "description": "Parent company name (if applicable).",
                  "type": "string"
                },
                "phone_numbers": {
                  "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                  "items": {
                    "description": "Business phone number, entered in E.164 format.",
                    "example": "+12124007676",
                    "type": "string"
                  },
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
              "type": "object"
            },
            "minItems": 0,
            "type": "array"
          },
          "beneficial_owner_individuals": {
            "description": "List of all individuals with >25% ownership in the company. If no entity or individual owns >25% of the company,\nand the largest shareholder is an individual, please identify them in this field.\nSee [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background on individuals that should be included. If no individual is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_entities` must be populated.\n",
            "items": {
              "allOf": [
                {
                  "properties": {
                    "address": {
                      "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                      "properties": {
                        "address1": {
                          "description": "Valid deliverable address (no PO boxes).",
                          "example": "123 Old Forest Way",
                          "type": "string"
                        },
                        "address2": {
                          "description": "Unit or apartment number (if applicable).",
                          "type": "string"
                        },
                        "city": {
                          "description": "Name of city.",
                          "example": "Omaha",
                          "type": "string"
                        },
                        "country": {
                          "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                          "example": "USA",
                          "type": "string"
                        },
                        "postal_code": {
                          "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                          "example": "68022",
                          "type": "string"
                        },
                        "state": {
                          "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                          "example": "NE",
                          "type": "string"
                        }
                      },
                      "required": ["address1", "city", "country", "postal_code", "state"],
                      "type": "object"
                    },
                    "dob": {
                      "description": "Individual's date of birth, as an RFC 3339 date.",
                      "example": "1991-03-08 08:00:00",
                      "type": "string"
                    },
                    "email": {
                      "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                      "example": "tom@middle-earth.com",
                      "type": "string"
                    },
                    "first_name": {
                      "description": "Individual's first name, as it appears on government-issued identity documents.",
                      "example": "Tom",
                      "type": "string"
                    },
                    "government_id": {
                      "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                      "example": "111-23-1412",
                      "type": "string"
                    },
                    "last_name": {
                      "description": "Individual's last name, as it appears on government-issued identity documents.",
                      "example": "Bombadil",
                      "type": "string"
                    },
                    "phone_number": {
                      "description": "Individual's phone number, entered in E.164 format.\n",
                      "example": "+12124007676",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "required": ["address", "dob", "email", "first_name", "government_id", "last_name"],
                  "type": "object"
                }
              ],
              "description": "Individuals associated with a KYB application. Phone number is optional."
            },
            "minItems": 0,
            "type": "array"
          },
          "business_entity": {
            "properties": {
              "address": {
                "description": "Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.\n",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dba_business_name": {
                "description": "Any name that the business operates under that is not its legal business name (if applicable).",
                "type": "string"
              },
              "government_id": {
                "description": "Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.\n",
                "example": "114-123-1513",
                "type": "string"
              },
              "legal_business_name": {
                "description": "Legal (formal) business name.",
                "example": "Acme, Inc.",
                "type": "string"
              },
              "parent_company": {
                "description": "Parent company name (if applicable).",
                "type": "string"
              },
              "phone_numbers": {
                "description": "One or more of the business's phone number(s), entered as a list in E.164 format.",
                "items": {
                  "description": "Business phone number, entered in E.164 format.",
                  "example": "+12124007676",
                  "type": "string"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "required": ["address", "government_id", "legal_business_name", "phone_numbers"],
            "type": "object",
            "description": "Information for business for which the account is being opened and KYB is being run."
          },
          "control_person": {
            "allOf": [
              {
                "properties": {
                  "address": {
                    "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                    "properties": {
                      "address1": {
                        "description": "Valid deliverable address (no PO boxes).",
                        "example": "123 Old Forest Way",
                        "type": "string"
                      },
                      "address2": {
                        "description": "Unit or apartment number (if applicable).",
                        "type": "string"
                      },
                      "city": {
                        "description": "Name of city.",
                        "example": "Omaha",
                        "type": "string"
                      },
                      "country": {
                        "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                        "example": "USA",
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                        "example": "68022",
                        "type": "string"
                      },
                      "state": {
                        "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                        "example": "NE",
                        "type": "string"
                      }
                    },
                    "required": ["address1", "city", "country", "postal_code", "state"],
                    "type": "object"
                  },
                  "dob": {
                    "description": "Individual's date of birth, as an RFC 3339 date.",
                    "example": "1991-03-08 08:00:00",
                    "type": "string"
                  },
                  "email": {
                    "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                    "example": "tom@middle-earth.com",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "Individual's first name, as it appears on government-issued identity documents.",
                    "example": "Tom",
                    "type": "string"
                  },
                  "government_id": {
                    "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                    "example": "111-23-1412",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Individual's last name, as it appears on government-issued identity documents.",
                    "example": "Bombadil",
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "Individual's phone number, entered in E.164 format.\n",
                    "example": "+12124007676",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "required": ["address", "dob", "email", "first_name", "government_id", "last_name"],
                "type": "object"
              }
            ],
            "description": "Individuals associated with a KYB application. Phone number is optional."
          },
          "external_id": {
            "description": "A user provided id that can be used to link an account holder with an external system",
            "type": "string"
          },
          "kyb_passed_timestamp": {
            "description": "An RFC 3339 timestamp indicating when precomputed KYC was completed on the business with a pass result.\n\nThis field is required only if workflow type is `KYB_BYO`.\n",
            "example": "2022-03-08 08:00:00",
            "type": "string"
          },
          "nature_of_business": {
            "description": "Short description of the company's line of business (i.e., what does the company do?).",
            "example": "Software company selling solutions to the restaurant industry",
            "type": "string"
          },
          "tos_timestamp": {
            "description": "An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.",
            "example": "2022-03-08 08:00:00",
            "type": "string"
          },
          "website_url": {
            "description": "Company website URL.",
            "example": "www.mybusiness.com",
            "type": "string"
          },
          "workflow": {
            "description": "Specifies the type of KYB workflow to run.",
            "enum": ["KYB_BASIC", "KYB_BYO"],
            "type": "string"
          }
        },
        "required": [
          "beneficial_owner_entities",
          "beneficial_owner_individuals",
          "business_entity",
          "control_person",
          "nature_of_business",
          "tos_timestamp",
          "workflow"
        ],
        "type": "object"
      },
      "KybIndividual": {
        "allOf": [
          {
            "properties": {
              "address": {
                "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dob": {
                "description": "Individual's date of birth, as an RFC 3339 date.",
                "example": "1991-03-08 08:00:00",
                "type": "string"
              },
              "email": {
                "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                "example": "tom@middle-earth.com",
                "type": "string"
              },
              "first_name": {
                "description": "Individual's first name, as it appears on government-issued identity documents.",
                "example": "Tom",
                "type": "string"
              },
              "government_id": {
                "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                "example": "111-23-1412",
                "type": "string"
              },
              "last_name": {
                "description": "Individual's last name, as it appears on government-issued identity documents.",
                "example": "Bombadil",
                "type": "string"
              },
              "phone_number": {
                "description": "Individual's phone number, entered in E.164 format.\n",
                "example": "+12124007676",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "required": ["address", "dob", "email", "first_name", "government_id", "last_name"],
            "type": "object"
          }
        ],
        "description": "Individuals associated with a KYB application. Phone number is optional."
      },
      "Kyc": {
        "properties": {
          "external_id": {
            "description": "A user provided id that can be used to link an account holder with an external system",
            "type": "string"
          },
          "individual": {
            "description": "Information on individual for whom the account is being opened and KYC is being run.",
            "allOf": [
              {
                "properties": {
                  "address": {
                    "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                    "properties": {
                      "address1": {
                        "description": "Valid deliverable address (no PO boxes).",
                        "example": "123 Old Forest Way",
                        "type": "string"
                      },
                      "address2": {
                        "description": "Unit or apartment number (if applicable).",
                        "type": "string"
                      },
                      "city": {
                        "description": "Name of city.",
                        "example": "Omaha",
                        "type": "string"
                      },
                      "country": {
                        "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                        "example": "USA",
                        "type": "string"
                      },
                      "postal_code": {
                        "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                        "example": "68022",
                        "type": "string"
                      },
                      "state": {
                        "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                        "example": "NE",
                        "type": "string"
                      }
                    },
                    "required": ["address1", "city", "country", "postal_code", "state"],
                    "type": "object"
                  },
                  "dob": {
                    "description": "Individual's date of birth, as an RFC 3339 date.",
                    "example": "1991-03-08 08:00:00",
                    "type": "string"
                  },
                  "email": {
                    "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                    "example": "tom@middle-earth.com",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "Individual's first name, as it appears on government-issued identity documents.",
                    "example": "Tom",
                    "type": "string"
                  },
                  "government_id": {
                    "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                    "example": "111-23-1412",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Individual's last name, as it appears on government-issued identity documents.",
                    "example": "Bombadil",
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "Individual's phone number, entered in E.164 format.\n",
                    "example": "+12124007676",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "required": [
                  "address",
                  "dob",
                  "email",
                  "first_name",
                  "government_id",
                  "last_name",
                  "phone_number"
                ],
                "type": "object"
              }
            ]
          },
          "kyc_passed_timestamp": {
            "description": "An RFC 3339 timestamp indicating when precomputed KYC was completed on the individual with a pass result.\n\nThis field is required only if workflow type is `KYC_BYO`.\n",
            "type": "string"
          },
          "tos_timestamp": {
            "description": "An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.",
            "type": "string"
          },
          "workflow": {
            "description": "Specifies the type of KYC workflow to run.",
            "enum": ["KYC_ADVANCED", "KYC_BASIC", "KYC_BYO"],
            "type": "string"
          }
        },
        "required": ["individual", "tos_timestamp", "workflow"],
        "type": "object"
      },
      "KycExempt": {
        "properties": {
          "address": {
            "description": "KYC Exempt user's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
            "properties": {
              "address1": {
                "description": "Valid deliverable address (no PO boxes).",
                "example": "123 Old Forest Way",
                "type": "string"
              },
              "address2": {
                "description": "Unit or apartment number (if applicable).",
                "type": "string"
              },
              "city": {
                "description": "Name of city.",
                "example": "Omaha",
                "type": "string"
              },
              "country": {
                "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                "example": "USA",
                "type": "string"
              },
              "postal_code": {
                "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                "example": "68022",
                "type": "string"
              },
              "state": {
                "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                "example": "NE",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "type": "object"
          },
          "business_account_token": {
            "description": "Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.",
            "type": "string"
          },
          "email": {
            "description": "The KYC Exempt user's email",
            "type": "string"
          },
          "external_id": {
            "description": "A user provided id that can be used to link an account holder with an external system",
            "type": "string"
          },
          "first_name": {
            "description": "The KYC Exempt user's first name",
            "type": "string"
          },
          "kyc_exemption_type": {
            "description": "Specifies the type of KYC Exempt user",
            "enum": ["AUTHORIZED_USER", "PREPAID_CARD_USER"],
            "type": "string"
          },
          "last_name": {
            "description": "The KYC Exempt user's last name",
            "type": "string"
          },
          "phone_number": {
            "description": "The KYC Exempt user's phone number",
            "type": "string"
          },
          "workflow": {
            "description": "Specifies the workflow type. This must be 'KYC_EXEMPT'",
            "enum": ["KYC_EXEMPT"],
            "type": "string"
          }
        },
        "required": ["email", "first_name", "kyc_exemption_type", "last_name", "phone_number", "workflow"],
        "type": "object"
      },
      "KycIndividual": {
        "allOf": [
          {
            "properties": {
              "address": {
                "description": "Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.\n",
                "properties": {
                  "address1": {
                    "description": "Valid deliverable address (no PO boxes).",
                    "example": "123 Old Forest Way",
                    "type": "string"
                  },
                  "address2": {
                    "description": "Unit or apartment number (if applicable).",
                    "type": "string"
                  },
                  "city": {
                    "description": "Name of city.",
                    "example": "Omaha",
                    "type": "string"
                  },
                  "country": {
                    "description": "Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.\n",
                    "example": "USA",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.\n",
                    "example": "68022",
                    "type": "string"
                  },
                  "state": {
                    "description": "Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.\n",
                    "example": "NE",
                    "type": "string"
                  }
                },
                "required": ["address1", "city", "country", "postal_code", "state"],
                "type": "object"
              },
              "dob": {
                "description": "Individual's date of birth, as an RFC 3339 date.",
                "example": "1991-03-08 08:00:00",
                "type": "string"
              },
              "email": {
                "description": "Individual's email address.\nIf utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.\n",
                "example": "tom@middle-earth.com",
                "type": "string"
              },
              "first_name": {
                "description": "Individual's first name, as it appears on government-issued identity documents.",
                "example": "Tom",
                "type": "string"
              },
              "government_id": {
                "description": "Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens\n",
                "example": "111-23-1412",
                "type": "string"
              },
              "last_name": {
                "description": "Individual's last name, as it appears on government-issued identity documents.",
                "example": "Bombadil",
                "type": "string"
              },
              "phone_number": {
                "description": "Individual's phone number, entered in E.164 format.\n",
                "example": "+12124007676",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "required": [
              "address",
              "dob",
              "email",
              "first_name",
              "government_id",
              "last_name",
              "phone_number"
            ],
            "type": "object"
          }
        ],
        "description": "Individuals associated with a KYC application."
      },
      "Merchant": {
        "properties": {
          "acceptor_id": {
            "description": "Unique identifier to identify the payment card acceptor.",
            "example": "333301802529120",
            "type": "string"
          },
          "city": {
            "description": "City of card acceptor.",
            "example": "NEW YORK",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "country": {
            "description": "Uppercase country of card acceptor (see ISO 8583 specs).",
            "example": "USA",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "descriptor": {
            "description": "Short description of card acceptor.",
            "example": "COFFEE SHOP",
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "mcc": {
            "description": "Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.\n",
            "example": "5812",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "state": {
            "description": "Geographic state of card acceptor (see ISO 8583 specs).",
            "example": "NY",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MessageAttempt": {
        "description": "A subscription to specific event types.",
        "properties": {
          "created": {
            "description": "An RFC 3339 timestamp for when the event was created. UTC time zone.\n\nIf no timezone is specified, UTC will be used.\n",
            "format": "date-time",
            "type": "string"
          },
          "event_subscription_token": {
            "description": "Globally unique identifier.",
            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga1",
            "type": "string"
          },
          "event_token": {
            "description": "Globally unique identifier.",
            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga1",
            "type": "string"
          },
          "response": {
            "description": "The response body from the event subscription's URL.",
            "type": "string"
          },
          "response_status_code": {
            "description": "The response status code from the event subscription's URL.",
            "type": "integer"
          },
          "status": {
            "description": "The status of the event attempt.",
            "enum": ["FAILED", "PENDING", "SENDING", "SUCCESS"],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "created",
          "event_subscription_token",
          "event_token",
          "response",
          "response_status_code",
          "status",
          "token",
          "url"
        ],
        "type": "object"
      },
      "MicroDepositVerificationDetails": {
        "properties": {
          "micro_deposits": {
            "items": {
              "type": "integer"
            },
            "title": "Micro Deposits",
            "type": "array"
          }
        },
        "required": ["micro_deposits"],
        "title": "MicroDepositVerificationDetails",
        "type": "object"
      },
      "OwnerType": {
        "enum": ["BUSINESS", "INDIVIDUAL"],
        "title": "OwnerType",
        "type": "string"
      },
      "PaymentMethodAttributes": {
        "properties": {
          "company_id": {
            "title": "Company ID",
            "type": "string"
          },
          "receipt_routing_number": {
            "title": "Company ID",
            "type": "string"
          },
          "retries": {
            "title": "Retries",
            "type": "integer"
          },
          "return_reason_code": {
            "title": "Return Reason Code",
            "type": "string"
          },
          "sec_code": {
            "enum": ["CCD", "PPD", "WEB"],
            "title": "SEC Code",
            "type": "string"
          }
        },
        "required": ["sec_code"],
        "title": "PaymentMethodAttributes",
        "type": "object"
      },
      "PaymentResponse": {
        "allOf": [
          {
            "properties": {
              "category": {
                "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                "enum": ["ACH", "CARD", "TRANSFER"],
                "type": "string"
              },
              "created": {
                "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                "format": "date-time",
                "type": "string"
              },
              "currency": {
                "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                "type": "string"
              },
              "descriptor": {
                "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                "type": "string"
              },
              "events": {
                "description": "A list of all financial events that have modified this financial transaction.",
                "items": {
                  "properties": {
                    "amount": {
                      "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                      "type": "integer"
                    },
                    "created": {
                      "description": "Date and time when the financial event occurred. UTC time zone.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "result": {
                      "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                      "enum": ["APPROVED", "DECLINED"],
                      "type": "string"
                    },
                    "token": {
                      "description": "Globally unique identifier.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": {
                      "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                      "enum": [
                        "ACH_INSUFFICIENT_FUNDS",
                        "ACH_ORIGINATION_PENDING",
                        "ACH_ORIGINATION_RELEASED",
                        "ACH_RECEIPT_PENDING",
                        "ACH_RECEIPT_RELEASED",
                        "ACH_RETURN",
                        "AUTHORIZATION",
                        "AUTHORIZATION_ADVICE",
                        "AUTHORIZATION_EXPIRY",
                        "AUTHORIZATION_REVERSAL",
                        "BALANCE_INQUIRY",
                        "CLEARING",
                        "CORRECTION_CREDIT",
                        "CORRECTION_DEBIT",
                        "CREDIT_AUTHORIZATION",
                        "CREDIT_AUTHORIZATION_ADVICE",
                        "FINANCIAL_AUTHORIZATION",
                        "FINANCIAL_CREDIT_AUTHORIZATION",
                        "RETURN",
                        "RETURN_REVERSAL",
                        "TRANSFER",
                        "TRANSFER_INSUFFICIENT_FUNDS"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "pending_amount": {
                "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                "type": "integer"
              },
              "result": {
                "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                "enum": ["APPROVED", "DECLINED"],
                "type": "string"
              },
              "settled_amount": {
                "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                "type": "integer"
              },
              "status": {
                "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                "type": "string"
              },
              "token": {
                "description": "Globally unique identifier.",
                "format": "uuid",
                "type": "string"
              },
              "updated": {
                "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                "format": "date-time",
                "type": "string"
              }
            },
            "required": [
              "category",
              "created",
              "currency",
              "descriptor",
              "events",
              "pending_amount",
              "result",
              "settled_amount",
              "status",
              "token",
              "updated"
            ],
            "type": "object"
          },
          {
            "properties": {
              "direction": {
                "enum": ["CREDIT", "DEBIT"],
                "title": "ACH Direction",
                "type": "string"
              },
              "external_bank_account_token": {
                "format": "uuid",
                "title": "External Bank Account Token",
                "type": "string"
              },
              "method": {
                "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                "title": "Payment Method",
                "type": "string"
              },
              "method_attributes": {
                "properties": {
                  "company_id": {
                    "title": "Company ID",
                    "type": "string"
                  },
                  "receipt_routing_number": {
                    "title": "Company ID",
                    "type": "string"
                  },
                  "retries": {
                    "title": "Retries",
                    "type": "integer"
                  },
                  "return_reason_code": {
                    "title": "Return Reason Code",
                    "type": "string"
                  },
                  "sec_code": {
                    "enum": ["CCD", "PPD", "WEB"],
                    "title": "SEC Code",
                    "type": "string"
                  }
                },
                "required": ["sec_code"],
                "title": "PaymentMethodAttributes",
                "type": "object"
              },
              "source": {
                "enum": ["CUSTOMER", "LITHIC"],
                "title": "Payment Message Source",
                "type": "string"
              },
              "user_defined_id": {
                "maxLength": 512,
                "title": "User Defined Id",
                "type": "string"
              }
            },
            "required": ["direction", "method", "method_attributes", "source"],
            "type": "object"
          }
        ],
        "title": "PaymentResponse"
      },
      "PlaidCreateBankAccountApiRequest": {
        "properties": {
          "account_token": {
            "format": "uuid",
            "title": "Account Token",
            "type": "string"
          },
          "company_id": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]*$",
            "title": "Company Id",
            "type": "string"
          },
          "dob": {
            "description": "Date of Birth of the Individual that owns the external bank account",
            "format": "date",
            "title": "Date of Birth",
            "type": "string"
          },
          "doing_business_as": {
            "title": "Doing Business As",
            "type": "string"
          },
          "owner": {
            "maxLength": 22,
            "minLength": 1,
            "pattern": "^[!-~ ]*$",
            "title": "Owner",
            "type": "string"
          },
          "owner_type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "title": "OwnerType",
            "type": "string"
          },
          "processor_token": {
            "minLength": 1,
            "title": "Processor Token",
            "type": "string"
          },
          "user_defined_id": {
            "title": "User Defined ID",
            "type": "string"
          },
          "verification_method": {
            "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
            "title": "VerificationMethod",
            "type": "string"
          }
        },
        "required": ["owner", "owner_type", "processor_token", "verification_method"],
        "title": "PlaidCreateBankAccountApiRequest",
        "type": "object"
      },
      "PostPaymentResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "properties": {
                  "category": {
                    "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                    "enum": ["ACH", "CARD", "TRANSFER"],
                    "type": "string"
                  },
                  "created": {
                    "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "currency": {
                    "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                    "type": "string"
                  },
                  "descriptor": {
                    "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                    "type": "string"
                  },
                  "events": {
                    "description": "A list of all financial events that have modified this financial transaction.",
                    "items": {
                      "properties": {
                        "amount": {
                          "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                          "type": "integer"
                        },
                        "created": {
                          "description": "Date and time when the financial event occurred. UTC time zone.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "result": {
                          "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                          "enum": ["APPROVED", "DECLINED"],
                          "type": "string"
                        },
                        "token": {
                          "description": "Globally unique identifier.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                          "enum": [
                            "ACH_INSUFFICIENT_FUNDS",
                            "ACH_ORIGINATION_PENDING",
                            "ACH_ORIGINATION_RELEASED",
                            "ACH_RECEIPT_PENDING",
                            "ACH_RECEIPT_RELEASED",
                            "ACH_RETURN",
                            "AUTHORIZATION",
                            "AUTHORIZATION_ADVICE",
                            "AUTHORIZATION_EXPIRY",
                            "AUTHORIZATION_REVERSAL",
                            "BALANCE_INQUIRY",
                            "CLEARING",
                            "CORRECTION_CREDIT",
                            "CORRECTION_DEBIT",
                            "CREDIT_AUTHORIZATION",
                            "CREDIT_AUTHORIZATION_ADVICE",
                            "FINANCIAL_AUTHORIZATION",
                            "FINANCIAL_CREDIT_AUTHORIZATION",
                            "RETURN",
                            "RETURN_REVERSAL",
                            "TRANSFER",
                            "TRANSFER_INSUFFICIENT_FUNDS"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "pending_amount": {
                    "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                    "type": "integer"
                  },
                  "result": {
                    "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                    "enum": ["APPROVED", "DECLINED"],
                    "type": "string"
                  },
                  "settled_amount": {
                    "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                    "type": "integer"
                  },
                  "status": {
                    "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                    "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                    "type": "string"
                  },
                  "token": {
                    "description": "Globally unique identifier.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "updated": {
                    "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "category",
                  "created",
                  "currency",
                  "descriptor",
                  "events",
                  "pending_amount",
                  "result",
                  "settled_amount",
                  "status",
                  "token",
                  "updated"
                ],
                "type": "object"
              },
              {
                "properties": {
                  "direction": {
                    "enum": ["CREDIT", "DEBIT"],
                    "title": "ACH Direction",
                    "type": "string"
                  },
                  "external_bank_account_token": {
                    "format": "uuid",
                    "title": "External Bank Account Token",
                    "type": "string"
                  },
                  "method": {
                    "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                    "title": "Payment Method",
                    "type": "string"
                  },
                  "method_attributes": {
                    "properties": {
                      "company_id": {
                        "title": "Company ID",
                        "type": "string"
                      },
                      "receipt_routing_number": {
                        "title": "Company ID",
                        "type": "string"
                      },
                      "retries": {
                        "title": "Retries",
                        "type": "integer"
                      },
                      "return_reason_code": {
                        "title": "Return Reason Code",
                        "type": "string"
                      },
                      "sec_code": {
                        "enum": ["CCD", "PPD", "WEB"],
                        "title": "SEC Code",
                        "type": "string"
                      }
                    },
                    "required": ["sec_code"],
                    "title": "PaymentMethodAttributes",
                    "type": "object"
                  },
                  "source": {
                    "enum": ["CUSTOMER", "LITHIC"],
                    "title": "Payment Message Source",
                    "type": "string"
                  },
                  "user_defined_id": {
                    "maxLength": 512,
                    "title": "User Defined Id",
                    "type": "string"
                  }
                },
                "required": ["direction", "method", "method_attributes", "source"],
                "type": "object"
              }
            ],
            "title": "PaymentResponse"
          },
          {
            "properties": {
              "balance": {
                "description": "Balance of a Financial Account",
                "properties": {
                  "available_amount": {
                    "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                    "type": "integer"
                  },
                  "created": {
                    "description": "Date and time for when the balance was first created.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "currency": {
                    "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                    "type": "string"
                  },
                  "financial_account_token": {
                    "description": "Globally unique identifier for the financial account that holds this balance.",
                    "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "format": "uuid",
                    "type": "string"
                  },
                  "financial_account_type": {
                    "description": "Type of financial account.",
                    "enum": ["ISSUING", "OPERATING", "RESERVE"],
                    "type": "string"
                  },
                  "last_transaction_event_token": {
                    "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "last_transaction_token": {
                    "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "pending_amount": {
                    "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                    "type": "integer"
                  },
                  "total_amount": {
                    "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                    "type": "integer"
                  },
                  "updated": {
                    "description": "Date and time for when the balance was last updated.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "available_amount",
                  "created",
                  "currency",
                  "financial_account_token",
                  "financial_account_type",
                  "last_transaction_event_token",
                  "last_transaction_token",
                  "pending_amount",
                  "total_amount",
                  "updated"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "PostPaymentResponse"
      },
      "SettlementDetail": {
        "properties": {
          "account_token": {
            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
            "format": "uuid",
            "type": "string"
          },
          "card_program_token": {
            "description": "Globally unique identifier denoting the card program that the associated Transaction occurred on.",
            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
            "format": "uuid",
            "type": "string"
          },
          "card_token": {
            "description": "Globally unique identifier denoting the card that the associated Transaction occurred on.",
            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
            "format": "uuid",
            "type": "string"
          },
          "created": {
            "description": "Date and time when the transaction first occurred. UTC time zone.",
            "example": "2023-06-01T00:00:00",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "Three-digit alphabetic ISO 4217 code.",
            "example": "840",
            "maxLength": 3,
            "minLength": 3,
            "nullable": false,
            "type": "string"
          },
          "disputes_gross_amount": {
            "description": "The total gross amount of disputes settlements.",
            "example": 0,
            "type": "integer"
          },
          "event_tokens": {
            "description": "Globally unique identifiers denoting the Events associated with this settlement.",
            "example": ["e34a817f-119d-4976-9fb3-8b020b8bbec3"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "institution": {
            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
            "example": "00001",
            "type": "string"
          },
          "interchange_fee_extended_precision": {
            "description": "The total amount of interchange in six-digit extended precision.",
            "example": -70000,
            "type": "integer"
          },
          "interchange_gross_amount": {
            "description": "The total amount of interchange.",
            "example": -7,
            "type": "integer"
          },
          "network": {
            "description": "Card network where the transaction took place.",
            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
            "example": "MASTERCARD",
            "nullable": false,
            "type": "string"
          },
          "other_fees_details": {
            "description": "The total gross amount of other fees by type.",
            "properties": {
              "ISA": {
                "title": "ISA",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "other_fees_gross_amount": {
            "description": "Total amount of gross other fees outside of interchange.",
            "example": 0,
            "type": "integer"
          },
          "report_date": {
            "description": "Date of when the report was first generated.",
            "example": "2023-06-01",
            "type": "string"
          },
          "settlement_date": {
            "description": "Date of when money movement is triggered for the transaction.",
            "example": "2023-06-01",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier denoting the Settlement Detail.",
            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
            "format": "uuid",
            "type": "string"
          },
          "transaction_token": {
            "description": "Globally unique identifier denoting the associated Transaction object.",
            "example": "e34a817f-119d-4976-9fb3-8b020b8bbec3",
            "format": "uuid",
            "type": "string"
          },
          "transactions_gross_amount": {
            "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
            "example": 1900,
            "type": "integer"
          },
          "type": {
            "description": "The type of settlement record.",
            "enum": [
              "ADJUSTMENT",
              "ARBITRATION",
              "CHARGEBACK",
              "CLEARING",
              "FEE",
              "FINANCIAL",
              "NON-FINANCIAL",
              "PREARBITRATION",
              "REPRESENTMENT"
            ],
            "example": "CLEARING",
            "type": "string"
          },
          "updated": {
            "description": "Date and time when the transaction first occurred. UTC time zone.",
            "example": "2023-06-01T00:00:00",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "account_token",
          "card_program_token",
          "card_token",
          "created",
          "currency",
          "disputes_gross_amount",
          "event_tokens",
          "institution",
          "interchange_fee_extended_precision",
          "interchange_gross_amount",
          "network",
          "other_fees_details",
          "other_fees_gross_amount",
          "report_date",
          "settlement_date",
          "token",
          "transaction_token",
          "transactions_gross_amount",
          "type",
          "updated"
        ],
        "type": "object"
      },
      "SettlementReport": {
        "properties": {
          "created": {
            "description": "Date and time when the transaction first occurred. UTC time zone.",
            "example": "2023-06-01T00:00:00",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "Three-digit alphabetic ISO 4217 code.",
            "example": "840",
            "maxLength": 3,
            "minLength": 3,
            "nullable": false,
            "type": "string"
          },
          "details": {
            "items": {
              "nullable": true,
              "properties": {
                "disputes_gross_amount": {
                  "description": "The total gross amount of disputes settlements.",
                  "example": 0,
                  "type": "integer"
                },
                "institution": {
                  "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
                  "example": "00001",
                  "type": "string"
                },
                "interchange_gross_amount": {
                  "description": "The total amount of interchange.",
                  "example": -7,
                  "type": "integer"
                },
                "network": {
                  "description": "Card network where the transaction took place",
                  "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                  "example": "MASTERCARD",
                  "nullable": false,
                  "type": "string"
                },
                "other_fees_gross_amount": {
                  "description": "Total amount of gross other fees outside of interchange.",
                  "example": 0,
                  "type": "integer"
                },
                "settled_net_amount": {
                  "description": "The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).",
                  "example": 1893,
                  "type": "integer"
                },
                "transactions_gross_amount": {
                  "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
                  "example": 1900,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "disputes_gross_amount": {
            "description": "The total gross amount of disputes settlements.",
            "example": 0,
            "type": "integer"
          },
          "interchange_gross_amount": {
            "description": "The total amount of interchange.",
            "example": -7,
            "type": "integer"
          },
          "other_fees_gross_amount": {
            "description": "Total amount of gross other fees outside of interchange.",
            "example": 0,
            "type": "integer"
          },
          "report_date": {
            "description": "Date of when the report was first generated.",
            "example": "2023-06-01",
            "type": "string"
          },
          "settled_net_amount": {
            "description": "The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).",
            "example": 1893,
            "type": "integer"
          },
          "transactions_gross_amount": {
            "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
            "example": 1900,
            "type": "integer"
          },
          "updated": {
            "description": "Date and time when the transaction first occurred. UTC time zone.",
            "example": "2023-06-01T00:00:00",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "created",
          "currency",
          "details",
          "disputes_gross_amount",
          "interchange_gross_amount",
          "other_fees_gross_amount",
          "report_date",
          "settled_net_amount",
          "transactions_gross_amount",
          "updated"
        ],
        "type": "object"
      },
      "ShippingAddress": {
        "properties": {
          "address1": {
            "description": "Valid USPS routable address.",
            "example": "5 Broad Street",
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "address2": {
            "description": "Unit number (if applicable).",
            "example": "Unit 25A",
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "city": {
            "description": "City",
            "example": "NEW YORK",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "country": {
            "description": "Uppercase ISO 3166-1 alpha-3 three character abbreviation.",
            "example": "USA",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "email": {
            "description": "Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
            "example": "johnny@appleseed.com",
            "maxLength": 50,
            "minLength": 5,
            "type": "string"
          },
          "first_name": {
            "description": "Customer's first name. This will be the first name printed on the physical card.",
            "example": "Michael",
            "maxLength": 26,
            "minLength": 1,
            "type": "string"
          },
          "last_name": {
            "description": "Customer's surname (family name). This will be the last name printed on the physical card.",
            "example": "Bluth",
            "maxLength": 26,
            "minLength": 1,
            "type": "string"
          },
          "line2_text": {
            "description": "Text to be printed on line two of the physical card. Use of this field requires additional permissions.",
            "example": "The Bluth Company",
            "maxLength": 26,
            "minLength": 0,
            "type": "string"
          },
          "phone_number": {
            "description": "Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.",
            "example": "+12124007676",
            "maxLength": 16,
            "minLength": 8,
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code (formerly zipcode). For US addresses, either five-digit zipcode or nine-digit \"ZIP+4\".",
            "example": "10001-1809",
            "maxLength": 12,
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "description": "Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.",
            "example": "NY",
            "maxLength": 24,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": ["address1", "city", "country", "first_name", "last_name", "postal_code", "state"],
        "type": "object"
      },
      "SimulateReleaseRequest": {
        "properties": {
          "payment_token": {
            "format": "uuid",
            "title": "Payment Token",
            "type": "string"
          }
        },
        "required": ["payment_token"],
        "title": "SimulateReleaseRequest",
        "type": "object"
      },
      "SimulateReleaseResponse": {
        "properties": {
          "debugging_request_id": {
            "format": "uuid",
            "title": "Debugging Request Id",
            "type": "string"
          },
          "result": {
            "enum": ["APPROVED", "DECLINED"],
            "title": "Result",
            "type": "string"
          },
          "transaction_event_token": {
            "format": "uuid",
            "title": "Transaction Event Token",
            "type": "string"
          }
        },
        "title": "SimulateReleaseResponse",
        "type": "object"
      },
      "SimulateReturnRequest": {
        "properties": {
          "payment_token": {
            "format": "uuid",
            "title": "Payment Token",
            "type": "string"
          },
          "return_reason_code": {
            "default": "R01",
            "title": "Payment Token",
            "type": "string"
          }
        },
        "required": ["payment_token"],
        "title": "SimulateReturnRequest",
        "type": "object"
      },
      "SimulateReturnResponse": {
        "properties": {
          "debugging_request_id": {
            "format": "uuid",
            "title": "Debugging Request Id",
            "type": "string"
          },
          "result": {
            "enum": ["APPROVED", "DECLINED"],
            "title": "Result",
            "type": "string"
          },
          "transaction_event_token": {
            "format": "uuid",
            "title": "Transaction Event Token",
            "type": "string"
          }
        },
        "title": "SimulateReturnResponse",
        "type": "object"
      },
      "Statement": {
        "properties": {
          "ach_period_total": {
            "description": "Total payments during this billing period.",
            "title": "ACH Period Total",
            "type": "integer"
          },
          "ach_ytd_total": {
            "description": "Year-to-date settled payment total",
            "title": "ACH YTD Total",
            "type": "integer"
          },
          "adjustments_period_total": {
            "description": "Total adjustments during this billing period.",
            "title": "Adjustments Period Total",
            "type": "integer"
          },
          "adjustments_ytd_total": {
            "description": "Year-to-date settled adjustments total",
            "title": "Adjustments YTD Total",
            "type": "integer"
          },
          "amount_due": {
            "description": "Payment due at the end of the billing period. Negative amount indicates something is owed. If the amount owed is positive (e.g., there was a net credit), then payment should be returned to the cardholder via ACH.",
            "title": "Amount Due",
            "type": "integer"
          },
          "available_credit": {
            "description": "Amount of credit available to spend",
            "title": "Available Credit",
            "type": "integer"
          },
          "created": {
            "description": "Timestamp of when the statement was created",
            "format": "date-time",
            "title": "Created Time",
            "type": "string"
          },
          "credit_limit": {
            "description": "For prepay accounts, this is the minimum prepay balance that must be maintained. For charge card accounts, this is the maximum credit balance extended by a lender.",
            "title": "Credit Limit",
            "type": "integer"
          },
          "days_in_billing_cycle": {
            "description": "Number of days in the billing cycle",
            "title": "Days in Billing Cycle",
            "type": "integer"
          },
          "ending_balance": {
            "description": "Balance at the end of the billing period. For charge cards, this should be the same at the statement amount due.",
            "title": "Ending Balance",
            "type": "integer"
          },
          "financial_account_token": {
            "description": "Globally unique identifier for a financial account",
            "format": "uuid",
            "title": "Financial Account Token",
            "type": "string"
          },
          "payment_due_date": {
            "description": "Date when the payment is due",
            "format": "date",
            "title": "Payment Due Date",
            "type": "string"
          },
          "purchases_period_total": {
            "description": "Total settled card transactions during this billing period, determined by liability date.",
            "title": "Purchases Period Total",
            "type": "integer"
          },
          "purchases_ytd_total": {
            "description": "Year-to-date settled card transaction total",
            "title": "Purchases YTD Total",
            "type": "integer"
          },
          "starting_balance": {
            "description": "Balance at the start of the billing period",
            "title": "Starting Balance",
            "type": "integer"
          },
          "statement_end_date": {
            "description": "Date when the billing period ended",
            "format": "date",
            "title": "Statement End Date",
            "type": "string"
          },
          "statement_start_date": {
            "description": "Date when the billing period began",
            "format": "date",
            "title": "Statement Start Date",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for a statement",
            "title": "Statement Token",
            "type": "string"
          },
          "updated": {
            "description": "Timestamp of when the statement was updated",
            "format": "date-time",
            "title": "Updated Time",
            "type": "string"
          }
        },
        "required": [
          "ach_period_total",
          "ach_ytd_total",
          "adjustments_period_total",
          "adjustments_ytd_total",
          "amount_due",
          "available_credit",
          "created",
          "credit_limit",
          "days_in_billing_cycle",
          "ending_balance",
          "financial_account_token",
          "payment_due_date",
          "purchases_period_total",
          "purchases_ytd_total",
          "starting_balance",
          "statement_end_date",
          "statement_start_date",
          "token",
          "updated"
        ],
        "title": "StatementResponse",
        "type": "object"
      },
      "StatementLineItem": {
        "properties": {
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "card_token": {
            "description": "Globally unique identifier for a card",
            "format": "uuid",
            "title": "Card Token",
            "type": "string"
          },
          "category": {
            "enum": ["ACH", "CARD", "TRANSFER"],
            "title": "Category of Transaction",
            "type": "string"
          },
          "created": {
            "description": "Timestamp of when the line item was generated",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction",
            "title": "Currency",
            "type": "string"
          },
          "descriptor": {
            "title": "Descriptor",
            "type": "string"
          },
          "event_type": {
            "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
            "enum": [
              "ACH_INSUFFICIENT_FUNDS",
              "ACH_ORIGINATION_PENDING",
              "ACH_ORIGINATION_RELEASED",
              "ACH_RECEIPT_PENDING",
              "ACH_RECEIPT_RELEASED",
              "ACH_RETURN",
              "AUTHORIZATION",
              "AUTHORIZATION_ADVICE",
              "AUTHORIZATION_EXPIRY",
              "AUTHORIZATION_REVERSAL",
              "BALANCE_INQUIRY",
              "CLEARING",
              "CORRECTION_CREDIT",
              "CORRECTION_DEBIT",
              "CREDIT_AUTHORIZATION",
              "CREDIT_AUTHORIZATION_ADVICE",
              "FINANCIAL_AUTHORIZATION",
              "FINANCIAL_CREDIT_AUTHORIZATION",
              "RETURN",
              "RETURN_REVERSAL",
              "TRANSFER",
              "TRANSFER_INSUFFICIENT_FUNDS"
            ],
            "type": "string"
          },
          "financial_account_token": {
            "description": "Globally unique identifier for a financial account",
            "format": "uuid",
            "title": "Financial Account Token",
            "type": "string"
          },
          "financial_transaction_token": {
            "description": "Globally unique identifier for a financial transaction",
            "format": "uuid",
            "title": "Financial Account Token",
            "type": "string"
          },
          "settled_date": {
            "description": "Date that the transaction settled",
            "format": "date",
            "title": "Settled Date",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for a Statement Line Item",
            "format": "uuid",
            "title": "Token",
            "type": "string"
          }
        },
        "required": [
          "amount",
          "category",
          "created",
          "currency",
          "event_type",
          "financial_account_token",
          "financial_transaction_token",
          "settled_date",
          "token"
        ],
        "title": "StatementLineItemResponse",
        "type": "object"
      },
      "ThreeDSAddress": {
        "properties": {
          "address1": {
            "description": "First line of the street address provided by the cardholder.",
            "nullable": true,
            "type": "string"
          },
          "address2": {
            "description": "Second line of the street address provided by the cardholder.",
            "nullable": true,
            "type": "string"
          },
          "address3": {
            "description": "Third line of the street address provided by the cardholder.",
            "nullable": true,
            "type": "string"
          },
          "city": {
            "description": "City of the address provided by the cardholder.",
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThreeDSAuthentication": {
        "properties": {
          "account_type": {
            "description": "Type of account/card that is being used for the transaction. Maps to EMV 3DS field acctType.\n",
            "enum": ["CREDIT", "DEBIT", "NOT_APPLICABLE"],
            "nullable": true,
            "type": "string"
          },
          "additional_data": {
            "description": "Object containing additional data about the 3DS request that is beyond the EMV 3DS standard spec (e.g., specific fields that only certain card networks send but are not required across all 3DS requests).\n",
            "nullable": true,
            "properties": {
              "network_decision": {
                "description": "Mastercard only: Indicates whether the network would have considered the authentication request to be low risk or not.\n",
                "enum": ["LOW_RISK", "NOT_LOW_RISK"],
                "nullable": true,
                "type": "string"
              },
              "network_risk_score": {
                "description": "Mastercard only: Assessment by the network of the authentication risk level, with a higher value indicating a higher amount of risk.\n",
                "nullable": true,
                "type": "number"
              }
            },
            "type": "object"
          },
          "app": {
            "description": "Object containing data about the app used in the e-commerce transaction. Present if the channel is 'APP_BASED'.\n",
            "properties": {
              "device_info": {
                "description": "Device information gathered from the cardholder's device - JSON name/value pairs that is Base64url encoded. Maps to EMV 3DS field deviceInfo.\n",
                "nullable": true,
                "type": "string"
              },
              "ip": {
                "anyOf": [
                  {
                    "format": "ipv4",
                    "type": "string"
                  },
                  {
                    "format": "ipv6",
                    "type": "string"
                  }
                ],
                "description": "External IP address used by the app generating the 3DS authentication request. Maps to EMV 3DS field appIp.\n"
              }
            }
          },
          "authentication_request_type": {
            "description": "Type of authentication request - i.e., the type of transaction or interaction is causing the merchant to request an authentication. Maps to EMV 3DS field threeDSRequestorAuthenticationInd.\n",
            "enum": [
              "ADD_CARD",
              "BILLING_AGREEMENT",
              "DELAYED_SHIPMENT",
              "EMV_TOKEN_CARDHOLDER_VERIFICATION",
              "INSTALLMENT_TRANSACTION",
              "MAINTAIN_CARD",
              "PAYMENT_TRANSACTION",
              "RECURRING_TRANSACTION",
              "SPLIT_PAYMENT",
              "SPLIT_SHIPMENT"
            ],
            "nullable": true,
            "type": "string"
          },
          "authentication_result": {
            "description": "Indicates the outcome of the 3DS authentication process.",
            "enum": ["DECLINE", "SUCCESS"],
            "nullable": true,
            "type": "string"
          },
          "browser": {
            "description": "Object containing data about the browser used in the e-commerce transaction. Present if the channel is 'BROWSER'.\n",
            "properties": {
              "ip": {
                "anyOf": [
                  {
                    "format": "ipv4",
                    "type": "string"
                  },
                  {
                    "format": "ipv6",
                    "type": "string"
                  }
                ],
                "description": "IP address of the browser as returned by the HTTP headers to the 3DS requestor (e.g., merchant or digital wallet). Maps to EMV 3DS field browserIP.\n",
                "nullable": true
              },
              "java_enabled": {
                "description": "Indicates whether the cardholder's browser has the ability to execute Java. Maps to EMV 3DS field browserJavaEnabled.\n",
                "nullable": true,
                "type": "boolean"
              },
              "javascript_enabled": {
                "description": "Indicates whether the cardholder's browser has the ability to execute JavaScript. Maps to EMV 3DS field browserJavascriptEnabled.\n",
                "nullable": true,
                "type": "boolean"
              },
              "language": {
                "description": "Language of the cardholder's browser as defined in IETF BCP47. Maps to EMV 3DS field browserLanguage.\n",
                "nullable": true,
                "type": "string"
              },
              "time_zone": {
                "description": "Time zone of the cardholder's browser offset in minutes between UTC and the cardholder browser's local time. The offset is positive if the local time is behind UTC and negative if it is ahead. Maps to EMV 3DS field browserTz.\n",
                "nullable": true,
                "type": "string"
              },
              "user_agent": {
                "description": "Content of the HTTP user-agent header. Maps to EMV 3DS field browserUserAgent.\n",
                "nullable": true,
                "type": "string"
              }
            }
          },
          "card_expiry_check": {
            "description": "Indicates whether the expiration date provided by the cardholder during checkout matches Lithic's record of the card's expiration date.\n",
            "enum": ["MATCH", "MISMATCH", "NOT_PRESENT"],
            "type": "string"
          },
          "card_token": {
            "description": "Globally unique identifier for the card on which the 3DS authentication has occurred.",
            "format": "uuid",
            "type": "string"
          },
          "cardholder": {
            "description": "Object containing data about the cardholder provided during the transaction.",
            "properties": {
              "address_match": {
                "description": "Indicates whether the shipping address and billing address provided by the cardholder are the same. This value - and assessment of whether the addresses match - is provided directly in the 3DS request and is not determined by Lithic. Maps to EMV 3DS field addrMatch.\n",
                "nullable": true,
                "type": "boolean"
              },
              "billing_address": {
                "description": "Object containing data on the billing address provided during the transaction.",
                "type": "object",
                "properties": {
                  "address1": {
                    "description": "First line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "address2": {
                    "description": "Second line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "address3": {
                    "description": "Third line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "city": {
                    "description": "City of the address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "country": {
                    "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                    "maxLength": 3,
                    "minLength": 3,
                    "nullable": true,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                    "nullable": true,
                    "type": "string"
                  }
                }
              },
              "email": {
                "description": "Email address that is either provided by the cardholder or is on file with the merchant in a 3RI request. Maps to EMV 3DS field email.\n",
                "maxLength": 254,
                "minLength": 1,
                "nullable": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the cardholder. Maps to EMV 3DS field cardholderName.",
                "maxLength": 36,
                "minLength": 1,
                "nullable": true,
                "type": "string"
              },
              "phone_number_home": {
                "description": "Home phone number provided by the cardholder. Maps to EMV 3DS fields homePhone.cc and homePhone.subscriber.\n",
                "maxLength": 18,
                "minLength": 1,
                "nullable": true,
                "type": "string"
              },
              "phone_number_mobile": {
                "description": "Mobile/cell phone number provided by the cardholder. Maps to EMV 3DS fields mobilePhone.cc and mobilePhone.subscriber.\n",
                "maxLength": 18,
                "minLength": 1,
                "nullable": true,
                "type": "string"
              },
              "phone_number_work": {
                "description": "Work phone number provided by the cardholder. Maps to EMV 3DS fields workPhone.cc and workPhone.subscriber.\n",
                "maxLength": 18,
                "minLength": 1,
                "nullable": true,
                "type": "string"
              },
              "shipping_address": {
                "description": "Object containing data on the shipping address provided during the transaction.",
                "type": "object",
                "properties": {
                  "address1": {
                    "description": "First line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "address2": {
                    "description": "Second line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "address3": {
                    "description": "Third line of the street address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "city": {
                    "description": "City of the address provided by the cardholder.",
                    "nullable": true,
                    "type": "string"
                  },
                  "country": {
                    "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                    "maxLength": 3,
                    "minLength": 3,
                    "nullable": true,
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            },
            "type": "object"
          },
          "channel": {
            "description": "Channel in which the authentication occurs. Maps to EMV 3DS field deviceChannel.",
            "enum": ["APP_BASED", "BROWSER", "THREE_DS_REQUESTOR_INITIATED"],
            "type": "string"
          },
          "created": {
            "description": "Date and time when the authentication was created in Lithic's system.\n",
            "format": "date-time",
            "type": "string"
          },
          "decision_made_by": {
            "description": "Entity that made the authentication decision.",
            "enum": ["CUSTOMER_ENDPOINT", "LITHIC_DEFAULT", "LITHIC_RULES", "NETWORK", "UNKNOWN"],
            "nullable": true,
            "type": "string"
          },
          "merchant": {
            "description": "Object containing data about the merchant involved in the e-commerce transaction.",
            "properties": {
              "country": {
                "description": "Country code of the merchant requesting 3DS authentication. Maps to EMV 3DS field merchantCountryCode.\n",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              },
              "id": {
                "description": "Merchant identifier as assigned by the acquirer. Maps to EMV 3DS field acquirerMerchantId.\n",
                "type": "string"
              },
              "mcc": {
                "description": "Merchant category code assigned to the merchant that describes its business activity type. Maps to EMV 3DS field mcc.\n",
                "maxLength": 4,
                "minLength": 4,
                "type": "string"
              },
              "name": {
                "description": "Name of the merchant. Maps to EMV 3DS field merchantName.",
                "type": "string"
              },
              "risk_indicator": {
                "description": "Object containing additional data indicating additional risk factors related to the e-commerce transaction.\n",
                "properties": {
                  "delivery_email_address": {
                    "description": "In transactions with electronic delivery, email address to which merchandise is delivered. Maps to EMV 3DS field deliveryEmailAddress.\n",
                    "nullable": true,
                    "type": "string"
                  },
                  "delivery_time_frame": {
                    "description": "The delivery time frame for the merchandise. Maps to EMV 3DS field deliveryTimeframe.\n",
                    "enum": [
                      "ELECTRONIC_DELIVERY",
                      "OVERNIGHT_SHIPPING",
                      "SAME_DAY_SHIPPING",
                      "TWO_DAY_OR_MORE_SHIPPING"
                    ],
                    "nullable": true,
                    "type": "string"
                  },
                  "gift_card_amount": {
                    "description": "In prepaid or gift card purchase transactions, purchase amount total in major units (e.g., a purchase of USD $205.10 would be 205). Maps to EMV 3DS field giftCardAmount.\n",
                    "nullable": true,
                    "type": "number"
                  },
                  "gift_card_count": {
                    "description": "In prepaid or gift card purchase transactions, count of individual prepaid or gift cards/codes purchased. Maps to EMV 3DS field giftCardCount.\n",
                    "nullable": true,
                    "type": "number"
                  },
                  "gift_card_currency": {
                    "description": "In prepaid or gift card purchase transactions, currency code of the gift card. Maps to EMV 3DS field giftCardCurr.\n",
                    "maxLength": 3,
                    "minLength": 3,
                    "nullable": true,
                    "type": "string"
                  },
                  "order_availability": {
                    "description": "Indicates whether the purchase is for merchandise that is available now or at a future date. Maps to EMV 3DS field preOrderPurchaseInd.\n",
                    "enum": ["FUTURE_AVAILABILITY", "MERCHANDISE_AVAILABLE"],
                    "nullable": true,
                    "type": "string"
                  },
                  "pre_order_available_date": {
                    "description": "In pre-order purchase transactions, the expected date that the merchandise will be available. Maps to EMV 3DS field preOrderDate.\n",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "reorder_items": {
                    "description": "Indicates whether the cardholder is reordering previously purchased merchandise. Maps to EMV 3DS field reorderItemsInd.",
                    "enum": ["FIRST_TIME_ORDERED", "REORDERED"],
                    "nullable": true,
                    "type": "string"
                  },
                  "shipping_method": {
                    "description": "Shipping method that the cardholder chose for the transaction. If purchase includes one or more item, this indicator is used for the physical goods; if the purchase only includes digital goods, this indicator is used to describe the most expensive item purchased. Maps to EMV 3DS field shipIndicator.\n",
                    "enum": [
                      "DIGITAL_GOODS",
                      "LOCKER_DELIVERY",
                      "OTHER",
                      "PICK_UP_AND_GO_DELIVERY",
                      "SHIP_TO_BILLING_ADDRESS",
                      "SHIP_TO_NON_BILLING_ADDRESS",
                      "SHIP_TO_OTHER_VERIFIED_ADDRESS",
                      "SHIP_TO_STORE",
                      "TRAVEL_AND_EVENT_TICKETS"
                    ],
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": ["country", "id", "mcc", "name", "risk_indicator"],
            "type": "object"
          },
          "message_category": {
            "description": "Either PAYMENT_AUTHENTICATION or NON_PAYMENT_AUTHENTICATION.  For NON_PAYMENT_AUTHENTICATION, additional_data and transaction fields are not populated.\n",
            "enum": ["NON_PAYMENT_AUTHENTICATION", "PAYMENT_AUTHENTICATION"],
            "type": "string"
          },
          "three_ri_request_type": {
            "description": "Type of 3DS Requestor Initiated (3RI) request i.e., a 3DS authentication that takes place at the initiation of the merchant rather than the cardholder. The most common example of this is where a merchant is authenticating before billing for a recurring transaction such as a pay TV subscription or a utility bill. Maps to EMV 3DS field threeRIInd.\n",
            "enum": [
              "ACCOUNT_VERIFICATION",
              "ADD_CARD",
              "BILLING_AGREEMENT",
              "CARD_SECURITY_CODE_STATUS_CHECK",
              "DELAYED_SHIPMENT",
              "DEVICE_BINDING_STATUS_CHECK",
              "INSTALLMENT_TRANSACTION",
              "MAIL_ORDER",
              "MAINTAIN_CARD_INFO",
              "OTHER_PAYMENT",
              "RECURRING_TRANSACTION",
              "SPLIT_PAYMENT",
              "SPLIT_SHIPMENT",
              "TELEPHONE_ORDER",
              "TOP_UP",
              "TRUST_LIST_STATUS_CHECK"
            ],
            "nullable": true,
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for the 3DS authentication.\n",
            "format": "uuid",
            "type": "string"
          },
          "transaction": {
            "description": "Object containing data about the e-commerce transaction for which the merchant is requesting authentication.",
            "nullable": true,
            "properties": {
              "amount": {
                "description": "Amount of the purchase in minor units of currency with all punctuation removed. Maps to EMV 3DS field purchaseAmount.\n",
                "type": "number"
              },
              "currency": {
                "description": "Currency of the purchase. Maps to EMV 3DS field purchaseCurrency.\n",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              },
              "currency_exponent": {
                "description": "Minor units of currency, as specified in ISO 4217 currency exponent. Maps to EMV 3DS field purchaseExponent.\n",
                "type": "number"
              },
              "date_time": {
                "description": "Date and time when the authentication was generated by the merchant/acquirer's 3DS server. Maps to EMV 3DS field purchaseDate.\n",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "description": "Type of the transaction for which a 3DS authentication request is occurring. Maps to EMV 3DS field transType.\n",
                "enum": [
                  "ACCOUNT_FUNDING",
                  "CHECK_ACCEPTANCE",
                  "GOODS_SERVICE_PURCHASE",
                  "PREPAID_ACTIVATION_AND_LOAD",
                  "QUASI_CASH_TRANSACTION"
                ],
                "nullable": true,
                "type": "string"
              }
            },
            "required": ["amount", "currency", "currency_exponent", "date_time", "type"],
            "type": "object"
          }
        },
        "required": [
          "account_type",
          "authentication_result",
          "card_expiry_check",
          "card_token",
          "cardholder",
          "channel",
          "created",
          "decision_made_by",
          "merchant",
          "message_category",
          "token"
        ],
        "type": "object"
      },
      "Tokenization": {
        "properties": {
          "account_token": {
            "description": "The account token associated with the card being tokenized.",
            "format": "uuid",
            "type": "string"
          },
          "card_token": {
            "description": "The card token associated with the card being tokenized.",
            "format": "uuid",
            "type": "string"
          },
          "created_at": {
            "description": "Date and time when the tokenization first occurred. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "events": {
            "description": "A list of events related to the tokenization.",
            "items": {
              "properties": {
                "created_at": {
                  "description": "Date and time when the tokenization event first occurred. UTC time zone.",
                  "format": "date-time",
                  "type": "string"
                },
                "result": {
                  "description": "Enum representing the result of the tokenization event",
                  "enum": [
                    "APPROVED",
                    "DECLINED",
                    "NOTIFICATION_DELIVERED",
                    "REQUIRE_ADDITIONAL_AUTHENTICATION",
                    "TOKEN_ACTIVATED",
                    "TOKEN_CREATED",
                    "TOKEN_DEACTIVATED",
                    "TOKEN_INACTIVE",
                    "TOKEN_STATE_UNKNOWN",
                    "TOKEN_SUSPENDED",
                    "TOKEN_UPDATED"
                  ],
                  "type": "string"
                },
                "token": {
                  "description": "Globally unique identifier for a Tokenization Event",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "Enum representing the type of tokenization event that occurred",
                  "enum": [
                    "TOKENIZATION_2FA",
                    "TOKENIZATION_AUTHORIZATION",
                    "TOKENIZATION_DECISIONING",
                    "TOKENIZATION_ELIGIBILITY_CHECK",
                    "TOKENIZATION_UPDATED"
                  ],
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "status": {
            "description": "The status of the tokenization request",
            "enum": [
              "ACTIVE",
              "DEACTIVATED",
              "INACTIVE",
              "PAUSED",
              "PENDING_2FA",
              "PENDING_ACTIVATION",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for a Tokenization",
            "format": "uuid",
            "type": "string"
          },
          "token_requestor_name": {
            "description": "The entity that is requested the tokenization. Represents a Digital Wallet.",
            "enum": [
              "AMAZON_ONE",
              "ANDROID_PAY",
              "APPLE_PAY",
              "FITBIT_PAY",
              "GARMIN_PAY",
              "MICROSOFT_PAY",
              "SAMSUNG_PAY",
              "UNKNOWN",
              "VISA_CHECKOUT"
            ],
            "type": "string"
          },
          "token_unique_reference": {
            "description": "The network's unique reference for the tokenization.",
            "type": "string"
          },
          "updated_at": {
            "description": "Latest date and time when the tokenization was updated. UTC time zone.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "account_token",
          "card_token",
          "created_at",
          "status",
          "token",
          "token_requestor_name",
          "token_unique_reference",
          "updated_at"
        ],
        "type": "object"
      },
      "TokenizationEvent": {
        "properties": {
          "created_at": {
            "description": "Date and time when the tokenization event first occurred. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "result": {
            "description": "Enum representing the result of the tokenization event",
            "enum": [
              "APPROVED",
              "DECLINED",
              "NOTIFICATION_DELIVERED",
              "REQUIRE_ADDITIONAL_AUTHENTICATION",
              "TOKEN_ACTIVATED",
              "TOKEN_CREATED",
              "TOKEN_DEACTIVATED",
              "TOKEN_INACTIVE",
              "TOKEN_STATE_UNKNOWN",
              "TOKEN_SUSPENDED",
              "TOKEN_UPDATED"
            ],
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier for a Tokenization Event",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Enum representing the type of tokenization event that occurred",
            "enum": [
              "TOKENIZATION_2FA",
              "TOKENIZATION_AUTHORIZATION",
              "TOKENIZATION_DECISIONING",
              "TOKENIZATION_ELIGIBILITY_CHECK",
              "TOKENIZATION_UPDATED"
            ],
            "type": "string"
          }
        }
      },
      "Transaction": {
        "properties": {
          "acquirer_fee": {
            "description": "Fee assessed by the merchant and paid for by the cardholder in the smallest unit of the currency. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.",
            "example": 0,
            "type": "integer"
          },
          "acquirer_reference_number": {
            "description": "Unique identifier assigned to a transaction by the acquirer that can be used in dispute and chargeback filing.\n",
            "example": "12345678987654321234567",
            "maxLength": 23,
            "minLength": 23,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time, and will represent the settled amount once the transaction is settled.",
            "example": 1500,
            "type": "integer"
          },
          "authorization_amount": {
            "description": "Authorization amount (in cents) of the transaction, including any acquirer fees. This amount always represents the amount authorized for the transaction, unaffected by settlement.",
            "example": 1500,
            "type": "integer"
          },
          "authorization_code": {
            "description": "A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.",
            "example": "123456",
            "maxLength": 6,
            "minLength": 6,
            "type": "string"
          },
          "avs": {
            "properties": {
              "address": {
                "description": "Cardholder address",
                "type": "string"
              },
              "zipcode": {
                "description": "Cardholder ZIP code",
                "type": "string"
              }
            },
            "type": "object"
          },
          "card_token": {
            "description": "Token for the card used in this transaction.",
            "example": "19c22c47-7a75-43ee-9891-595419830f7e",
            "format": "uuid",
            "type": "string"
          },
          "cardholder_authentication": {
            "nullable": true,
            "properties": {
              "3ds_version": {
                "description": "3-D Secure Protocol version. Possible enum values:\n* `1`: 3-D Secure Protocol version 1.x applied to the transaction.\n* `2`: 3-D Secure Protocol version 2.x applied to the transaction.\n* `null`: 3-D Secure was not used for the transaction\n",
                "example": "2",
                "nullable": true,
                "type": "string"
              },
              "acquirer_exemption": {
                "description": "Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible enum values:\n* `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.\n* `LOW_VALUE`: Low Value Payment exemption.\n* `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).\n* `NONE`: No exemption applied.\n* `RECURRING_PAYMENT`: Recurring Payment exemption.\n* `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.\n* `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.\n* `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.\n\nMaps to the 3-D Secure `transChallengeExemption` field.\n",
                "enum": [
                  "AUTHENTICATION_OUTAGE_EXCEPTION",
                  "LOW_VALUE",
                  "MERCHANT_INITIATED_TRANSACTION",
                  "NONE",
                  "RECURRING_PAYMENT",
                  "SECURE_CORPORATE_PAYMENT",
                  "STRONG_CUSTOMER_AUTHENTICATION_DELEGATION",
                  "TRANSACTION_RISK_ANALYSIS"
                ],
                "example": "NONE",
                "type": "string"
              },
              "authentication_result": {
                "description": "Outcome of the 3DS authentication process. Possible enum values:\n* `SUCCESS`: 3DS authentication was successful and the transaction is considered authenticated.\n* `DECLINE`: 3DS authentication was attempted but was unsuccessful — i.e., the issuer declined to authenticate the cardholder; note that Lithic populates this value on a best-effort basis based on common data across the 3DS authentication and ASA data elements.\n* `ATTEMPTS`: 3DS authentication was attempted but full authentication did not occur. A proof of attempted authenticated is provided by the merchant.\n* `NONE`: 3DS authentication was not performed on the transaction.\n",
                "enum": ["ATTEMPTS", "DECLINE", "NONE", "SUCCESS"],
                "example": "SUCCESS",
                "type": "string"
              },
              "decision_made_by": {
                "description": "Indicator for which party made the 3DS authentication decision. Possible enum values:\n* `NETWORK`: A networks tand-in service decided on the outcome; for token authentications (as indicated in the `liability_shift` attribute), this is the default value\n* `LITHIC_DEFAULT`: A default decision was made by Lithic, without running a rules-based authentication; this value will be set on card programs that do not participate in one of our two 3DS product tiers\n* `LITHIC_RULES`: A rules-based authentication was conducted by Lithic and Lithic decided on the outcome\n* `CUSTOMER_ENDPOINT`: Lithic customer decided on the outcome based on a real-time request sent to a configured endpoint\n* `UNKNOWN`: Data on which party decided is unavailable\n",
                "enum": ["CUSTOMER_ENDPOINT", "LITHIC_DEFAULT", "LITHIC_RULES", "NETWORK", "UNKNOWN"],
                "example": "LITHIC_RULES",
                "type": "string"
              },
              "liability_shift": {
                "description": "Indicates whether chargeback liability shift applies to the transaction. Possible enum values:\n* `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.\n* `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.\n* `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.\n* `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.\n",
                "enum": ["3DS_AUTHENTICATED", "ACQUIRER_EXEMPTION", "NONE", "TOKEN_AUTHENTICATED"],
                "type": "string"
              },
              "three_ds_authentication_token": {
                "description": "Unique identifier you can use to match a given 3DS authentication and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.",
                "example": "a6e372d0-b40a-43eb-b0d1-4e1aebef5875",
                "format": "uuid",
                "type": "string"
              },
              "verification_attempted": {
                "description": "Verification attempted values:\n* `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.\n* `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.\n* `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).\n* `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)\n* `OTP`: One-time password verification was attempted by the ACS.\n",
                "enum": ["APP_LOGIN", "BIOMETRIC", "NONE", "OTHER", "OTP"],
                "example": "NONE",
                "type": "string"
              },
              "verification_result": {
                "description": "This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.\n\nVerification result values:\n* `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.\n* `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.\n* `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.\n* `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.\n* `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.\n* `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.\n\nNote that the following `transStatus` values are not represented by this field:\n* `C`: Challenge Required\n* `D`: Challenge Required; decoupled authentication confirmed\n* `I`: Informational only\n* `S`: Challenge using Secure Payment Confirmation (SPC)\n",
                "enum": ["CANCELLED", "FAILED", "FRICTIONLESS", "NOT_ATTEMPTED", "REJECTED", "SUCCESS"],
                "example": "FRICTIONLESS",
                "type": "string"
              }
            },
            "required": [
              "3ds_version",
              "acquirer_exemption",
              "authentication_result",
              "decision_made_by",
              "liability_shift",
              "three_ds_authentication_token",
              "verification_attempted",
              "verification_result"
            ],
            "type": "object"
          },
          "created": {
            "description": "Date and time when the transaction first occurred. UTC time zone.",
            "example": "2023-09-26T21:14:28.637Z",
            "format": "date-time",
            "type": "string"
          },
          "events": {
            "description": "A list of all events that have modified this transaction.",
            "items": {
              "description": "A single card transaction may include multiple events that affect the transaction state and lifecycle.",
              "properties": {
                "amount": {
                  "description": "Amount of the transaction event (in cents), including any acquirer fees.",
                  "example": 1500,
                  "type": "integer"
                },
                "created": {
                  "description": "RFC 3339 date and time this event entered the system. UTC time zone.",
                  "example": "2023-09-26T21:14:28.637Z",
                  "format": "date-time",
                  "type": "string"
                },
                "detailed_results": {
                  "items": {
                    "enum": [
                      "ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED",
                      "ACCOUNT_INACTIVE",
                      "ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED",
                      "ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED",
                      "ACCOUNT_UNDER_REVIEW",
                      "ADDRESS_INCORRECT",
                      "APPROVED",
                      "AUTH_RULE_ALLOWED_COUNTRY",
                      "AUTH_RULE_ALLOWED_MCC",
                      "AUTH_RULE_BLOCKED_COUNTRY",
                      "AUTH_RULE_BLOCKED_MCC",
                      "CARD_CLOSED",
                      "CARD_CRYPTOGRAM_VALIDATION_FAILURE",
                      "CARD_EXPIRED",
                      "CARD_EXPIRY_DATE_INCORRECT",
                      "CARD_INVALID",
                      "CARD_PAUSED",
                      "CARD_PIN_INCORRECT",
                      "CARD_RESTRICTED",
                      "CARD_SECURITY_CODE_INCORRECT",
                      "CARD_SPEND_LIMIT_EXCEEDED",
                      "CONTACT_CARD_ISSUER",
                      "CUSTOMER_ASA_TIMEOUT",
                      "CUSTOM_ASA_RESULT",
                      "DECLINED",
                      "DO_NOT_HONOR",
                      "FORMAT_ERROR",
                      "INSUFFICIENT_FUNDING_SOURCE_BALANCE",
                      "INSUFFICIENT_FUNDS",
                      "LITHIC_SYSTEM_ERROR",
                      "LITHIC_SYSTEM_RATE_LIMIT",
                      "MALFORMED_ASA_RESPONSE",
                      "MERCHANT_INVALID",
                      "MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE",
                      "MERCHANT_NOT_PERMITTED",
                      "OVER_REVERSAL_ATTEMPTED",
                      "PROGRAM_CARD_SPEND_LIMIT_EXCEEDED",
                      "PROGRAM_SUSPENDED",
                      "PROGRAM_USAGE_RESTRICTION",
                      "REVERSAL_UNMATCHED",
                      "SECURITY_VIOLATION",
                      "SINGLE_USE_CARD_REATTEMPTED",
                      "TRANSACTION_INVALID",
                      "TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL",
                      "TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER",
                      "TRANSACTION_PREVIOUSLY_COMPLETED",
                      "UNAUTHORIZED_MERCHANT"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "result": {
                  "description": "`APPROVED` or decline reason.\n\nResult types:\n* `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).\n* `APPROVED` - Transaction is approved.\n* `BANK_CONNECTION_ERROR` - Please reconnect a funding source.\n* `BANK_NOT_VERIFIED` - Please confirm the funding source.\n* `CARD_CLOSED` - Card state was closed at the time of authorization.\n* `CARD_PAUSED` - Card state was paused at the time of authorization.\n* `FRAUD_ADVICE` - Transaction declined due to risk.\n* `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).\n* `INCORRECT_PIN` - PIN verification failed.\n* `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.\n* `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.\n* `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.\n* `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.\n* `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.\n* `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.\n* `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.\n* `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.\n",
                  "enum": [
                    "APPROVED",
                    "BANK_CONNECTION_ERROR",
                    "BANK_NOT_VERIFIED",
                    "CARD_CLOSED",
                    "CARD_PAUSED",
                    "DECLINED",
                    "FRAUD_ADVICE",
                    "INACTIVE_ACCOUNT",
                    "INCORRECT_PIN",
                    "INSUFFICIENT_FUNDS",
                    "INVALID_CARD_DETAILS",
                    "MERCHANT_BLACKLIST",
                    "SINGLE_USE_RECHARGED",
                    "SWITCH_INOPERATIVE_ADVICE",
                    "UNAUTHORIZED_MERCHANT",
                    "UNKNOWN_HOST_TIMEOUT",
                    "USER_TRANSACTION_LIMIT"
                  ],
                  "example": "APPROVED",
                  "type": "string"
                },
                "token": {
                  "description": "Globally unique identifier.",
                  "example": "0c2adae9-f535-4505-8c35-421dad9bd0b6",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "Event types:\n* `AUTHORIZATION` - Authorize a transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a transaction.\n* `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Transaction is settled.\n* `CORRECTION_DEBIT` - Manual transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.\n* `RETURN` - A refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n",
                  "enum": [
                    "AUTHORIZATION",
                    "AUTHORIZATION_ADVICE",
                    "AUTHORIZATION_EXPIRY",
                    "AUTHORIZATION_REVERSAL",
                    "BALANCE_INQUIRY",
                    "CLEARING",
                    "CORRECTION_CREDIT",
                    "CORRECTION_DEBIT",
                    "CREDIT_AUTHORIZATION",
                    "CREDIT_AUTHORIZATION_ADVICE",
                    "FINANCIAL_AUTHORIZATION",
                    "FINANCIAL_CREDIT_AUTHORIZATION",
                    "RETURN",
                    "RETURN_REVERSAL",
                    "VOID"
                  ],
                  "type": "string"
                }
              },
              "required": ["amount", "created", "detailed_results", "result", "token", "type"],
              "type": "object"
            },
            "type": "array"
          },
          "merchant": {
            "properties": {
              "acceptor_id": {
                "description": "Unique identifier to identify the payment card acceptor.",
                "example": "333301802529120",
                "type": "string"
              },
              "city": {
                "description": "City of card acceptor.",
                "example": "NEW YORK",
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "country": {
                "description": "Uppercase country of card acceptor (see ISO 8583 specs).",
                "example": "USA",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              },
              "descriptor": {
                "description": "Short description of card acceptor.",
                "example": "COFFEE SHOP",
                "maxLength": 25,
                "minLength": 1,
                "type": "string"
              },
              "mcc": {
                "description": "Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.\n",
                "example": "5812",
                "maxLength": 4,
                "minLength": 4,
                "type": "string"
              },
              "state": {
                "description": "Geographic state of card acceptor (see ISO 8583 specs).",
                "example": "NY",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "type": "object"
          },
          "merchant_amount": {
            "description": "Analogous to the \"amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
            "example": 1500,
            "type": "integer"
          },
          "merchant_authorization_amount": {
            "description": "Analogous to the \"authorization_amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
            "example": 1500,
            "type": "integer"
          },
          "merchant_currency": {
            "description": "3-digit alphabetic ISO 4217 code for the local currency of the transaction.",
            "example": "USD",
            "type": "string"
          },
          "network": {
            "description": "Card network of the authorization. Can be `INTERLINK`, `MAESTRO`, `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot determine the network code from the upstream provider.\n",
            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
            "example": "MASTERCARD",
            "nullable": true,
            "type": "string"
          },
          "network_risk_score": {
            "description": "Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.\n\nA score may not be available for all authorizations, and where it is not, this field will be set to null.\n",
            "type": "number"
          },
          "pos": {
            "properties": {
              "entry_mode": {
                "properties": {
                  "card": {
                    "description": "Card status",
                    "enum": ["NOT_PRESENT", "PREAUTHORIZED", "PRESENT", "UNKNOWN"],
                    "type": "string"
                  },
                  "cardholder": {
                    "description": "Cardholder Presence status",
                    "enum": [
                      "DEFERRED_BILLING",
                      "ELECTRONIC_ORDER",
                      "INSTALLMENT",
                      "MAIL_ORDER",
                      "NOT_PRESENT",
                      "PREAUTHORIZED",
                      "PRESENT",
                      "REOCCURRING",
                      "TELEPHONE_ORDER",
                      "UNKNOWN"
                    ],
                    "type": "string"
                  },
                  "pan": {
                    "description": "Method of entry for the PAN",
                    "enum": [
                      "AUTO_ENTRY",
                      "BAR_CODE",
                      "CONTACTLESS",
                      "CREDENTIAL_ON_FILE",
                      "ECOMMERCE",
                      "ERROR_KEYED",
                      "ERROR_MAGNETIC_STRIPE",
                      "ICC",
                      "KEY_ENTERED",
                      "MAGNETIC_STRIPE",
                      "MANUAL",
                      "OCR",
                      "SECURE_CARDLESS",
                      "UNKNOWN",
                      "UNSPECIFIED"
                    ],
                    "type": "string"
                  },
                  "pin_entered": {
                    "description": "True if the PIN was entered",
                    "type": "boolean"
                  }
                },
                "required": ["card", "cardholder", "pan", "pin_entered"],
                "type": "object"
              },
              "terminal": {
                "properties": {
                  "attended": {
                    "description": "True if a clerk is present at the sale.",
                    "type": "boolean"
                  },
                  "card_retention_capable": {
                    "description": "True if the terminal is capable of partial approval. Partial approval is when part of a transaction is approved and another payment must be used for the remainder. Example scenario: A $40 transaction is attempted on a prepaid card with a $25 balance. If partial approval is enabled, $25 can be authorized, at which point the POS will prompt the user for an additional payment of $15.\n",
                    "type": "boolean"
                  },
                  "on_premise": {
                    "description": "True if the sale was made at the place of business (vs. mobile).",
                    "type": "boolean"
                  },
                  "operator": {
                    "description": "The person that is designed to swipe the card",
                    "enum": ["ADMINISTRATIVE", "CARDHOLDER", "CARD_ACCEPTOR", "UNKNOWN"],
                    "type": "string"
                  },
                  "pin_capability": {
                    "description": "Status of whether the POS is able to accept PINs",
                    "enum": ["CAPABLE", "INOPERATIVE", "NOT_CAPABLE", "UNSPECIFIED"],
                    "type": "string"
                  },
                  "type": {
                    "description": "POS Type",
                    "enum": [
                      "ADMINISTRATIVE",
                      "ATM",
                      "AUTHORIZATION",
                      "COUPON_MACHINE",
                      "DIAL_TERMINAL",
                      "ECOMMERCE",
                      "ECR",
                      "FUEL_MACHINE",
                      "HOME_TERMINAL",
                      "MICR",
                      "OFF_PREMISE",
                      "PAYMENT",
                      "PDA",
                      "PHONE",
                      "POINT",
                      "POS_TERMINAL",
                      "PUBLIC_UTILITY",
                      "SELF_SERVICE",
                      "TELEVISION",
                      "TELLER",
                      "TRAVELERS_CHECK_MACHINE",
                      "UNKNOWN",
                      "VENDING",
                      "VOICE"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "attended",
                  "card_retention_capable",
                  "on_premise",
                  "operator",
                  "pin_capability",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": ["entry_mode", "terminal"],
            "type": "object"
          },
          "result": {
            "description": "`APPROVED` or decline reason. See Event result types\n",
            "enum": [
              "APPROVED",
              "BANK_CONNECTION_ERROR",
              "BANK_NOT_VERIFIED",
              "CARD_CLOSED",
              "CARD_PAUSED",
              "DECLINED",
              "FRAUD_ADVICE",
              "INACTIVE_ACCOUNT",
              "INCORRECT_PIN",
              "INSUFFICIENT_FUNDS",
              "INVALID_CARD_DETAILS",
              "MERCHANT_BLACKLIST",
              "SINGLE_USE_RECHARGED",
              "SWITCH_INOPERATIVE_ADVICE",
              "UNAUTHORIZED_MERCHANT",
              "UNKNOWN_HOST_TIMEOUT",
              "USER_TRANSACTION_LIMIT"
            ],
            "example": "APPROVED",
            "type": "string"
          },
          "settled_amount": {
            "description": "Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.",
            "example": 1500,
            "type": "integer"
          },
          "status": {
            "description": "Status types:\n* `DECLINED` - The transaction was declined.\n* `EXPIRED` - Lithic reversed the authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant.\n* `SETTLED` - The transaction is complete.\n* `VOIDED` - The merchant has voided the previously pending authorization.\n",
            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
            "example": "SETTLED",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "token_info": {
            "properties": {
              "wallet_type": {
                "description": "Source of the token",
                "enum": ["APPLE_PAY", "GOOGLE_PAY", "MASTERPASS", "MERCHANT", "OTHER", "SAMSUNG_PAY"],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "acquirer_fee",
          "acquirer_reference_number",
          "amount",
          "authorization_amount",
          "authorization_code",
          "avs",
          "card_token",
          "created",
          "events",
          "merchant",
          "merchant_amount",
          "merchant_authorization_amount",
          "merchant_currency",
          "network",
          "network_risk_score",
          "pos",
          "result",
          "settled_amount",
          "status",
          "token",
          "token_info"
        ],
        "type": "object"
      },
      "TransactionEvent": {
        "description": "A single card transaction may include multiple events that affect the transaction state and lifecycle.",
        "properties": {
          "amount": {
            "description": "Amount of the transaction event (in cents), including any acquirer fees.",
            "example": 1500,
            "type": "integer"
          },
          "created": {
            "description": "RFC 3339 date and time this event entered the system. UTC time zone.",
            "example": "2023-09-26T21:14:28.637Z",
            "format": "date-time",
            "type": "string"
          },
          "detailed_results": {
            "items": {
              "enum": [
                "ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED",
                "ACCOUNT_INACTIVE",
                "ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED",
                "ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED",
                "ACCOUNT_UNDER_REVIEW",
                "ADDRESS_INCORRECT",
                "APPROVED",
                "AUTH_RULE_ALLOWED_COUNTRY",
                "AUTH_RULE_ALLOWED_MCC",
                "AUTH_RULE_BLOCKED_COUNTRY",
                "AUTH_RULE_BLOCKED_MCC",
                "CARD_CLOSED",
                "CARD_CRYPTOGRAM_VALIDATION_FAILURE",
                "CARD_EXPIRED",
                "CARD_EXPIRY_DATE_INCORRECT",
                "CARD_INVALID",
                "CARD_PAUSED",
                "CARD_PIN_INCORRECT",
                "CARD_RESTRICTED",
                "CARD_SECURITY_CODE_INCORRECT",
                "CARD_SPEND_LIMIT_EXCEEDED",
                "CONTACT_CARD_ISSUER",
                "CUSTOMER_ASA_TIMEOUT",
                "CUSTOM_ASA_RESULT",
                "DECLINED",
                "DO_NOT_HONOR",
                "FORMAT_ERROR",
                "INSUFFICIENT_FUNDING_SOURCE_BALANCE",
                "INSUFFICIENT_FUNDS",
                "LITHIC_SYSTEM_ERROR",
                "LITHIC_SYSTEM_RATE_LIMIT",
                "MALFORMED_ASA_RESPONSE",
                "MERCHANT_INVALID",
                "MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE",
                "MERCHANT_NOT_PERMITTED",
                "OVER_REVERSAL_ATTEMPTED",
                "PROGRAM_CARD_SPEND_LIMIT_EXCEEDED",
                "PROGRAM_SUSPENDED",
                "PROGRAM_USAGE_RESTRICTION",
                "REVERSAL_UNMATCHED",
                "SECURITY_VIOLATION",
                "SINGLE_USE_CARD_REATTEMPTED",
                "TRANSACTION_INVALID",
                "TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL",
                "TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER",
                "TRANSACTION_PREVIOUSLY_COMPLETED",
                "UNAUTHORIZED_MERCHANT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "result": {
            "description": "`APPROVED` or decline reason.\n\nResult types:\n* `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).\n* `APPROVED` - Transaction is approved.\n* `BANK_CONNECTION_ERROR` - Please reconnect a funding source.\n* `BANK_NOT_VERIFIED` - Please confirm the funding source.\n* `CARD_CLOSED` - Card state was closed at the time of authorization.\n* `CARD_PAUSED` - Card state was paused at the time of authorization.\n* `FRAUD_ADVICE` - Transaction declined due to risk.\n* `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).\n* `INCORRECT_PIN` - PIN verification failed.\n* `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.\n* `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.\n* `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.\n* `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.\n* `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.\n* `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.\n* `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.\n* `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.\n",
            "enum": [
              "APPROVED",
              "BANK_CONNECTION_ERROR",
              "BANK_NOT_VERIFIED",
              "CARD_CLOSED",
              "CARD_PAUSED",
              "DECLINED",
              "FRAUD_ADVICE",
              "INACTIVE_ACCOUNT",
              "INCORRECT_PIN",
              "INSUFFICIENT_FUNDS",
              "INVALID_CARD_DETAILS",
              "MERCHANT_BLACKLIST",
              "SINGLE_USE_RECHARGED",
              "SWITCH_INOPERATIVE_ADVICE",
              "UNAUTHORIZED_MERCHANT",
              "UNKNOWN_HOST_TIMEOUT",
              "USER_TRANSACTION_LIMIT"
            ],
            "example": "APPROVED",
            "type": "string"
          },
          "token": {
            "description": "Globally unique identifier.",
            "example": "0c2adae9-f535-4505-8c35-421dad9bd0b6",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Event types:\n* `AUTHORIZATION` - Authorize a transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a transaction.\n* `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Transaction is settled.\n* `CORRECTION_DEBIT` - Manual transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.\n* `RETURN` - A refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n",
            "enum": [
              "AUTHORIZATION",
              "AUTHORIZATION_ADVICE",
              "AUTHORIZATION_EXPIRY",
              "AUTHORIZATION_REVERSAL",
              "BALANCE_INQUIRY",
              "CLEARING",
              "CORRECTION_CREDIT",
              "CORRECTION_DEBIT",
              "CREDIT_AUTHORIZATION",
              "CREDIT_AUTHORIZATION_ADVICE",
              "FINANCIAL_AUTHORIZATION",
              "FINANCIAL_CREDIT_AUTHORIZATION",
              "RETURN",
              "RETURN_REVERSAL",
              "VOID"
            ],
            "type": "string"
          }
        },
        "required": ["amount", "created", "detailed_results", "result", "token", "type"],
        "type": "object"
      },
      "Transfer": {
        "properties": {
          "category": {
            "description": "Status types:\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
            "enum": ["TRANSFER"],
            "type": "string"
          },
          "created": {
            "description": "Date and time when the transfer occurred. UTC time zone.",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
            "type": "string"
          },
          "descriptor": {
            "description": "A string that provides a description of the transfer; may be useful to display to users.",
            "type": "string"
          },
          "events": {
            "description": "A list of all financial events that have modified this trasnfer.",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                  "type": "integer"
                },
                "created": {
                  "description": "Date and time when the financial event occurred. UTC time zone.",
                  "format": "date-time",
                  "type": "string"
                },
                "result": {
                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                  "enum": ["APPROVED", "DECLINED"],
                  "type": "string"
                },
                "token": {
                  "description": "Globally unique identifier.",
                  "format": "uuid",
                  "type": "string"
                },
                "type": {
                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                  "enum": [
                    "ACH_INSUFFICIENT_FUNDS",
                    "ACH_ORIGINATION_PENDING",
                    "ACH_ORIGINATION_RELEASED",
                    "ACH_RECEIPT_PENDING",
                    "ACH_RECEIPT_RELEASED",
                    "ACH_RETURN",
                    "AUTHORIZATION",
                    "AUTHORIZATION_ADVICE",
                    "AUTHORIZATION_EXPIRY",
                    "AUTHORIZATION_REVERSAL",
                    "BALANCE_INQUIRY",
                    "CLEARING",
                    "CORRECTION_CREDIT",
                    "CORRECTION_DEBIT",
                    "CREDIT_AUTHORIZATION",
                    "CREDIT_AUTHORIZATION_ADVICE",
                    "FINANCIAL_AUTHORIZATION",
                    "FINANCIAL_CREDIT_AUTHORIZATION",
                    "RETURN",
                    "RETURN_REVERSAL",
                    "TRANSFER",
                    "TRANSFER_INSUFFICIENT_FUNDS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "from_balance": {
            "description": "The updated balance of the sending financial account.",
            "items": {
              "description": "Balance of a Financial Account",
              "properties": {
                "available_amount": {
                  "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                  "type": "integer"
                },
                "created": {
                  "description": "Date and time for when the balance was first created.",
                  "format": "date-time",
                  "type": "string"
                },
                "currency": {
                  "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                  "type": "string"
                },
                "financial_account_token": {
                  "description": "Globally unique identifier for the financial account that holds this balance.",
                  "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "format": "uuid",
                  "type": "string"
                },
                "financial_account_type": {
                  "description": "Type of financial account.",
                  "enum": ["ISSUING", "OPERATING", "RESERVE"],
                  "type": "string"
                },
                "last_transaction_event_token": {
                  "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                  "format": "uuid",
                  "type": "string"
                },
                "last_transaction_token": {
                  "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                  "format": "uuid",
                  "type": "string"
                },
                "pending_amount": {
                  "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                  "type": "integer"
                },
                "total_amount": {
                  "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                  "type": "integer"
                },
                "updated": {
                  "description": "Date and time for when the balance was last updated.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "available_amount",
                "created",
                "currency",
                "financial_account_token",
                "financial_account_type",
                "last_transaction_event_token",
                "last_transaction_token",
                "pending_amount",
                "total_amount",
                "updated"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "pending_amount": {
            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
            "type": "integer"
          },
          "result": {
            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
            "enum": ["APPROVED", "DECLINED"],
            "type": "string"
          },
          "settled_amount": {
            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents).",
            "type": "integer"
          },
          "status": {
            "description": "Status types:\n* `DECLINED` - The transfer was declined.\n* `EXPIRED` - The transfer was held in pending for too long and expired.\n* `PENDING` - The transfer is pending release from a hold.\n* `SETTLED` - The transfer is completed.\n* `VOIDED` - The transfer was reversed before it settled.\n",
            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
            "type": "string"
          },
          "to_balance": {
            "description": "The updated balance of the receiving financial account.",
            "items": {
              "description": "Balance of a Financial Account",
              "properties": {
                "available_amount": {
                  "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                  "type": "integer"
                },
                "created": {
                  "description": "Date and time for when the balance was first created.",
                  "format": "date-time",
                  "type": "string"
                },
                "currency": {
                  "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                  "type": "string"
                },
                "financial_account_token": {
                  "description": "Globally unique identifier for the financial account that holds this balance.",
                  "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "format": "uuid",
                  "type": "string"
                },
                "financial_account_type": {
                  "description": "Type of financial account.",
                  "enum": ["ISSUING", "OPERATING", "RESERVE"],
                  "type": "string"
                },
                "last_transaction_event_token": {
                  "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                  "format": "uuid",
                  "type": "string"
                },
                "last_transaction_token": {
                  "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                  "format": "uuid",
                  "type": "string"
                },
                "pending_amount": {
                  "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                  "type": "integer"
                },
                "total_amount": {
                  "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                  "type": "integer"
                },
                "updated": {
                  "description": "Date and time for when the balance was last updated.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "available_amount",
                "created",
                "currency",
                "financial_account_token",
                "financial_account_type",
                "last_transaction_event_token",
                "last_transaction_token",
                "pending_amount",
                "total_amount",
                "updated"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "token": {
            "description": "Globally unique identifier for the transfer event.",
            "format": "uuid",
            "type": "string"
          },
          "updated": {
            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateBankAccountApiRequest": {
        "properties": {
          "address": {
            "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
            "properties": {
              "address1": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address1",
                "type": "string"
              },
              "address2": {
                "maxLength": 40,
                "minLength": 1,
                "title": "Address2",
                "type": "string"
              },
              "city": {
                "maxLength": 40,
                "minLength": 1,
                "title": "City",
                "type": "string"
              },
              "country": {
                "maxLength": 3,
                "minLength": 3,
                "pattern": "^[A-Z]{3}$",
                "title": "Country",
                "type": "string"
              },
              "postal_code": {
                "maxLength": 10,
                "minLength": 5,
                "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                "title": "Postal Code",
                "type": "string"
              },
              "state": {
                "maxLength": 2,
                "minLength": 2,
                "title": "State",
                "type": "string"
              }
            },
            "required": ["address1", "city", "country", "postal_code", "state"],
            "title": "Address",
            "type": "object"
          },
          "company_id": {
            "maxLength": 10,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]*$",
            "title": "Company Id",
            "type": "string"
          },
          "dob": {
            "description": "Date of Birth of the Individual that owns the external bank account",
            "format": "date",
            "title": "Date of Birth",
            "type": "string"
          },
          "doing_business_as": {
            "title": "Doing Business As",
            "type": "string"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "pattern": "^[!-~ ]*$",
            "title": "Name",
            "type": "string"
          },
          "owner": {
            "maxLength": 22,
            "minLength": 1,
            "pattern": "^[!-~ ]*$",
            "title": "Owner",
            "type": "string"
          },
          "owner_type": {
            "enum": ["BUSINESS", "INDIVIDUAL"],
            "title": "OwnerType",
            "type": "string"
          },
          "user_defined_id": {
            "title": "User Defined ID",
            "type": "string"
          }
        },
        "title": "UpdateBankAccountApiRequest",
        "type": "object"
      },
      "UpdateFinancialAccountRequest": {
        "properties": {
          "nickname": {
            "maxLength": 256,
            "title": "Nickname",
            "type": "string"
          }
        },
        "title": "UpdateFinancialAccountRequest",
        "type": "object"
      },
      "VerificationMethod": {
        "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
        "title": "VerificationMethod",
        "type": "string"
      },
      "VerificationState": {
        "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
        "title": "VerificationState"
      },
      "settlementSummaryDetails": {
        "nullable": true,
        "properties": {
          "disputes_gross_amount": {
            "description": "The total gross amount of disputes settlements.",
            "example": 0,
            "type": "integer"
          },
          "institution": {
            "description": "The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).",
            "example": "00001",
            "type": "string"
          },
          "interchange_gross_amount": {
            "description": "The total amount of interchange.",
            "example": -7,
            "type": "integer"
          },
          "network": {
            "description": "Card network where the transaction took place",
            "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
            "example": "MASTERCARD",
            "nullable": false,
            "type": "string"
          },
          "other_fees_gross_amount": {
            "description": "Total amount of gross other fees outside of interchange.",
            "example": 0,
            "type": "integer"
          },
          "settled_net_amount": {
            "description": "The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).",
            "example": 1893,
            "type": "integer"
          },
          "transactions_gross_amount": {
            "description": "The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).",
            "example": 1900,
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "webhooks": {
    "account_holder.created": {
      "post": {
        "description": "Occurs when a new account_holder is created and is either ACCEPTED or PENDING_REVIEW.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "account_token": "00000000-0000-0000-0000-000000000001",
                    "created": "2023-09-26 16:41:40.530987",
                    "event_type": "account_holder.created",
                    "status": "ACCEPTED",
                    "status_reasons": [],
                    "token": "00000000-0000-0000-0000-000000000001"
                  }
                ],
                "properties": {
                  "account_token": {
                    "description": "The token of the account that was created.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "created": {
                    "description": "When the account_holder was created",
                    "format": "date-time",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The name of the event",
                    "enum": ["account_holder.created"],
                    "example": "account_holder.created",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of the account_holder that was created.",
                    "enum": ["ACCEPTED", "PENDING_REVIEW"],
                    "example": "ACCEPTED",
                    "type": "string"
                  },
                  "status_reasons": {
                    "items": {
                      "description": "If status is not ACCEPTED, status_reasons provides the reasons an account_holder is PENDING_REVIEW.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "token": {
                    "description": "The token of the account_holder that was created.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "account_holder.created",
        "tags": ["Event Types"]
      }
    },
    "account_holder.updated": {
      "post": {
        "description": "Occurs when a new account_holder is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "business_account_token": null,
                    "created": "2023-09-26 16:41:40.530938",
                    "email": "john@lithic.com",
                    "event_type": "account_holder.updated",
                    "external_id": null,
                    "first_name": "John",
                    "last_name": "Appleseed",
                    "phone_number": 15555555555,
                    "token": "00000000-0000-0000-0000-000000000001"
                  }
                ],
                "properties": {
                  "business_account_token": {
                    "description": "If applicable, represents the business account token associated with the account_holder.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "created": {
                    "description": "When the account_holder updated event was created",
                    "format": "date-time",
                    "type": "string"
                  },
                  "email": {
                    "description": "If updated, the newly updated email associated with the account_holder otherwise the existing email is provided.",
                    "example": "johnny@lithic.com",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The name of the event",
                    "enum": ["account_holder.updated"],
                    "example": "account_holder.updated",
                    "type": "string"
                  },
                  "external_id": {
                    "description": "If applicable, represents the external_id associated with the account_holder.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "If applicable, represents the account_holder's first name.",
                    "example": "Johnny",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "If applicable, represents the account_holder's last name.",
                    "example": "Appleseed",
                    "type": "string"
                  },
                  "legal_business_name": {
                    "description": "If applicable, represents the account_holder's business name.",
                    "example": "Lithic",
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "If updated, the newly updated phone_number associated with the account_holder otherwise the existing phone_number is provided.",
                    "example": "15555555555",
                    "type": "string"
                  },
                  "token": {
                    "description": "The token of the account_holder that was created.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "account_holder.updated",
        "tags": ["Event Types"]
      }
    },
    "account_holder.verification": {
      "post": {
        "description": "Occurs when an asynchronous account_holder's verification is completed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "account_token": "00000000-0000-0000-0000-000000000001",
                    "created": "2023-09-26 16:41:40.530938",
                    "event_type": "account_holder.verification",
                    "status": "ACCEPTED",
                    "status_reasons": [],
                    "token": "00000000-0000-0000-0000-000000000001"
                  }
                ],
                "properties": {
                  "account_token": {
                    "description": "The token of the account being verified.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "created": {
                    "description": "When the account_holder verification status was updated",
                    "format": "date-time",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The name of the event",
                    "enum": ["account_holder.verification"],
                    "example": "account_holder.verification",
                    "type": "string"
                  },
                  "status": {
                    "description": "The status of the account_holder that was created",
                    "enum": ["ACCEPTED", "PENDING_REVIEW", "REJECTED"],
                    "example": "ACCEPTED",
                    "type": "string"
                  },
                  "status_reasons": {
                    "items": {
                      "description": "If status is not ACCEPTED, status_reasons provides the reasons an account_holder was REJECTED or is PENDING_REVIEW.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "token": {
                    "description": "The token of the account_holder being verified.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "account_holder.verification",
        "tags": ["Event Types"]
      }
    },
    "balance.updated": {
      "post": {
        "description": "Financial Account Balance Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "data": [
                      {
                        "available_amount": 10000,
                        "created": "2023-09-14T12:52:44Z",
                        "currency": "USD",
                        "last_transaction_event_token": "10265fe1-7058-451a-bfdf-db6f0ece177c",
                        "last_transaction_token": "1e338050-295e-477b-884a-4f87d7d4b648",
                        "pending_amount": 0,
                        "token": "1e338050-295e-477b-884a-4f87d7d4b648",
                        "total_amount": 10000,
                        "type": "ISSUING",
                        "updated": "2023-09-14T12:52:44Z"
                      }
                    ]
                  },
                  {
                    "event_type": "balance.updated"
                  }
                ],
                "properties": {
                  "data": {
                    "items": {
                      "description": "Balance of a Financial Account",
                      "properties": {
                        "available_amount": {
                          "description": "Funds available for spend in the currency's smallest unit (e.g., cents for USD)",
                          "type": "integer"
                        },
                        "created": {
                          "description": "Date and time for when the balance was first created.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "currency": {
                          "description": "3-digit alphabetic ISO 4217 code for the local currency of the balance.",
                          "type": "string"
                        },
                        "financial_account_token": {
                          "description": "Globally unique identifier for the financial account that holds this balance.",
                          "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "uuid",
                          "type": "string"
                        },
                        "financial_account_type": {
                          "description": "Type of financial account.",
                          "enum": ["ISSUING", "OPERATING", "RESERVE"],
                          "type": "string"
                        },
                        "last_transaction_event_token": {
                          "description": "Globally unique identifier for the last financial transaction event that impacted this balance.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "last_transaction_token": {
                          "description": "Globally unique identifier for the last financial transaction that impacted this balance.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "pending_amount": {
                          "description": "Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).",
                          "type": "integer"
                        },
                        "total_amount": {
                          "description": "The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).",
                          "type": "integer"
                        },
                        "updated": {
                          "description": "Date and time for when the balance was last updated.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "available_amount",
                        "created",
                        "currency",
                        "financial_account_token",
                        "financial_account_type",
                        "last_transaction_event_token",
                        "last_transaction_token",
                        "pending_amount",
                        "total_amount",
                        "updated"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "event_type": {
                    "description": "The type of event that occurred.",
                    "enum": ["balance.updated"],
                    "example": "balance.updated",
                    "type": "string"
                  }
                },
                "required": ["data", "event_type"],
                "type": "object"
              }
            }
          }
        },
        "summary": "balance.updated",
        "tags": ["Event Types"]
      }
    },
    "card.created": {
      "post": {
        "description": "Occurs when a new card is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "card_token": "00000000-0000-0000-0000-000000000001"
                  },
                  {
                    "event_type": "card.created",
                    "replacement_for": "00000000-0000-0000-0000-000000000000"
                  }
                ],
                "properties": {
                  "card_token": {
                    "description": "The token of the card that was created.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The type of event that occurred.",
                    "enum": ["card.created"],
                    "example": "card.created",
                    "type": "string"
                  },
                  "replacement_for": {
                    "description": "The token of the card that was replaced, if the new card is a replacement card.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "required": ["card_token", "event_type"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "card.created",
        "tags": ["Event Types"]
      }
    },
    "card.renewed": {
      "post": {
        "description": "Occurs when a card is renewed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "card_token": "00000000-0000-0000-0000-000000000001",
                    "event_type": "card.renewed",
                    "exp_month": "01",
                    "exp_year": "2030",
                    "previous_exp_month": "01",
                    "previous_exp_year": "2024"
                  }
                ],
                "properties": {
                  "card_token": {
                    "description": "The token of the card that was renewed.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The type of event that occurred.",
                    "enum": ["card.renewed"],
                    "example": "card.renewed",
                    "type": "string"
                  },
                  "exp_month": {
                    "description": "The new expiration month of the card.",
                    "example": "01",
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "The new expiration year of the card.",
                    "example": "2030",
                    "type": "string"
                  },
                  "previous_exp_month": {
                    "description": "The previous expiration month of the card.",
                    "example": "01",
                    "type": "string"
                  },
                  "previous_exp_year": {
                    "description": "The previous expiration year of the card.",
                    "example": "2024",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "card.renewed",
        "tags": ["Event Types"]
      }
    },
    "card.shipped": {
      "post": {
        "description": "Occurs when a card is shipped.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "card_token": "00000000-0000-0000-0000-000000000001",
                    "event_type": "card.shipped",
                    "shipping_method": "USPS without tracking envelope",
                    "tracking_number": "1Z9999999999999999"
                  }
                ],
                "properties": {
                  "card_token": {
                    "description": "The token of the card that was shipped.",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "format": "uuid",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The type of event that occurred.",
                    "enum": ["card.shipped"],
                    "example": "card.shipped",
                    "type": "string"
                  },
                  "shipping_method": {
                    "description": "The specific shipping method used to ship the card.",
                    "enum": [
                      "Ex-US expedited with tracking",
                      "Ex-US standard with tracking",
                      "Ex-US standard without tracking",
                      "FedEx 2 days",
                      "FedEx express",
                      "FedEx overnight",
                      "USPS priority",
                      "USPS with tracking",
                      "USPS without tracking envelope",
                      "USPS without tracking envelope non-machine",
                      "USPS without tracking flat"
                    ],
                    "example": "USPS without tracking envelope",
                    "type": "string"
                  },
                  "tracking_number": {
                    "description": "The tracking number of the shipment.",
                    "example": "1Z9999999999999999",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "card.shipped",
        "tags": ["Event Types"]
      }
    },
    "card_transaction.updated": {
      "post": {
        "description": "Occurs when a card transaction happens.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "acquirer_fee": {
                        "description": "Fee assessed by the merchant and paid for by the cardholder in the smallest unit of the currency. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.",
                        "example": 0,
                        "type": "integer"
                      },
                      "acquirer_reference_number": {
                        "description": "Unique identifier assigned to a transaction by the acquirer that can be used in dispute and chargeback filing.\n",
                        "example": "12345678987654321234567",
                        "maxLength": 23,
                        "minLength": 23,
                        "nullable": true,
                        "type": "string"
                      },
                      "amount": {
                        "description": "Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time, and will represent the settled amount once the transaction is settled.",
                        "example": 1500,
                        "type": "integer"
                      },
                      "authorization_amount": {
                        "description": "Authorization amount (in cents) of the transaction, including any acquirer fees. This amount always represents the amount authorized for the transaction, unaffected by settlement.",
                        "example": 1500,
                        "type": "integer"
                      },
                      "authorization_code": {
                        "description": "A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.",
                        "example": "123456",
                        "maxLength": 6,
                        "minLength": 6,
                        "type": "string"
                      },
                      "avs": {
                        "properties": {
                          "address": {
                            "description": "Cardholder address",
                            "type": "string"
                          },
                          "zipcode": {
                            "description": "Cardholder ZIP code",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "card_token": {
                        "description": "Token for the card used in this transaction.",
                        "example": "19c22c47-7a75-43ee-9891-595419830f7e",
                        "format": "uuid",
                        "type": "string"
                      },
                      "cardholder_authentication": {
                        "nullable": true,
                        "properties": {
                          "3ds_version": {
                            "description": "3-D Secure Protocol version. Possible enum values:\n* `1`: 3-D Secure Protocol version 1.x applied to the transaction.\n* `2`: 3-D Secure Protocol version 2.x applied to the transaction.\n* `null`: 3-D Secure was not used for the transaction\n",
                            "example": "2",
                            "nullable": true,
                            "type": "string"
                          },
                          "acquirer_exemption": {
                            "description": "Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible enum values:\n* `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.\n* `LOW_VALUE`: Low Value Payment exemption.\n* `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).\n* `NONE`: No exemption applied.\n* `RECURRING_PAYMENT`: Recurring Payment exemption.\n* `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.\n* `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.\n* `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.\n\nMaps to the 3-D Secure `transChallengeExemption` field.\n",
                            "enum": [
                              "AUTHENTICATION_OUTAGE_EXCEPTION",
                              "LOW_VALUE",
                              "MERCHANT_INITIATED_TRANSACTION",
                              "NONE",
                              "RECURRING_PAYMENT",
                              "SECURE_CORPORATE_PAYMENT",
                              "STRONG_CUSTOMER_AUTHENTICATION_DELEGATION",
                              "TRANSACTION_RISK_ANALYSIS"
                            ],
                            "example": "NONE",
                            "type": "string"
                          },
                          "authentication_result": {
                            "description": "Outcome of the 3DS authentication process. Possible enum values:\n* `SUCCESS`: 3DS authentication was successful and the transaction is considered authenticated.\n* `DECLINE`: 3DS authentication was attempted but was unsuccessful — i.e., the issuer declined to authenticate the cardholder; note that Lithic populates this value on a best-effort basis based on common data across the 3DS authentication and ASA data elements.\n* `ATTEMPTS`: 3DS authentication was attempted but full authentication did not occur. A proof of attempted authenticated is provided by the merchant.\n* `NONE`: 3DS authentication was not performed on the transaction.\n",
                            "enum": ["ATTEMPTS", "DECLINE", "NONE", "SUCCESS"],
                            "example": "SUCCESS",
                            "type": "string"
                          },
                          "decision_made_by": {
                            "description": "Indicator for which party made the 3DS authentication decision. Possible enum values:\n* `NETWORK`: A networks tand-in service decided on the outcome; for token authentications (as indicated in the `liability_shift` attribute), this is the default value\n* `LITHIC_DEFAULT`: A default decision was made by Lithic, without running a rules-based authentication; this value will be set on card programs that do not participate in one of our two 3DS product tiers\n* `LITHIC_RULES`: A rules-based authentication was conducted by Lithic and Lithic decided on the outcome\n* `CUSTOMER_ENDPOINT`: Lithic customer decided on the outcome based on a real-time request sent to a configured endpoint\n* `UNKNOWN`: Data on which party decided is unavailable\n",
                            "enum": [
                              "CUSTOMER_ENDPOINT",
                              "LITHIC_DEFAULT",
                              "LITHIC_RULES",
                              "NETWORK",
                              "UNKNOWN"
                            ],
                            "example": "LITHIC_RULES",
                            "type": "string"
                          },
                          "liability_shift": {
                            "description": "Indicates whether chargeback liability shift applies to the transaction. Possible enum values:\n* `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.\n* `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.\n* `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.\n* `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.\n",
                            "enum": [
                              "3DS_AUTHENTICATED",
                              "ACQUIRER_EXEMPTION",
                              "NONE",
                              "TOKEN_AUTHENTICATED"
                            ],
                            "type": "string"
                          },
                          "three_ds_authentication_token": {
                            "description": "Unique identifier you can use to match a given 3DS authentication and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.",
                            "example": "a6e372d0-b40a-43eb-b0d1-4e1aebef5875",
                            "format": "uuid",
                            "type": "string"
                          },
                          "verification_attempted": {
                            "description": "Verification attempted values:\n* `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.\n* `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.\n* `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).\n* `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)\n* `OTP`: One-time password verification was attempted by the ACS.\n",
                            "enum": ["APP_LOGIN", "BIOMETRIC", "NONE", "OTHER", "OTP"],
                            "example": "NONE",
                            "type": "string"
                          },
                          "verification_result": {
                            "description": "This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.\n\nVerification result values:\n* `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.\n* `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.\n* `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.\n* `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.\n* `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.\n* `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.\n\nNote that the following `transStatus` values are not represented by this field:\n* `C`: Challenge Required\n* `D`: Challenge Required; decoupled authentication confirmed\n* `I`: Informational only\n* `S`: Challenge using Secure Payment Confirmation (SPC)\n",
                            "enum": [
                              "CANCELLED",
                              "FAILED",
                              "FRICTIONLESS",
                              "NOT_ATTEMPTED",
                              "REJECTED",
                              "SUCCESS"
                            ],
                            "example": "FRICTIONLESS",
                            "type": "string"
                          }
                        },
                        "required": [
                          "3ds_version",
                          "acquirer_exemption",
                          "authentication_result",
                          "decision_made_by",
                          "liability_shift",
                          "three_ds_authentication_token",
                          "verification_attempted",
                          "verification_result"
                        ],
                        "type": "object"
                      },
                      "created": {
                        "description": "Date and time when the transaction first occurred. UTC time zone.",
                        "example": "2023-09-26T21:14:28.637Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "events": {
                        "description": "A list of all events that have modified this transaction.",
                        "items": {
                          "description": "A single card transaction may include multiple events that affect the transaction state and lifecycle.",
                          "properties": {
                            "amount": {
                              "description": "Amount of the transaction event (in cents), including any acquirer fees.",
                              "example": 1500,
                              "type": "integer"
                            },
                            "created": {
                              "description": "RFC 3339 date and time this event entered the system. UTC time zone.",
                              "example": "2023-09-26T21:14:28.637Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "detailed_results": {
                              "items": {
                                "enum": [
                                  "ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED",
                                  "ACCOUNT_INACTIVE",
                                  "ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED",
                                  "ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED",
                                  "ACCOUNT_UNDER_REVIEW",
                                  "ADDRESS_INCORRECT",
                                  "APPROVED",
                                  "AUTH_RULE_ALLOWED_COUNTRY",
                                  "AUTH_RULE_ALLOWED_MCC",
                                  "AUTH_RULE_BLOCKED_COUNTRY",
                                  "AUTH_RULE_BLOCKED_MCC",
                                  "CARD_CLOSED",
                                  "CARD_CRYPTOGRAM_VALIDATION_FAILURE",
                                  "CARD_EXPIRED",
                                  "CARD_EXPIRY_DATE_INCORRECT",
                                  "CARD_INVALID",
                                  "CARD_PAUSED",
                                  "CARD_PIN_INCORRECT",
                                  "CARD_RESTRICTED",
                                  "CARD_SECURITY_CODE_INCORRECT",
                                  "CARD_SPEND_LIMIT_EXCEEDED",
                                  "CONTACT_CARD_ISSUER",
                                  "CUSTOMER_ASA_TIMEOUT",
                                  "CUSTOM_ASA_RESULT",
                                  "DECLINED",
                                  "DO_NOT_HONOR",
                                  "FORMAT_ERROR",
                                  "INSUFFICIENT_FUNDING_SOURCE_BALANCE",
                                  "INSUFFICIENT_FUNDS",
                                  "LITHIC_SYSTEM_ERROR",
                                  "LITHIC_SYSTEM_RATE_LIMIT",
                                  "MALFORMED_ASA_RESPONSE",
                                  "MERCHANT_INVALID",
                                  "MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE",
                                  "MERCHANT_NOT_PERMITTED",
                                  "OVER_REVERSAL_ATTEMPTED",
                                  "PROGRAM_CARD_SPEND_LIMIT_EXCEEDED",
                                  "PROGRAM_SUSPENDED",
                                  "PROGRAM_USAGE_RESTRICTION",
                                  "REVERSAL_UNMATCHED",
                                  "SECURITY_VIOLATION",
                                  "SINGLE_USE_CARD_REATTEMPTED",
                                  "TRANSACTION_INVALID",
                                  "TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL",
                                  "TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER",
                                  "TRANSACTION_PREVIOUSLY_COMPLETED",
                                  "UNAUTHORIZED_MERCHANT"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "result": {
                              "description": "`APPROVED` or decline reason.\n\nResult types:\n* `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).\n* `APPROVED` - Transaction is approved.\n* `BANK_CONNECTION_ERROR` - Please reconnect a funding source.\n* `BANK_NOT_VERIFIED` - Please confirm the funding source.\n* `CARD_CLOSED` - Card state was closed at the time of authorization.\n* `CARD_PAUSED` - Card state was paused at the time of authorization.\n* `FRAUD_ADVICE` - Transaction declined due to risk.\n* `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).\n* `INCORRECT_PIN` - PIN verification failed.\n* `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.\n* `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.\n* `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.\n* `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.\n* `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.\n* `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.\n* `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.\n* `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.\n",
                              "enum": [
                                "APPROVED",
                                "BANK_CONNECTION_ERROR",
                                "BANK_NOT_VERIFIED",
                                "CARD_CLOSED",
                                "CARD_PAUSED",
                                "DECLINED",
                                "FRAUD_ADVICE",
                                "INACTIVE_ACCOUNT",
                                "INCORRECT_PIN",
                                "INSUFFICIENT_FUNDS",
                                "INVALID_CARD_DETAILS",
                                "MERCHANT_BLACKLIST",
                                "SINGLE_USE_RECHARGED",
                                "SWITCH_INOPERATIVE_ADVICE",
                                "UNAUTHORIZED_MERCHANT",
                                "UNKNOWN_HOST_TIMEOUT",
                                "USER_TRANSACTION_LIMIT"
                              ],
                              "example": "APPROVED",
                              "type": "string"
                            },
                            "token": {
                              "description": "Globally unique identifier.",
                              "example": "0c2adae9-f535-4505-8c35-421dad9bd0b6",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": {
                              "description": "Event types:\n* `AUTHORIZATION` - Authorize a transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a transaction.\n* `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Transaction is settled.\n* `CORRECTION_DEBIT` - Manual transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.\n* `RETURN` - A refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n",
                              "enum": [
                                "AUTHORIZATION",
                                "AUTHORIZATION_ADVICE",
                                "AUTHORIZATION_EXPIRY",
                                "AUTHORIZATION_REVERSAL",
                                "BALANCE_INQUIRY",
                                "CLEARING",
                                "CORRECTION_CREDIT",
                                "CORRECTION_DEBIT",
                                "CREDIT_AUTHORIZATION",
                                "CREDIT_AUTHORIZATION_ADVICE",
                                "FINANCIAL_AUTHORIZATION",
                                "FINANCIAL_CREDIT_AUTHORIZATION",
                                "RETURN",
                                "RETURN_REVERSAL",
                                "VOID"
                              ],
                              "type": "string"
                            }
                          },
                          "required": ["amount", "created", "detailed_results", "result", "token", "type"],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "merchant": {
                        "properties": {
                          "acceptor_id": {
                            "description": "Unique identifier to identify the payment card acceptor.",
                            "example": "333301802529120",
                            "type": "string"
                          },
                          "city": {
                            "description": "City of card acceptor.",
                            "example": "NEW YORK",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                          },
                          "country": {
                            "description": "Uppercase country of card acceptor (see ISO 8583 specs).",
                            "example": "USA",
                            "maxLength": 3,
                            "minLength": 3,
                            "type": "string"
                          },
                          "descriptor": {
                            "description": "Short description of card acceptor.",
                            "example": "COFFEE SHOP",
                            "maxLength": 25,
                            "minLength": 1,
                            "type": "string"
                          },
                          "mcc": {
                            "description": "Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.\n",
                            "example": "5812",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string"
                          },
                          "state": {
                            "description": "Geographic state of card acceptor (see ISO 8583 specs).",
                            "example": "NY",
                            "maxLength": 2,
                            "minLength": 2,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "merchant_amount": {
                        "description": "Analogous to the \"amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                        "example": 1500,
                        "type": "integer"
                      },
                      "merchant_authorization_amount": {
                        "description": "Analogous to the \"authorization_amount\" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.",
                        "example": 1500,
                        "type": "integer"
                      },
                      "merchant_currency": {
                        "description": "3-digit alphabetic ISO 4217 code for the local currency of the transaction.",
                        "example": "USD",
                        "type": "string"
                      },
                      "network": {
                        "description": "Card network of the authorization. Can be `INTERLINK`, `MAESTRO`, `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot determine the network code from the upstream provider.\n",
                        "enum": ["INTERLINK", "MAESTRO", "MASTERCARD", "UNKNOWN", "VISA"],
                        "example": "MASTERCARD",
                        "nullable": true,
                        "type": "string"
                      },
                      "network_risk_score": {
                        "description": "Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.\n\nA score may not be available for all authorizations, and where it is not, this field will be set to null.\n",
                        "type": "number"
                      },
                      "pos": {
                        "properties": {
                          "entry_mode": {
                            "properties": {
                              "card": {
                                "description": "Card status",
                                "enum": ["NOT_PRESENT", "PREAUTHORIZED", "PRESENT", "UNKNOWN"],
                                "type": "string"
                              },
                              "cardholder": {
                                "description": "Cardholder Presence status",
                                "enum": [
                                  "DEFERRED_BILLING",
                                  "ELECTRONIC_ORDER",
                                  "INSTALLMENT",
                                  "MAIL_ORDER",
                                  "NOT_PRESENT",
                                  "PREAUTHORIZED",
                                  "PRESENT",
                                  "REOCCURRING",
                                  "TELEPHONE_ORDER",
                                  "UNKNOWN"
                                ],
                                "type": "string"
                              },
                              "pan": {
                                "description": "Method of entry for the PAN",
                                "enum": [
                                  "AUTO_ENTRY",
                                  "BAR_CODE",
                                  "CONTACTLESS",
                                  "CREDENTIAL_ON_FILE",
                                  "ECOMMERCE",
                                  "ERROR_KEYED",
                                  "ERROR_MAGNETIC_STRIPE",
                                  "ICC",
                                  "KEY_ENTERED",
                                  "MAGNETIC_STRIPE",
                                  "MANUAL",
                                  "OCR",
                                  "SECURE_CARDLESS",
                                  "UNKNOWN",
                                  "UNSPECIFIED"
                                ],
                                "type": "string"
                              },
                              "pin_entered": {
                                "description": "True if the PIN was entered",
                                "type": "boolean"
                              }
                            },
                            "required": ["card", "cardholder", "pan", "pin_entered"],
                            "type": "object"
                          },
                          "terminal": {
                            "properties": {
                              "attended": {
                                "description": "True if a clerk is present at the sale.",
                                "type": "boolean"
                              },
                              "card_retention_capable": {
                                "description": "True if the terminal is capable of partial approval. Partial approval is when part of a transaction is approved and another payment must be used for the remainder. Example scenario: A $40 transaction is attempted on a prepaid card with a $25 balance. If partial approval is enabled, $25 can be authorized, at which point the POS will prompt the user for an additional payment of $15.\n",
                                "type": "boolean"
                              },
                              "on_premise": {
                                "description": "True if the sale was made at the place of business (vs. mobile).",
                                "type": "boolean"
                              },
                              "operator": {
                                "description": "The person that is designed to swipe the card",
                                "enum": ["ADMINISTRATIVE", "CARDHOLDER", "CARD_ACCEPTOR", "UNKNOWN"],
                                "type": "string"
                              },
                              "pin_capability": {
                                "description": "Status of whether the POS is able to accept PINs",
                                "enum": ["CAPABLE", "INOPERATIVE", "NOT_CAPABLE", "UNSPECIFIED"],
                                "type": "string"
                              },
                              "type": {
                                "description": "POS Type",
                                "enum": [
                                  "ADMINISTRATIVE",
                                  "ATM",
                                  "AUTHORIZATION",
                                  "COUPON_MACHINE",
                                  "DIAL_TERMINAL",
                                  "ECOMMERCE",
                                  "ECR",
                                  "FUEL_MACHINE",
                                  "HOME_TERMINAL",
                                  "MICR",
                                  "OFF_PREMISE",
                                  "PAYMENT",
                                  "PDA",
                                  "PHONE",
                                  "POINT",
                                  "POS_TERMINAL",
                                  "PUBLIC_UTILITY",
                                  "SELF_SERVICE",
                                  "TELEVISION",
                                  "TELLER",
                                  "TRAVELERS_CHECK_MACHINE",
                                  "UNKNOWN",
                                  "VENDING",
                                  "VOICE"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "attended",
                              "card_retention_capable",
                              "on_premise",
                              "operator",
                              "pin_capability",
                              "type"
                            ],
                            "type": "object"
                          }
                        },
                        "required": ["entry_mode", "terminal"],
                        "type": "object"
                      },
                      "result": {
                        "description": "`APPROVED` or decline reason. See Event result types\n",
                        "enum": [
                          "APPROVED",
                          "BANK_CONNECTION_ERROR",
                          "BANK_NOT_VERIFIED",
                          "CARD_CLOSED",
                          "CARD_PAUSED",
                          "DECLINED",
                          "FRAUD_ADVICE",
                          "INACTIVE_ACCOUNT",
                          "INCORRECT_PIN",
                          "INSUFFICIENT_FUNDS",
                          "INVALID_CARD_DETAILS",
                          "MERCHANT_BLACKLIST",
                          "SINGLE_USE_RECHARGED",
                          "SWITCH_INOPERATIVE_ADVICE",
                          "UNAUTHORIZED_MERCHANT",
                          "UNKNOWN_HOST_TIMEOUT",
                          "USER_TRANSACTION_LIMIT"
                        ],
                        "example": "APPROVED",
                        "type": "string"
                      },
                      "settled_amount": {
                        "description": "Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.",
                        "example": 1500,
                        "type": "integer"
                      },
                      "status": {
                        "description": "Status types:\n* `DECLINED` - The transaction was declined.\n* `EXPIRED` - Lithic reversed the authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant.\n* `SETTLED` - The transaction is complete.\n* `VOIDED` - The merchant has voided the previously pending authorization.\n",
                        "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                        "example": "SETTLED",
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "token_info": {
                        "properties": {
                          "wallet_type": {
                            "description": "Source of the token",
                            "enum": [
                              "APPLE_PAY",
                              "GOOGLE_PAY",
                              "MASTERPASS",
                              "MERCHANT",
                              "OTHER",
                              "SAMSUNG_PAY"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "acquirer_fee",
                      "acquirer_reference_number",
                      "amount",
                      "authorization_amount",
                      "authorization_code",
                      "avs",
                      "card_token",
                      "created",
                      "events",
                      "merchant",
                      "merchant_amount",
                      "merchant_authorization_amount",
                      "merchant_currency",
                      "network",
                      "network_risk_score",
                      "pos",
                      "result",
                      "settled_amount",
                      "status",
                      "token",
                      "token_info"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["card_transaction.updated"],
                        "example": "card_transaction.updated",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "acquirer_fee": 0,
                    "acquirer_reference_number": null,
                    "amount": 1800,
                    "authorization_amount": 1800,
                    "authorization_code": "071471",
                    "card_token": "aac502f9-aecc-458a-954e-4bcf6edb6123",
                    "cardholder_authentication": {
                      "3ds_version": null,
                      "acquirer_exemption": "NONE",
                      "liability_shift": "NONE",
                      "verification_attempted": "NONE",
                      "verification_result": "NOT_ATTEMPTED"
                    },
                    "created": "2023-08-03T18:42:30Z",
                    "event_type": "card_transaction.updated",
                    "events": [
                      {
                        "amount": 1800,
                        "created": "2023-08-03T18:42:30Z",
                        "result": "APPROVED",
                        "token": "bbbf1e86-322d-11ee-9779-00505685a123",
                        "type": "AUTHORIZATION"
                      }
                    ],
                    "merchant": {
                      "acceptor_id": "452322000053360",
                      "city": "gosq.com",
                      "country": "USA",
                      "descriptor": "SQ *SOMA EATS",
                      "mcc": "5812",
                      "state": "CA"
                    },
                    "merchant_amount": 1800,
                    "merchant_authorization_amount": 1800,
                    "merchant_currency": "USD",
                    "network": "MASTERCARD",
                    "result": "APPROVED",
                    "settled_amount": 0,
                    "status": "PENDING",
                    "token": "c30c2182-1e69-4e0d-b40f-eec0d2a19123"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "card_transaction.updated",
        "tags": ["Event Types"]
      }
    },
    "digital_wallet.tokenization_approval_request": {
      "post": {
        "description": "Occurs when a tokenization approval request is made.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "account_token": "00000000-0000-0000-0000-000000000002",
                    "card_token": "00000000-0000-0000-0000-000000000001",
                    "created": "2023-09-18T12:34:56Z",
                    "customer_tokenization_decision": {
                      "latency": "100",
                      "outcome": "APPROVED",
                      "responder_url": "https://example.com",
                      "response_code": "123456"
                    },
                    "device": {
                      "imei": "123456789012345",
                      "ip_address": "1.1.1.1",
                      "location": "37.3860517,-122.0838511"
                    },
                    "digital_wallet_token_metadata": {
                      "payment_account_info": {
                        "account_holder_data": {
                          "phone_number": "+123456789012"
                        },
                        "pan_unique_reference": "pan_unique_ref_1234567890123456789012345678",
                        "payment_account_reference": "ref_1234567890123456789012",
                        "token_unique_reference": "token_unique_ref_1234567890123456789012345678"
                      },
                      "payment_app_instance_id": "app_instance_123456789012345678901234567890",
                      "status": "Pending",
                      "token_requestor_id": "12345678901",
                      "token_requestor_name": "APPLE_PAY"
                    },
                    "event_type": "digital_wallet.tokenization_approval_request",
                    "issuer_decision": "APPROVED",
                    "tokenization_source": "PUSH_PROVISION",
                    "tokenization_token": "tok_1234567890abcdef",
                    "wallet_decisioning_info": {
                      "account_score": "100",
                      "device_score": "100",
                      "recommendation_reasons": ["Reason1"],
                      "recommended_decision": "Decision1"
                    }
                  }
                ],
                "properties": {
                  "account_token": {
                    "description": "Unique identifier for the user tokenizing a card",
                    "example": "00000000-0000-0000-0000-000000000002",
                    "type": "string"
                  },
                  "card_token": {
                    "description": "Unique identifier for the card being tokenized",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "type": "string"
                  },
                  "created": {
                    "description": "Indicate when the request was received from Mastercard or Visa",
                    "format": "date-time",
                    "type": "string"
                  },
                  "customer_tokenization_decision": {
                    "description": "Contains information about the customer's tokenization decision if they are enrolled",
                    "properties": {
                      "latency": {
                        "description": "Time in ms it took for the customer's URL to respond",
                        "example": "100",
                        "type": "string"
                      },
                      "outcome": {
                        "description": "The outcome of the customer's decision",
                        "enum": [
                          "APPROVED",
                          "DECLINED",
                          "ERROR",
                          "INVALID_RESPONSE",
                          "REQUIRE_ADDITIONAL_AUTHENTICATION",
                          "TIMEOUT"
                        ],
                        "example": "APPROVED",
                        "type": "string"
                      },
                      "responder_url": {
                        "description": "The customer's subscribed URL",
                        "example": "https://example.com",
                        "type": "string"
                      },
                      "response_code": {
                        "description": "The response code that the customer provided",
                        "example": "123456",
                        "type": "string"
                      }
                    },
                    "required": ["outcome", "responder_url"],
                    "type": "object"
                  },
                  "device": {
                    "description": "Contains information about the target device to be provisioned",
                    "properties": {
                      "imei": {
                        "description": "The IMEI number of the device being provisioned",
                        "example": "123456789012345",
                        "maxLength": 15,
                        "type": "string"
                      },
                      "ip_address": {
                        "description": "The IP of the device initiating the request",
                        "example": "1.1.1.1",
                        "maxLength": 64,
                        "type": "string"
                      },
                      "location": {
                        "description": "Latitude and longitude where the device the consumer is attempting to authorize is located",
                        "example": "37.3860517,-122.0838511",
                        "maxLength": 64,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "digital_wallet_token_metadata": {
                    "description": "Contains the metadata for the digital wallet being tokenized",
                    "properties": {
                      "payment_account_info": {
                        "description": "Contains the information of the account responsible for the payment.",
                        "properties": {
                          "account_holder_data": {
                            "description": "Additional information that can be used to identify the account holder, such as name, address, etc",
                            "properties": {
                              "phone_number": {
                                "description": "The phone number, may contain country code along with phone number when countryDialInCode is not present",
                                "maxLength": 20,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "pan_unique_reference": {
                            "description": "Reference to the PAN that is unique per Wallet Provider",
                            "maxLength": 64,
                            "type": "string"
                          },
                          "payment_account_reference": {
                            "description": "The unique account reference assigned to the PAN",
                            "maxLength": 29,
                            "type": "string"
                          },
                          "token_unique_reference": {
                            "description": "A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.",
                            "maxLength": 64,
                            "type": "string"
                          }
                        },
                        "required": ["account_holder_data"],
                        "type": "object"
                      },
                      "payment_app_instance_id": {
                        "description": "The identifier of the Payment App instance within a device that will be provisioned with a token",
                        "maxLength": 48,
                        "type": "string"
                      },
                      "status": {
                        "description": "The current status of the digital wallet token. Pending or declined.",
                        "type": "string"
                      },
                      "token_requestor_id": {
                        "description": "The party that requested the digitization",
                        "maxLength": 11,
                        "minLength": 11,
                        "type": "string"
                      },
                      "token_requestor_name": {
                        "description": "Human-readable name of the wallet that the token_requestor_id maps to.",
                        "enum": ["APPLE_PAY", "GOOGLE_PAY", "SAMSUNG_PAY"],
                        "example": "APPLE_PAY",
                        "type": "string"
                      }
                    },
                    "required": ["payment_account_info", "status"],
                    "type": "object"
                  },
                  "event_type": {
                    "description": "The name of this event",
                    "enum": ["digital_wallet.tokenization_approval_request"],
                    "example": "digital_wallet.tokenization_approval_request",
                    "type": "string"
                  },
                  "issuer_decision": {
                    "description": "Whether Lithic decisioned on the token, and if so, what the decision was. APPROVED/VERIFICATION_REQUIRED/DENIED.",
                    "enum": ["APPROVED", "DENIED", "VERIFICATION_REQUIRED"],
                    "example": "APPROVED",
                    "type": "string"
                  },
                  "tokenization_source": {
                    "description": "The source of the tokenization.",
                    "enum": ["ACCOUNT_ON_FILE", "MANUAL_PROVISION", "PUSH_PROVISION"],
                    "example": "PUSH_PROVISION",
                    "type": "string"
                  },
                  "tokenization_token": {
                    "description": "Unique identifier for the digital wallet token attempt",
                    "type": "string"
                  },
                  "wallet_decisioning_info": {
                    "description": "Contains information about the decision recommended by the Wallet Provider",
                    "properties": {
                      "account_score": {
                        "description": "Score given to the account by the Wallet Provider",
                        "example": "100",
                        "maxLength": 64,
                        "type": "string"
                      },
                      "device_score": {
                        "description": "Score given to the device by the Wallet Provider",
                        "example": "100",
                        "maxLength": 64,
                        "type": "string"
                      },
                      "recommendation_reasons": {
                        "description": "Reasons provided to the Wallet Provider on how the recommended decision was reached",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "recommended_decision": {
                        "description": "The decision recommended by the Wallet Provider",
                        "maxLength": 64,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "account_token",
                  "card_token",
                  "created",
                  "digital_wallet_token_metadata",
                  "event_type",
                  "issuer_decision",
                  "tokenization_token",
                  "wallet_decisioning_info"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "digital_wallet.tokenization_approval_request",
        "tags": ["Event Types"]
      }
    },
    "digital_wallet.tokenization_result": {
      "post": {
        "description": "Occurs when a tokenization request succeeded or failed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "examples": [
                  {
                    "account_token": "00000000-0000-0000-0000-000000000002",
                    "card_token": "00000000-0000-0000-0000-000000000001",
                    "created": "2020-01-01T00:00:00Z",
                    "event_type": "digital_wallet.tokenization_result",
                    "tokenization_result_details": {
                      "issuer_decision": "APPROVED",
                      "tokenization_decline_reasons": ["ACCOUNT_SCORE_1", "DEVICE_SCORE_1"],
                      "wallet_decision": "APPROVED"
                    },
                    "tokenization_token": "00000000-0000-0000-0000-000000000003"
                  }
                ],
                "properties": {
                  "account_token": {
                    "description": "Account token",
                    "example": "00000000-0000-0000-0000-000000000002",
                    "type": "string"
                  },
                  "card_token": {
                    "description": "Card token",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "type": "string"
                  },
                  "created": {
                    "description": "Created date",
                    "example": "2020-01-01T00:00:00Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The name of this event",
                    "enum": ["digital_wallet.tokenization_result"],
                    "example": "digital_wallet.tokenization_result",
                    "type": "string"
                  },
                  "tokenization_result_details": {
                    "additionalProperties": false,
                    "description": "The result of the tokenization request.",
                    "properties": {
                      "customer_decision": {
                        "description": "The customer's tokenization decision if applicable.",
                        "type": "string"
                      },
                      "issuer_decision": {
                        "description": "Lithic's tokenization decision.",
                        "type": "string"
                      },
                      "token_activated_date_time": {
                        "description": "An RFC 3339 timestamp indicating when the tokenization succeeded.",
                        "example": "2020-01-01T00:00:00Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "tokenization_decline_reasons": {
                        "description": "A list of reasons the tokenization failed.",
                        "example": ["ACCOUNT_SCORE_1", "DEVICE_SCORE_1"],
                        "items": {
                          "enum": [
                            "ACCOUNT_SCORE_1",
                            "ALL_WALLET_DECLINE_REASONS_PRESENT",
                            "CARD_EXPIRY_MONTH_MISMATCH",
                            "CARD_EXPIRY_YEAR_MISMATCH",
                            "CARD_INVALID_STATE",
                            "CUSTOMER_RED_PATH",
                            "CVC_MISMATCH",
                            "DEVICE_SCORE_1",
                            "INVALID_CUSTOMER_RESPONSE",
                            "NETWORK_FAILURE",
                            "WALLET_RECOMMENDED_DECISION_RED"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "wallet_decision": {
                        "description": "The wallet's recommended decision.",
                        "example": "APPROVED",
                        "type": "string"
                      }
                    },
                    "required": ["issuer_decision", "tokenization_decline_reasons"],
                    "type": "object"
                  },
                  "tokenization_token": {
                    "description": "Tokenization token",
                    "example": "00000000-0000-0000-0000-000000000003",
                    "type": "string"
                  }
                },
                "required": [
                  "account_token",
                  "card_token",
                  "created",
                  "event_type",
                  "tokenization_result_details",
                  "tokenization_token"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "digital_wallet.tokenization_result",
        "tags": ["Event Types"]
      }
    },
    "digital_wallet.tokenization_two_factor_authentication_code": {
      "post": {
        "description": "Occurs when a tokenization request 2FA auth code is delivered.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Self Serve 2FA Code Schema",
                "examples": [
                  {
                    "account_token": "00000000-0000-0000-0000-000000000002",
                    "activation_method": {
                      "type": "TEXT_TO_CARDHOLDER_NUMBER",
                      "value": 5555555555
                    },
                    "authentication_code": 123456,
                    "card_token": "00000000-0000-0000-0000-000000000001",
                    "created": "2020-01-01T00:00:00Z",
                    "event_type": "digital_wallet.tokenization_two_factor_authentication_code",
                    "tokenization_token": "00000000-0000-0000-0000-000000000003"
                  }
                ],
                "properties": {
                  "account_token": {
                    "description": "Unique identifier for the user tokenizing a card",
                    "example": "00000000-0000-0000-0000-000000000002",
                    "type": "string"
                  },
                  "activation_method": {
                    "description": "",
                    "properties": {
                      "type": {
                        "description": "The communication method that the user has selected to use to receive the 2FA Authentication Code.\nSupported Values: Sms = \"TEXT_TO_CARDHOLDER_NUMBER\". Email = \"EMAIL_TO_CARDHOLDER_ADDRESS\"",
                        "enum": ["EMAIL_TO_CARDHOLDER_ADDRESS", "TEXT_TO_CARDHOLDER_NUMBER"],
                        "example": "TEXT_TO_CARDHOLDER_NUMBER",
                        "type": "string"
                      },
                      "value": {
                        "description": "The location where the user wants to receive the 2FA Authentication Code.\nThe format depends on the ActivationMethod.Type field. If Type is Email, the Value will be the email address. If the Type is Sms, the Value will be the phone number.",
                        "example": "5555555555",
                        "type": "string"
                      }
                    },
                    "required": ["type", "value"],
                    "type": "object"
                  },
                  "authentication_code": {
                    "description": "2FA Authentication Code to provide to the user tokenizing a card.",
                    "example": "123456",
                    "type": "string"
                  },
                  "card_token": {
                    "description": "Unique identifier for the card being tokenized",
                    "example": "00000000-0000-0000-0000-000000000001",
                    "type": "string"
                  },
                  "created": {
                    "description": "Indicate when the request was received from Mastercard or Visa",
                    "example": "2020-01-01T00:00:00Z",
                    "format": "date-time",
                    "title": "Created",
                    "type": "string"
                  },
                  "event_type": {
                    "description": "The name of this event",
                    "enum": ["digital_wallet.tokenization_two_factor_authentication_code"],
                    "example": "digital_wallet.tokenization_two_factor_authentication_code",
                    "type": "string"
                  },
                  "tokenization_token": {
                    "description": "Unique identifier for the tokenization",
                    "example": "00000000-0000-0000-0000-000000000003",
                    "type": "string"
                  }
                },
                "required": [
                  "account_token",
                  "activation_method",
                  "authentication_code",
                  "card_token",
                  "created",
                  "event_type",
                  "tokenization_token"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "digital_wallet.tokenization_two_factor_authentication_code",
        "tags": ["Event Types"]
      }
    },
    "dispute.updated": {
      "post": {
        "description": "Occurs when a dispute is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Dispute.",
                    "properties": {
                      "amount": {
                        "description": "Amount under dispute. May be different from the original transaction amount.",
                        "type": "integer"
                      },
                      "arbitration_date": {
                        "description": "Date dispute entered arbitration.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "created": {
                        "description": "Timestamp of when first Dispute was reported.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "customer_filed_date": {
                        "description": "Date that the dispute was filed by the customer making the dispute.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "customer_note": {
                        "description": "End customer description of the reason for the dispute.",
                        "maxLength": 10000,
                        "nullable": true,
                        "type": "string"
                      },
                      "network_claim_ids": {
                        "description": "Unique identifiers for the dispute from the network.",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                      },
                      "network_filed_date": {
                        "description": "Date that the dispute was submitted to the network.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "network_reason_code": {
                        "description": "Network reason code used to file the dispute.",
                        "nullable": true,
                        "type": "string"
                      },
                      "prearbitration_date": {
                        "description": "Date dispute entered pre-arbitration.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "primary_claim_id": {
                        "description": "Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network",
                        "nullable": true,
                        "type": "string"
                      },
                      "reason": {
                        "description": "Dispute reason:\n* `ATM_CASH_MISDISPENSE`: ATM cash misdispense.\n* `CANCELLED`: Transaction was cancelled by the customer.\n* `DUPLICATED`: The transaction was a duplicate.\n* `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.\n* `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.\n* `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.\n* `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.\n* `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.\n* `INCORRECT_AMOUNT`: The transaction amount was incorrect.\n* `MISSING_AUTH`: The transaction was missing authorization.\n* `OTHER`: Other reason.\n* `PROCESSING_ERROR`: Processing error.\n* `REFUND_NOT_PROCESSED`: The refund was not processed.\n* `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.\n",
                        "enum": [
                          "ATM_CASH_MISDISPENSE",
                          "CANCELLED",
                          "DUPLICATED",
                          "FRAUD_CARD_NOT_PRESENT",
                          "FRAUD_CARD_PRESENT",
                          "FRAUD_OTHER",
                          "GOODS_SERVICES_NOT_AS_DESCRIBED",
                          "GOODS_SERVICES_NOT_RECEIVED",
                          "INCORRECT_AMOUNT",
                          "MISSING_AUTH",
                          "OTHER",
                          "PROCESSING_ERROR",
                          "RECURRING_TRANSACTION_NOT_CANCELLED",
                          "REFUND_NOT_PROCESSED"
                        ],
                        "type": "string"
                      },
                      "representment_date": {
                        "description": "Date the representment was received.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "resolution_amount": {
                        "description": "Resolution amount net of network fees.",
                        "nullable": true,
                        "type": "integer"
                      },
                      "resolution_date": {
                        "description": "Date that the dispute was resolved.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "resolution_note": {
                        "description": "Note by Dispute team on the case resolution.",
                        "maxLength": 10000,
                        "nullable": true,
                        "type": "string"
                      },
                      "resolution_reason": {
                        "description": "Reason for the dispute resolution:\n* `CASE_LOST`: This case was lost at final arbitration.\n* `NETWORK_REJECTED`: Network rejected.\n* `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.\n* `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.\n* `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.\n* `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.\n* `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.\n* `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.\n* `PAST_FILING_DATE`: Past filing date.\n* `PREARBITRATION_REJECTED`: Prearbitration rejected.\n* `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.\n* `REFUNDED`: Refunded.\n* `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.\n* `WITHDRAWN`: Withdrawn.\n* `WON_ARBITRATION`: Won arbitration.\n* `WON_FIRST_CHARGEBACK`: Won first chargeback.\n* `WON_PREARBITRATION`: Won prearbitration.\n",
                        "enum": [
                          "CASE_LOST",
                          "NETWORK_REJECTED",
                          "NO_DISPUTE_RIGHTS_3DS",
                          "NO_DISPUTE_RIGHTS_BELOW_THRESHOLD",
                          "NO_DISPUTE_RIGHTS_CONTACTLESS",
                          "NO_DISPUTE_RIGHTS_HYBRID",
                          "NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS",
                          "NO_DISPUTE_RIGHTS_OTHER",
                          "PAST_FILING_DATE",
                          "PREARBITRATION_REJECTED",
                          "PROCESSOR_REJECTED_OTHER",
                          "REFUNDED",
                          "REFUNDED_AFTER_CHARGEBACK",
                          "WITHDRAWN",
                          "WON_ARBITRATION",
                          "WON_FIRST_CHARGEBACK",
                          "WON_PREARBITRATION"
                        ],
                        "nullable": true,
                        "type": "string"
                      },
                      "status": {
                        "description": "Status types:\n* `NEW` - New dispute case is opened.\n* `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.\n* `SUBMITTED` - Dispute is submitted to the card network.\n* `REPRESENTMENT` - Case has entered second presentment.\n* `PREARBITRATION` - Case has entered prearbitration.\n* `ARBITRATION` - Case has entered arbitration.\n* `CASE_WON` - Case was won and credit will be issued.\n* `CASE_CLOSED` - Case was lost or withdrawn.\n",
                        "enum": [
                          "ARBITRATION",
                          "CASE_CLOSED",
                          "CASE_WON",
                          "NEW",
                          "PENDING_CUSTOMER",
                          "PREARBITRATION",
                          "REPRESENTMENT",
                          "SUBMITTED"
                        ],
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "transaction_token": {
                        "description": "The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.",
                        "format": "uuid",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "arbitration_date",
                      "created",
                      "customer_filed_date",
                      "customer_note",
                      "network_claim_ids",
                      "network_filed_date",
                      "network_reason_code",
                      "prearbitration_date",
                      "primary_claim_id",
                      "reason",
                      "representment_date",
                      "resolution_amount",
                      "resolution_date",
                      "resolution_note",
                      "resolution_reason",
                      "status",
                      "token",
                      "transaction_token"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["dispute.updated"],
                        "example": "dispute.updated",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "amount": 200,
                    "arbitration_date": null,
                    "created": "2023-07-19T18:39:34.768Z",
                    "customer_filed_date": "2023-07-20T09:00:00Z",
                    "customer_note": "I didn't receive the goods.",
                    "event_type": "dispute.updated",
                    "network_claim_ids": ["CLAIM-001"],
                    "network_filed_date": "2023-07-21T11:00:00Z",
                    "network_reason_code": "4808",
                    "prearbitration_date": null,
                    "primary_claim_id": "CLAIM-001",
                    "reason": "GOODS_SERVICES_NOT_RECEIVED",
                    "representment_date": null,
                    "resolution_amount": null,
                    "resolution_date": null,
                    "resolution_note": null,
                    "resolution_reason": null,
                    "status": "SUBMITTED",
                    "token": "b24230fa-181e-4b31-9a5c-276747e619a0",
                    "transaction_token": "12345624-aa69-4cbc-a946-30d90181b621"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "dispute.updated",
        "tags": ["Event Types"]
      }
    },
    "dispute_evidence.upload_failed": {
      "post": {
        "description": "Occurs when a dispute evidence upload fails.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Dispute evidence.",
                    "properties": {
                      "created": {
                        "description": "Timestamp of when dispute evidence was created.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "dispute_token": {
                        "description": "Dispute token evidence is attached to.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "download_url": {
                        "description": "URL to download evidence. Only shown when `upload_status` is `UPLOADED`.",
                        "type": "string"
                      },
                      "filename": {
                        "description": "File name of evidence. Recommended to give the dispute evidence a human-readable identifier.",
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "upload_status": {
                        "description": "Upload status types:\n* `DELETED` - Evidence was deleted.\n* `ERROR` - Evidence upload failed.\n* `PENDING` - Evidence is pending upload.\n* `REJECTED` - Evidence was rejected.\n* `UPLOADED` - Evidence was uploaded.\n",
                        "enum": ["DELETED", "ERROR", "PENDING", "REJECTED", "UPLOADED"],
                        "type": "string"
                      },
                      "upload_url": {
                        "description": "URL to upload evidence. Only shown when `upload_status` is `PENDING`.",
                        "type": "string"
                      }
                    },
                    "required": ["created", "dispute_token", "token", "upload_status"],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["dispute_evidence.upload_failed"],
                        "example": "dispute_evidence.upload_failed",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "created": "2023-07-19T18:39:34.768Z",
                    "dispute_token": "f7a74167-d6d5-4f7d-8501-36df11ba371b",
                    "event_type": "dispute_evidence.upload_failed",
                    "token": "48b8e42c-a645-44f6-8604-20c3127e9008",
                    "upload_status": "REJECTED"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "dispute_evidence.upload_failed",
        "tags": ["Event Types"]
      }
    },
    "external_bank_account.created": {
      "post": {
        "description": "Occurs when an external bank account is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account_token": {
                    "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                    "format": "uuid",
                    "title": "Account Token",
                    "type": "string"
                  },
                  "address": {
                    "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                    "properties": {
                      "address1": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address1",
                        "type": "string"
                      },
                      "address2": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address2",
                        "type": "string"
                      },
                      "city": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "City",
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 3,
                        "minLength": 3,
                        "pattern": "^[A-Z]{3}$",
                        "title": "Country",
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 10,
                        "minLength": 5,
                        "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                        "title": "Postal Code",
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 2,
                        "minLength": 2,
                        "title": "State",
                        "type": "string"
                      }
                    },
                    "required": ["address1", "city", "country", "postal_code", "state"],
                    "title": "Address",
                    "type": "object"
                  },
                  "company_id": {
                    "description": "Optional field that helps identify bank accounts in receipts",
                    "title": "Company Id",
                    "type": "string"
                  },
                  "country": {
                    "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                    "title": "Country",
                    "type": "string"
                  },
                  "created": {
                    "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                    "format": "date-time",
                    "title": "Created",
                    "type": "string"
                  },
                  "currency": {
                    "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                    "title": "Currency",
                    "type": "string"
                  },
                  "dob": {
                    "description": "Date of Birth of the Individual that owns the external bank account",
                    "format": "date",
                    "title": "Date of Birth",
                    "type": "string"
                  },
                  "doing_business_as": {
                    "title": "Doing Business As",
                    "type": "string"
                  },
                  "event_type": {
                    "title": "Event Type",
                    "type": "string"
                  },
                  "name": {
                    "description": "The nickname given to this record of External Bank Account",
                    "title": "Name",
                    "type": "string"
                  },
                  "owner": {
                    "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                    "title": "Owner",
                    "type": "string"
                  },
                  "owner_type": {
                    "enum": ["BUSINESS", "INDIVIDUAL"],
                    "title": "Owner Type",
                    "type": "string"
                  },
                  "routing_number": {
                    "title": "Routing Number",
                    "type": "string"
                  },
                  "state": {
                    "enum": ["CLOSED", "ENABLED", "PAUSED"],
                    "title": "State",
                    "type": "string"
                  },
                  "token": {
                    "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                    "format": "uuid",
                    "title": "Token",
                    "type": "string"
                  },
                  "type": {
                    "enum": ["CHECKING", "SAVINGS"],
                    "title": "Type",
                    "type": "string"
                  },
                  "user_defined_id": {
                    "title": "User Defined ID",
                    "type": "string"
                  },
                  "verification_attempts": {
                    "description": "The number of attempts at verification",
                    "title": "Verification Attempts",
                    "type": "integer"
                  },
                  "verification_failed_reason": {
                    "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                    "title": "Verification Failed Reason",
                    "type": "string"
                  },
                  "verification_method": {
                    "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                    "title": "Verification Method",
                    "type": "string"
                  },
                  "verification_state": {
                    "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                    "title": "Verification State",
                    "type": "string"
                  }
                },
                "required": [
                  "country",
                  "created",
                  "currency",
                  "event_type",
                  "owner",
                  "owner_type",
                  "routing_number",
                  "state",
                  "token",
                  "type",
                  "verification_attempts",
                  "verification_method",
                  "verification_state"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "external_bank_account.created",
        "tags": ["Event Types"]
      }
    },
    "external_bank_account.updated": {
      "post": {
        "description": "Occurs when an external bank account is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account_token": {
                    "description": "Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null",
                    "format": "uuid",
                    "title": "Account Token",
                    "type": "string"
                  },
                  "address": {
                    "description": "Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.",
                    "properties": {
                      "address1": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address1",
                        "type": "string"
                      },
                      "address2": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "Address2",
                        "type": "string"
                      },
                      "city": {
                        "maxLength": 40,
                        "minLength": 1,
                        "title": "City",
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 3,
                        "minLength": 3,
                        "pattern": "^[A-Z]{3}$",
                        "title": "Country",
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 10,
                        "minLength": 5,
                        "pattern": "^[0-9]{5}(-[0-9]{4})?$",
                        "title": "Postal Code",
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 2,
                        "minLength": 2,
                        "title": "State",
                        "type": "string"
                      }
                    },
                    "required": ["address1", "city", "country", "postal_code", "state"],
                    "title": "Address",
                    "type": "object"
                  },
                  "company_id": {
                    "description": "Optional field that helps identify bank accounts in receipts",
                    "title": "Company Id",
                    "type": "string"
                  },
                  "country": {
                    "description": "The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA",
                    "title": "Country",
                    "type": "string"
                  },
                  "created": {
                    "description": "An ISO 8601 string representing when this funding source was added to the Lithic account.",
                    "format": "date-time",
                    "title": "Created",
                    "type": "string"
                  },
                  "currency": {
                    "description": "currency of the external account 3-digit alphabetic ISO 4217 code",
                    "title": "Currency",
                    "type": "string"
                  },
                  "dob": {
                    "description": "Date of Birth of the Individual that owns the external bank account",
                    "format": "date",
                    "title": "Date of Birth",
                    "type": "string"
                  },
                  "doing_business_as": {
                    "title": "Doing Business As",
                    "type": "string"
                  },
                  "event_type": {
                    "title": "Event Type",
                    "type": "string"
                  },
                  "name": {
                    "description": "The nickname given to this record of External Bank Account",
                    "title": "Name",
                    "type": "string"
                  },
                  "owner": {
                    "description": "Legal Name of the business or individual who owns the external account. This will appear in statements",
                    "title": "Owner",
                    "type": "string"
                  },
                  "owner_type": {
                    "enum": ["BUSINESS", "INDIVIDUAL"],
                    "title": "Owner Type",
                    "type": "string"
                  },
                  "routing_number": {
                    "title": "Routing Number",
                    "type": "string"
                  },
                  "state": {
                    "enum": ["CLOSED", "ENABLED", "PAUSED"],
                    "title": "State",
                    "type": "string"
                  },
                  "token": {
                    "description": "A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association",
                    "format": "uuid",
                    "title": "Token",
                    "type": "string"
                  },
                  "type": {
                    "enum": ["CHECKING", "SAVINGS"],
                    "title": "Type",
                    "type": "string"
                  },
                  "user_defined_id": {
                    "title": "User Defined ID",
                    "type": "string"
                  },
                  "verification_attempts": {
                    "description": "The number of attempts at verification",
                    "title": "Verification Attempts",
                    "type": "integer"
                  },
                  "verification_failed_reason": {
                    "description": "Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network",
                    "title": "Verification Failed Reason",
                    "type": "string"
                  },
                  "verification_method": {
                    "enum": ["MANUAL", "MICRO_DEPOSIT", "PLAID", "PRENOTE"],
                    "title": "Verification Method",
                    "type": "string"
                  },
                  "verification_state": {
                    "enum": ["ENABLED", "FAILED_VERIFICATION", "INSUFFICIENT_FUNDS", "PENDING"],
                    "title": "Verification State",
                    "type": "string"
                  }
                },
                "required": [
                  "country",
                  "created",
                  "currency",
                  "event_type",
                  "owner",
                  "owner_type",
                  "routing_number",
                  "state",
                  "token",
                  "type",
                  "verification_attempts",
                  "verification_method",
                  "verification_state"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "external_bank_account.updated",
        "tags": ["Event Types"]
      }
    },
    "payment_transaction.created": {
      "post": {
        "description": "Occurs when a payment transaction is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "properties": {
                          "category": {
                            "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                            "enum": ["ACH", "CARD", "TRANSFER"],
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                            "type": "string"
                          },
                          "descriptor": {
                            "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of all financial events that have modified this financial transaction.",
                            "items": {
                              "properties": {
                                "amount": {
                                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                  "type": "integer"
                                },
                                "created": {
                                  "description": "Date and time when the financial event occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                  "enum": ["APPROVED", "DECLINED"],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier.",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                  "enum": [
                                    "ACH_INSUFFICIENT_FUNDS",
                                    "ACH_ORIGINATION_PENDING",
                                    "ACH_ORIGINATION_RELEASED",
                                    "ACH_RECEIPT_PENDING",
                                    "ACH_RECEIPT_RELEASED",
                                    "ACH_RETURN",
                                    "AUTHORIZATION",
                                    "AUTHORIZATION_ADVICE",
                                    "AUTHORIZATION_EXPIRY",
                                    "AUTHORIZATION_REVERSAL",
                                    "BALANCE_INQUIRY",
                                    "CLEARING",
                                    "CORRECTION_CREDIT",
                                    "CORRECTION_DEBIT",
                                    "CREDIT_AUTHORIZATION",
                                    "CREDIT_AUTHORIZATION_ADVICE",
                                    "FINANCIAL_AUTHORIZATION",
                                    "FINANCIAL_CREDIT_AUTHORIZATION",
                                    "RETURN",
                                    "RETURN_REVERSAL",
                                    "TRANSFER",
                                    "TRANSFER_INSUFFICIENT_FUNDS"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pending_amount": {
                            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                            "type": "integer"
                          },
                          "result": {
                            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "settled_amount": {
                            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "category",
                          "created",
                          "currency",
                          "descriptor",
                          "events",
                          "pending_amount",
                          "result",
                          "settled_amount",
                          "status",
                          "token",
                          "updated"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "direction": {
                            "enum": ["CREDIT", "DEBIT"],
                            "title": "ACH Direction",
                            "type": "string"
                          },
                          "external_bank_account_token": {
                            "format": "uuid",
                            "title": "External Bank Account Token",
                            "type": "string"
                          },
                          "method": {
                            "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                            "title": "Payment Method",
                            "type": "string"
                          },
                          "method_attributes": {
                            "properties": {
                              "company_id": {
                                "title": "Company ID",
                                "type": "string"
                              },
                              "receipt_routing_number": {
                                "title": "Company ID",
                                "type": "string"
                              },
                              "retries": {
                                "title": "Retries",
                                "type": "integer"
                              },
                              "return_reason_code": {
                                "title": "Return Reason Code",
                                "type": "string"
                              },
                              "sec_code": {
                                "enum": ["CCD", "PPD", "WEB"],
                                "title": "SEC Code",
                                "type": "string"
                              }
                            },
                            "required": ["sec_code"],
                            "title": "PaymentMethodAttributes",
                            "type": "object"
                          },
                          "source": {
                            "enum": ["CUSTOMER", "LITHIC"],
                            "title": "Payment Message Source",
                            "type": "string"
                          },
                          "user_defined_id": {
                            "maxLength": 512,
                            "title": "User Defined Id",
                            "type": "string"
                          }
                        },
                        "required": ["direction", "method", "method_attributes", "source"],
                        "type": "object"
                      }
                    ],
                    "title": "PaymentResponse"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["payment_transaction.created"],
                        "example": "payment_transaction.created",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "category": "ACH",
                    "created": "2023-09-14T12:52:44Z",
                    "currency": "USD",
                    "descriptor": "custom description",
                    "direction": "DEBIT",
                    "event_type": "payment_transaction.created",
                    "events": [
                      {
                        "amount": 4103,
                        "created": "2023-09-14T12:52:44Z",
                        "result": "APPROVED",
                        "token": "f274f723-b156-5b15-a96d-5ba8d5241b09",
                        "type": "ACH_ORIGINATION_PENDING"
                      }
                    ],
                    "external_bank_account_token": "b05c313e-35db-4b47-a33b-7b268d72b1f5",
                    "financial_account_token": "39ec6bf0-c101-520e-965a-a4fffce1d755",
                    "method": "ACH_NEXT_DAY",
                    "method_attributes": {
                      "retries": 0,
                      "return_reason_code": null,
                      "sec_code": "CCD"
                    },
                    "pending_amount": 4103,
                    "result": "APPROVED",
                    "settled_amount": 0,
                    "source": "CUSTOMER",
                    "status": "PENDING",
                    "token": "147595d7-45f4-4c91-a950-3436d16847e5",
                    "updated": "2023-09-14T12:52:44Z",
                    "user_defined_id": null
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "payment_transaction.created",
        "tags": ["Event Types"]
      }
    },
    "payment_transaction.updated": {
      "post": {
        "description": "Occurs when a payment transaction is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "properties": {
                          "category": {
                            "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                            "enum": ["ACH", "CARD", "TRANSFER"],
                            "type": "string"
                          },
                          "created": {
                            "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "currency": {
                            "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                            "type": "string"
                          },
                          "descriptor": {
                            "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                            "type": "string"
                          },
                          "events": {
                            "description": "A list of all financial events that have modified this financial transaction.",
                            "items": {
                              "properties": {
                                "amount": {
                                  "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                                  "type": "integer"
                                },
                                "created": {
                                  "description": "Date and time when the financial event occurred. UTC time zone.",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "result": {
                                  "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                                  "enum": ["APPROVED", "DECLINED"],
                                  "type": "string"
                                },
                                "token": {
                                  "description": "Globally unique identifier.",
                                  "format": "uuid",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                                  "enum": [
                                    "ACH_INSUFFICIENT_FUNDS",
                                    "ACH_ORIGINATION_PENDING",
                                    "ACH_ORIGINATION_RELEASED",
                                    "ACH_RECEIPT_PENDING",
                                    "ACH_RECEIPT_RELEASED",
                                    "ACH_RETURN",
                                    "AUTHORIZATION",
                                    "AUTHORIZATION_ADVICE",
                                    "AUTHORIZATION_EXPIRY",
                                    "AUTHORIZATION_REVERSAL",
                                    "BALANCE_INQUIRY",
                                    "CLEARING",
                                    "CORRECTION_CREDIT",
                                    "CORRECTION_DEBIT",
                                    "CREDIT_AUTHORIZATION",
                                    "CREDIT_AUTHORIZATION_ADVICE",
                                    "FINANCIAL_AUTHORIZATION",
                                    "FINANCIAL_CREDIT_AUTHORIZATION",
                                    "RETURN",
                                    "RETURN_REVERSAL",
                                    "TRANSFER",
                                    "TRANSFER_INSUFFICIENT_FUNDS"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pending_amount": {
                            "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                            "type": "integer"
                          },
                          "result": {
                            "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                            "enum": ["APPROVED", "DECLINED"],
                            "type": "string"
                          },
                          "settled_amount": {
                            "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                            "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                            "type": "string"
                          },
                          "token": {
                            "description": "Globally unique identifier.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "updated": {
                            "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "category",
                          "created",
                          "currency",
                          "descriptor",
                          "events",
                          "pending_amount",
                          "result",
                          "settled_amount",
                          "status",
                          "token",
                          "updated"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "direction": {
                            "enum": ["CREDIT", "DEBIT"],
                            "title": "ACH Direction",
                            "type": "string"
                          },
                          "external_bank_account_token": {
                            "format": "uuid",
                            "title": "External Bank Account Token",
                            "type": "string"
                          },
                          "method": {
                            "enum": ["ACH_NEXT_DAY", "ACH_SAME_DAY"],
                            "title": "Payment Method",
                            "type": "string"
                          },
                          "method_attributes": {
                            "properties": {
                              "company_id": {
                                "title": "Company ID",
                                "type": "string"
                              },
                              "receipt_routing_number": {
                                "title": "Company ID",
                                "type": "string"
                              },
                              "retries": {
                                "title": "Retries",
                                "type": "integer"
                              },
                              "return_reason_code": {
                                "title": "Return Reason Code",
                                "type": "string"
                              },
                              "sec_code": {
                                "enum": ["CCD", "PPD", "WEB"],
                                "title": "SEC Code",
                                "type": "string"
                              }
                            },
                            "required": ["sec_code"],
                            "title": "PaymentMethodAttributes",
                            "type": "object"
                          },
                          "source": {
                            "enum": ["CUSTOMER", "LITHIC"],
                            "title": "Payment Message Source",
                            "type": "string"
                          },
                          "user_defined_id": {
                            "maxLength": 512,
                            "title": "User Defined Id",
                            "type": "string"
                          }
                        },
                        "required": ["direction", "method", "method_attributes", "source"],
                        "type": "object"
                      }
                    ],
                    "title": "PaymentResponse"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["payment_transaction.updated"],
                        "example": "payment_transaction.updated",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "category": "ACH",
                    "created": "2023-09-14T12:52:44Z",
                    "currency": "USD",
                    "descriptor": "custom description",
                    "direction": "DEBIT",
                    "event_type": "payment_transaction.updated",
                    "events": [
                      {
                        "amount": 4103,
                        "created": "2023-09-14T12:52:44Z",
                        "result": "APPROVED",
                        "token": "f274f723-b156-5b15-a96d-5ba8d5241b09",
                        "type": "ACH_ORIGINATION_PENDING"
                      },
                      {
                        "amount": 4103,
                        "created": "2023-09-14T12:52:46Z",
                        "result": "APPROVED",
                        "token": "95719c03-7eb8-560b-9843-39da92df5231",
                        "type": "ACH_ORIGINATION_PROCESSED"
                      },
                      {
                        "amount": 4103,
                        "created": "2023-09-14T12:52:47Z",
                        "result": "APPROVED",
                        "token": "87fea0af-931f-5e80-a9cf-a243aa71b89d",
                        "type": "ACH_ORIGINATION_RELEASED"
                      }
                    ],
                    "external_bank_account_token": "b05c313e-35db-4b47-a33b-7b268d72b1f5",
                    "financial_account_token": "39ec6bf0-c101-520e-965a-a4fffce1d755",
                    "method": "ACH_NEXT_DAY",
                    "method_attributes": {
                      "retries": 0,
                      "return_reason_code": null,
                      "sec_code": "CCD"
                    },
                    "pending_amount": 0,
                    "result": "APPROVED",
                    "settled_amount": 4103,
                    "source": "CUSTOMER",
                    "status": "SETTLED",
                    "token": "147595d7-45f4-4c91-a950-3436d16847e5",
                    "updated": "2023-09-14T12:52:47Z",
                    "user_defined_id": null
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "payment_transaction.updated",
        "tags": ["Event Types"]
      }
    },
    "statements.created": {
      "post": {
        "description": "Occurs when a statement has been created",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "ach_period_total": {
                        "description": "Total payments during this billing period.",
                        "title": "ACH Period Total",
                        "type": "integer"
                      },
                      "ach_ytd_total": {
                        "description": "Year-to-date settled payment total",
                        "title": "ACH YTD Total",
                        "type": "integer"
                      },
                      "adjustments_period_total": {
                        "description": "Total adjustments during this billing period.",
                        "title": "Adjustments Period Total",
                        "type": "integer"
                      },
                      "adjustments_ytd_total": {
                        "description": "Year-to-date settled adjustments total",
                        "title": "Adjustments YTD Total",
                        "type": "integer"
                      },
                      "amount_due": {
                        "description": "Payment due at the end of the billing period. Negative amount indicates something is owed. If the amount owed is positive (e.g., there was a net credit), then payment should be returned to the cardholder via ACH.",
                        "title": "Amount Due",
                        "type": "integer"
                      },
                      "available_credit": {
                        "description": "Amount of credit available to spend",
                        "title": "Available Credit",
                        "type": "integer"
                      },
                      "created": {
                        "description": "Timestamp of when the statement was created",
                        "format": "date-time",
                        "title": "Created Time",
                        "type": "string"
                      },
                      "credit_limit": {
                        "description": "For prepay accounts, this is the minimum prepay balance that must be maintained. For charge card accounts, this is the maximum credit balance extended by a lender.",
                        "title": "Credit Limit",
                        "type": "integer"
                      },
                      "days_in_billing_cycle": {
                        "description": "Number of days in the billing cycle",
                        "title": "Days in Billing Cycle",
                        "type": "integer"
                      },
                      "ending_balance": {
                        "description": "Balance at the end of the billing period. For charge cards, this should be the same at the statement amount due.",
                        "title": "Ending Balance",
                        "type": "integer"
                      },
                      "financial_account_token": {
                        "description": "Globally unique identifier for a financial account",
                        "format": "uuid",
                        "title": "Financial Account Token",
                        "type": "string"
                      },
                      "payment_due_date": {
                        "description": "Date when the payment is due",
                        "format": "date",
                        "title": "Payment Due Date",
                        "type": "string"
                      },
                      "purchases_period_total": {
                        "description": "Total settled card transactions during this billing period, determined by liability date.",
                        "title": "Purchases Period Total",
                        "type": "integer"
                      },
                      "purchases_ytd_total": {
                        "description": "Year-to-date settled card transaction total",
                        "title": "Purchases YTD Total",
                        "type": "integer"
                      },
                      "starting_balance": {
                        "description": "Balance at the start of the billing period",
                        "title": "Starting Balance",
                        "type": "integer"
                      },
                      "statement_end_date": {
                        "description": "Date when the billing period ended",
                        "format": "date",
                        "title": "Statement End Date",
                        "type": "string"
                      },
                      "statement_start_date": {
                        "description": "Date when the billing period began",
                        "format": "date",
                        "title": "Statement Start Date",
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier for a statement",
                        "title": "Statement Token",
                        "type": "string"
                      },
                      "updated": {
                        "description": "Timestamp of when the statement was updated",
                        "format": "date-time",
                        "title": "Updated Time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ach_period_total",
                      "ach_ytd_total",
                      "adjustments_period_total",
                      "adjustments_ytd_total",
                      "amount_due",
                      "available_credit",
                      "created",
                      "credit_limit",
                      "days_in_billing_cycle",
                      "ending_balance",
                      "financial_account_token",
                      "payment_due_date",
                      "purchases_period_total",
                      "purchases_ytd_total",
                      "starting_balance",
                      "statement_end_date",
                      "statement_start_date",
                      "token",
                      "updated"
                    ],
                    "title": "StatementResponse",
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "statements.created",
        "tags": ["Event Types"]
      }
    },
    "three_ds_authentication.created": {
      "post": {
        "description": "Occurs when a 3DS authentication is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "account_type": {
                        "description": "Type of account/card that is being used for the transaction. Maps to EMV 3DS field acctType.\n",
                        "enum": ["CREDIT", "DEBIT", "NOT_APPLICABLE"],
                        "nullable": true,
                        "type": "string"
                      },
                      "additional_data": {
                        "description": "Object containing additional data about the 3DS request that is beyond the EMV 3DS standard spec (e.g., specific fields that only certain card networks send but are not required across all 3DS requests).\n",
                        "nullable": true,
                        "properties": {
                          "network_decision": {
                            "description": "Mastercard only: Indicates whether the network would have considered the authentication request to be low risk or not.\n",
                            "enum": ["LOW_RISK", "NOT_LOW_RISK"],
                            "nullable": true,
                            "type": "string"
                          },
                          "network_risk_score": {
                            "description": "Mastercard only: Assessment by the network of the authentication risk level, with a higher value indicating a higher amount of risk.\n",
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "app": {
                        "description": "Object containing data about the app used in the e-commerce transaction. Present if the channel is 'APP_BASED'.\n",
                        "properties": {
                          "device_info": {
                            "description": "Device information gathered from the cardholder's device - JSON name/value pairs that is Base64url encoded. Maps to EMV 3DS field deviceInfo.\n",
                            "nullable": true,
                            "type": "string"
                          },
                          "ip": {
                            "anyOf": [
                              {
                                "format": "ipv4",
                                "type": "string"
                              },
                              {
                                "format": "ipv6",
                                "type": "string"
                              }
                            ],
                            "description": "External IP address used by the app generating the 3DS authentication request. Maps to EMV 3DS field appIp.\n"
                          }
                        }
                      },
                      "authentication_request_type": {
                        "description": "Type of authentication request - i.e., the type of transaction or interaction is causing the merchant to request an authentication. Maps to EMV 3DS field threeDSRequestorAuthenticationInd.\n",
                        "enum": [
                          "ADD_CARD",
                          "BILLING_AGREEMENT",
                          "DELAYED_SHIPMENT",
                          "EMV_TOKEN_CARDHOLDER_VERIFICATION",
                          "INSTALLMENT_TRANSACTION",
                          "MAINTAIN_CARD",
                          "PAYMENT_TRANSACTION",
                          "RECURRING_TRANSACTION",
                          "SPLIT_PAYMENT",
                          "SPLIT_SHIPMENT"
                        ],
                        "nullable": true,
                        "type": "string"
                      },
                      "authentication_result": {
                        "description": "Indicates the outcome of the 3DS authentication process.",
                        "enum": ["DECLINE", "SUCCESS"],
                        "nullable": true,
                        "type": "string"
                      },
                      "browser": {
                        "description": "Object containing data about the browser used in the e-commerce transaction. Present if the channel is 'BROWSER'.\n",
                        "properties": {
                          "ip": {
                            "anyOf": [
                              {
                                "format": "ipv4",
                                "type": "string"
                              },
                              {
                                "format": "ipv6",
                                "type": "string"
                              }
                            ],
                            "description": "IP address of the browser as returned by the HTTP headers to the 3DS requestor (e.g., merchant or digital wallet). Maps to EMV 3DS field browserIP.\n",
                            "nullable": true
                          },
                          "java_enabled": {
                            "description": "Indicates whether the cardholder's browser has the ability to execute Java. Maps to EMV 3DS field browserJavaEnabled.\n",
                            "nullable": true,
                            "type": "boolean"
                          },
                          "javascript_enabled": {
                            "description": "Indicates whether the cardholder's browser has the ability to execute JavaScript. Maps to EMV 3DS field browserJavascriptEnabled.\n",
                            "nullable": true,
                            "type": "boolean"
                          },
                          "language": {
                            "description": "Language of the cardholder's browser as defined in IETF BCP47. Maps to EMV 3DS field browserLanguage.\n",
                            "nullable": true,
                            "type": "string"
                          },
                          "time_zone": {
                            "description": "Time zone of the cardholder's browser offset in minutes between UTC and the cardholder browser's local time. The offset is positive if the local time is behind UTC and negative if it is ahead. Maps to EMV 3DS field browserTz.\n",
                            "nullable": true,
                            "type": "string"
                          },
                          "user_agent": {
                            "description": "Content of the HTTP user-agent header. Maps to EMV 3DS field browserUserAgent.\n",
                            "nullable": true,
                            "type": "string"
                          }
                        }
                      },
                      "card_expiry_check": {
                        "description": "Indicates whether the expiration date provided by the cardholder during checkout matches Lithic's record of the card's expiration date.\n",
                        "enum": ["MATCH", "MISMATCH", "NOT_PRESENT"],
                        "type": "string"
                      },
                      "card_token": {
                        "description": "Globally unique identifier for the card on which the 3DS authentication has occurred.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "cardholder": {
                        "description": "Object containing data about the cardholder provided during the transaction.",
                        "properties": {
                          "address_match": {
                            "description": "Indicates whether the shipping address and billing address provided by the cardholder are the same. This value - and assessment of whether the addresses match - is provided directly in the 3DS request and is not determined by Lithic. Maps to EMV 3DS field addrMatch.\n",
                            "nullable": true,
                            "type": "boolean"
                          },
                          "billing_address": {
                            "description": "Object containing data on the billing address provided during the transaction.",
                            "type": "object",
                            "properties": {
                              "address1": {
                                "description": "First line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "address2": {
                                "description": "Second line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "address3": {
                                "description": "Third line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "city": {
                                "description": "City of the address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                                "maxLength": 3,
                                "minLength": 3,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                                "nullable": true,
                                "type": "string"
                              }
                            }
                          },
                          "email": {
                            "description": "Email address that is either provided by the cardholder or is on file with the merchant in a 3RI request. Maps to EMV 3DS field email.\n",
                            "maxLength": 254,
                            "minLength": 1,
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the cardholder. Maps to EMV 3DS field cardholderName.",
                            "maxLength": 36,
                            "minLength": 1,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone_number_home": {
                            "description": "Home phone number provided by the cardholder. Maps to EMV 3DS fields homePhone.cc and homePhone.subscriber.\n",
                            "maxLength": 18,
                            "minLength": 1,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone_number_mobile": {
                            "description": "Mobile/cell phone number provided by the cardholder. Maps to EMV 3DS fields mobilePhone.cc and mobilePhone.subscriber.\n",
                            "maxLength": 18,
                            "minLength": 1,
                            "nullable": true,
                            "type": "string"
                          },
                          "phone_number_work": {
                            "description": "Work phone number provided by the cardholder. Maps to EMV 3DS fields workPhone.cc and workPhone.subscriber.\n",
                            "maxLength": 18,
                            "minLength": 1,
                            "nullable": true,
                            "type": "string"
                          },
                          "shipping_address": {
                            "description": "Object containing data on the shipping address provided during the transaction.",
                            "type": "object",
                            "properties": {
                              "address1": {
                                "description": "First line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "address2": {
                                "description": "Second line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "address3": {
                                "description": "Third line of the street address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "city": {
                                "description": "City of the address provided by the cardholder.",
                                "nullable": true,
                                "type": "string"
                              },
                              "country": {
                                "description": "Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)",
                                "maxLength": 3,
                                "minLength": 3,
                                "nullable": true,
                                "type": "string"
                              },
                              "postal_code": {
                                "description": "Postal code (e.g., ZIP code) of the address provided by the cardholder",
                                "nullable": true,
                                "type": "string"
                              }
                            }
                          }
                        },
                        "type": "object"
                      },
                      "channel": {
                        "description": "Channel in which the authentication occurs. Maps to EMV 3DS field deviceChannel.",
                        "enum": ["APP_BASED", "BROWSER", "THREE_DS_REQUESTOR_INITIATED"],
                        "type": "string"
                      },
                      "created": {
                        "description": "Date and time when the authentication was created in Lithic's system.\n",
                        "format": "date-time",
                        "type": "string"
                      },
                      "decision_made_by": {
                        "description": "Entity that made the authentication decision.",
                        "enum": ["CUSTOMER_ENDPOINT", "LITHIC_DEFAULT", "LITHIC_RULES", "NETWORK", "UNKNOWN"],
                        "nullable": true,
                        "type": "string"
                      },
                      "merchant": {
                        "description": "Object containing data about the merchant involved in the e-commerce transaction.",
                        "properties": {
                          "country": {
                            "description": "Country code of the merchant requesting 3DS authentication. Maps to EMV 3DS field merchantCountryCode.\n",
                            "maxLength": 3,
                            "minLength": 3,
                            "type": "string"
                          },
                          "id": {
                            "description": "Merchant identifier as assigned by the acquirer. Maps to EMV 3DS field acquirerMerchantId.\n",
                            "type": "string"
                          },
                          "mcc": {
                            "description": "Merchant category code assigned to the merchant that describes its business activity type. Maps to EMV 3DS field mcc.\n",
                            "maxLength": 4,
                            "minLength": 4,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the merchant. Maps to EMV 3DS field merchantName.",
                            "type": "string"
                          },
                          "risk_indicator": {
                            "description": "Object containing additional data indicating additional risk factors related to the e-commerce transaction.\n",
                            "properties": {
                              "delivery_email_address": {
                                "description": "In transactions with electronic delivery, email address to which merchandise is delivered. Maps to EMV 3DS field deliveryEmailAddress.\n",
                                "nullable": true,
                                "type": "string"
                              },
                              "delivery_time_frame": {
                                "description": "The delivery time frame for the merchandise. Maps to EMV 3DS field deliveryTimeframe.\n",
                                "enum": [
                                  "ELECTRONIC_DELIVERY",
                                  "OVERNIGHT_SHIPPING",
                                  "SAME_DAY_SHIPPING",
                                  "TWO_DAY_OR_MORE_SHIPPING"
                                ],
                                "nullable": true,
                                "type": "string"
                              },
                              "gift_card_amount": {
                                "description": "In prepaid or gift card purchase transactions, purchase amount total in major units (e.g., a purchase of USD $205.10 would be 205). Maps to EMV 3DS field giftCardAmount.\n",
                                "nullable": true,
                                "type": "number"
                              },
                              "gift_card_count": {
                                "description": "In prepaid or gift card purchase transactions, count of individual prepaid or gift cards/codes purchased. Maps to EMV 3DS field giftCardCount.\n",
                                "nullable": true,
                                "type": "number"
                              },
                              "gift_card_currency": {
                                "description": "In prepaid or gift card purchase transactions, currency code of the gift card. Maps to EMV 3DS field giftCardCurr.\n",
                                "maxLength": 3,
                                "minLength": 3,
                                "nullable": true,
                                "type": "string"
                              },
                              "order_availability": {
                                "description": "Indicates whether the purchase is for merchandise that is available now or at a future date. Maps to EMV 3DS field preOrderPurchaseInd.\n",
                                "enum": ["FUTURE_AVAILABILITY", "MERCHANDISE_AVAILABLE"],
                                "nullable": true,
                                "type": "string"
                              },
                              "pre_order_available_date": {
                                "description": "In pre-order purchase transactions, the expected date that the merchandise will be available. Maps to EMV 3DS field preOrderDate.\n",
                                "format": "date-time",
                                "nullable": true,
                                "type": "string"
                              },
                              "reorder_items": {
                                "description": "Indicates whether the cardholder is reordering previously purchased merchandise. Maps to EMV 3DS field reorderItemsInd.",
                                "enum": ["FIRST_TIME_ORDERED", "REORDERED"],
                                "nullable": true,
                                "type": "string"
                              },
                              "shipping_method": {
                                "description": "Shipping method that the cardholder chose for the transaction. If purchase includes one or more item, this indicator is used for the physical goods; if the purchase only includes digital goods, this indicator is used to describe the most expensive item purchased. Maps to EMV 3DS field shipIndicator.\n",
                                "enum": [
                                  "DIGITAL_GOODS",
                                  "LOCKER_DELIVERY",
                                  "OTHER",
                                  "PICK_UP_AND_GO_DELIVERY",
                                  "SHIP_TO_BILLING_ADDRESS",
                                  "SHIP_TO_NON_BILLING_ADDRESS",
                                  "SHIP_TO_OTHER_VERIFIED_ADDRESS",
                                  "SHIP_TO_STORE",
                                  "TRAVEL_AND_EVENT_TICKETS"
                                ],
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": ["country", "id", "mcc", "name", "risk_indicator"],
                        "type": "object"
                      },
                      "message_category": {
                        "description": "Either PAYMENT_AUTHENTICATION or NON_PAYMENT_AUTHENTICATION.  For NON_PAYMENT_AUTHENTICATION, additional_data and transaction fields are not populated.\n",
                        "enum": ["NON_PAYMENT_AUTHENTICATION", "PAYMENT_AUTHENTICATION"],
                        "type": "string"
                      },
                      "three_ri_request_type": {
                        "description": "Type of 3DS Requestor Initiated (3RI) request i.e., a 3DS authentication that takes place at the initiation of the merchant rather than the cardholder. The most common example of this is where a merchant is authenticating before billing for a recurring transaction such as a pay TV subscription or a utility bill. Maps to EMV 3DS field threeRIInd.\n",
                        "enum": [
                          "ACCOUNT_VERIFICATION",
                          "ADD_CARD",
                          "BILLING_AGREEMENT",
                          "CARD_SECURITY_CODE_STATUS_CHECK",
                          "DELAYED_SHIPMENT",
                          "DEVICE_BINDING_STATUS_CHECK",
                          "INSTALLMENT_TRANSACTION",
                          "MAIL_ORDER",
                          "MAINTAIN_CARD_INFO",
                          "OTHER_PAYMENT",
                          "RECURRING_TRANSACTION",
                          "SPLIT_PAYMENT",
                          "SPLIT_SHIPMENT",
                          "TELEPHONE_ORDER",
                          "TOP_UP",
                          "TRUST_LIST_STATUS_CHECK"
                        ],
                        "nullable": true,
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier for the 3DS authentication.\n",
                        "format": "uuid",
                        "type": "string"
                      },
                      "transaction": {
                        "description": "Object containing data about the e-commerce transaction for which the merchant is requesting authentication.",
                        "nullable": true,
                        "properties": {
                          "amount": {
                            "description": "Amount of the purchase in minor units of currency with all punctuation removed. Maps to EMV 3DS field purchaseAmount.\n",
                            "type": "number"
                          },
                          "currency": {
                            "description": "Currency of the purchase. Maps to EMV 3DS field purchaseCurrency.\n",
                            "maxLength": 3,
                            "minLength": 3,
                            "type": "string"
                          },
                          "currency_exponent": {
                            "description": "Minor units of currency, as specified in ISO 4217 currency exponent. Maps to EMV 3DS field purchaseExponent.\n",
                            "type": "number"
                          },
                          "date_time": {
                            "description": "Date and time when the authentication was generated by the merchant/acquirer's 3DS server. Maps to EMV 3DS field purchaseDate.\n",
                            "format": "date-time",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the transaction for which a 3DS authentication request is occurring. Maps to EMV 3DS field transType.\n",
                            "enum": [
                              "ACCOUNT_FUNDING",
                              "CHECK_ACCEPTANCE",
                              "GOODS_SERVICE_PURCHASE",
                              "PREPAID_ACTIVATION_AND_LOAD",
                              "QUASI_CASH_TRANSACTION"
                            ],
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": ["amount", "currency", "currency_exponent", "date_time", "type"],
                        "type": "object"
                      }
                    },
                    "required": [
                      "account_type",
                      "authentication_result",
                      "card_expiry_check",
                      "card_token",
                      "cardholder",
                      "channel",
                      "created",
                      "decision_made_by",
                      "merchant",
                      "message_category",
                      "token"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["three_ds_authentication.created"],
                        "example": "three_ds_authentication.created",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "three_ds_authentication.created",
        "tags": ["Event Types"]
      }
    },
    "transfer_transaction.created": {
      "post": {
        "description": "Occurs when a transfer transaction is created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "category": {
                        "description": "Status types:\n* `CARD` - Issuing card transaction.\n* `ACH` - Transaction over ACH.\n* `TRANSFER` - Internal transfer of funds between financial accounts in your program.\n",
                        "enum": ["ACH", "CARD", "TRANSFER"],
                        "type": "string"
                      },
                      "created": {
                        "description": "Date and time when the financial transaction first occurred. UTC time zone.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "currency": {
                        "description": "3-digit alphabetic ISO 4217 code for the settling currency of the transaction.",
                        "type": "string"
                      },
                      "descriptor": {
                        "description": "A string that provides a description of the financial transaction; may be useful to display to users.",
                        "type": "string"
                      },
                      "events": {
                        "description": "A list of all financial events that have modified this financial transaction.",
                        "items": {
                          "properties": {
                            "amount": {
                              "description": "Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).",
                              "type": "integer"
                            },
                            "created": {
                              "description": "Date and time when the financial event occurred. UTC time zone.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "result": {
                              "description": "APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.",
                              "enum": ["APPROVED", "DECLINED"],
                              "type": "string"
                            },
                            "token": {
                              "description": "Globally unique identifier.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": {
                              "description": "Event types:\n* `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.\n* `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.\n* `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.\n* `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.\n* `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.\n* `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.\n* `AUTHORIZATION` - Authorize a card transaction.\n* `AUTHORIZATION_ADVICE` - Advice on a card transaction.\n* `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.\n* `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.\n* `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.\n* `CLEARING` - Card Transaction is settled.\n* `CORRECTION_DEBIT` - Manual card transaction correction (Debit).\n* `CORRECTION_CREDIT` - Manual card transaction correction (Credit).\n* `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.\n* `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.\n* `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.\n* `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.\n* `RETURN` - A card refund has been processed on the transaction.\n* `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).\n* `TRANSFER` - Successful internal transfer of funds between financial accounts.\n* `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.\n",
                              "enum": [
                                "ACH_INSUFFICIENT_FUNDS",
                                "ACH_ORIGINATION_PENDING",
                                "ACH_ORIGINATION_RELEASED",
                                "ACH_RECEIPT_PENDING",
                                "ACH_RECEIPT_RELEASED",
                                "ACH_RETURN",
                                "AUTHORIZATION",
                                "AUTHORIZATION_ADVICE",
                                "AUTHORIZATION_EXPIRY",
                                "AUTHORIZATION_REVERSAL",
                                "BALANCE_INQUIRY",
                                "CLEARING",
                                "CORRECTION_CREDIT",
                                "CORRECTION_DEBIT",
                                "CREDIT_AUTHORIZATION",
                                "CREDIT_AUTHORIZATION_ADVICE",
                                "FINANCIAL_AUTHORIZATION",
                                "FINANCIAL_CREDIT_AUTHORIZATION",
                                "RETURN",
                                "RETURN_REVERSAL",
                                "TRANSFER",
                                "TRANSFER_INSUFFICIENT_FUNDS"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pending_amount": {
                        "description": "Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.\nThe value of this field will go to zero over time once the financial transaction is settled.\n",
                        "type": "integer"
                      },
                      "result": {
                        "description": "APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.",
                        "enum": ["APPROVED", "DECLINED"],
                        "type": "string"
                      },
                      "settled_amount": {
                        "description": "Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.",
                        "type": "integer"
                      },
                      "status": {
                        "description": "Status types:\n* `DECLINED` - The card transaction was declined.\n* `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.\n* `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period\n* `SETTLED` - The financial transaction is completed.\n* `VOIDED` - The merchant has voided the previously pending card authorization.\n",
                        "enum": ["DECLINED", "EXPIRED", "PENDING", "SETTLED", "VOIDED"],
                        "type": "string"
                      },
                      "token": {
                        "description": "Globally unique identifier.",
                        "format": "uuid",
                        "type": "string"
                      },
                      "updated": {
                        "description": "Date and time when the financial transaction was last updated. UTC time zone.",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "required": [
                      "category",
                      "created",
                      "currency",
                      "descriptor",
                      "events",
                      "pending_amount",
                      "result",
                      "settled_amount",
                      "status",
                      "token",
                      "updated"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "event_type": {
                        "description": "The type of event that occurred.",
                        "enum": ["transfer_transaction.created"],
                        "example": "transfer_transaction.created",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ],
                "examples": [
                  {
                    "category": "TRANSFER",
                    "created": "1973-04-04T23:39:00+00:00",
                    "currency": "USD",
                    "descriptor": "Lorem ipsum dolor sit amet, consectetur adipisicing elit.",
                    "event_type": "transfer_transaction.created",
                    "events": [
                      {
                        "amount": 4103,
                        "created": "2023-09-14T12:52:44Z",
                        "result": "APPROVED",
                        "token": "f274f723-b156-5b15-a96d-5ba8d5241b09",
                        "type": "TRANSFER"
                      }
                    ],
                    "pending_amount": 0,
                    "result": "APPROVED",
                    "settled_amount": 4103,
                    "status": "SETTLED",
                    "token": "bee304c3-d93d-42a0-88f4-68dde3251393",
                    "updated": "1973-04-04T23:39:00+00:00"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "summary": "transfer_transaction.created",
        "tags": ["Event Types"]
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
