openapi: 3.0.0
info:
  title: Lithic Developer API
  description: >
    The Lithic Developer API is designed to provide a predictable programmatic
    interface for accessing your Lithic account through an API and transaction webhooks.

    Note that your API key is a secret and should be treated as such. Don't share it with anyone, including us. We will never ask you for it.
  version: 1.0.0
  termsOfService: 'https://lithic.com/legal#terms'
  contact:
    email: support@lithic.com
servers:
  - url: https://api.lithic.com/v1
    description: Lithic production API server
  - url: https://sandbox.lithic.com/v1
    description: Sandbox environment that provides key functionality mirroring production
paths:
  /accounts:
    get:
      tags:
        - Account
      summary: List accounts
      description: |
        List account configurations.
      operationId: getAccounts
      parameters:
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountConfiguration'
                  page:
                    type: integer
                    description: Page number.
                  total_entries:
                    type: integer
                    description: Total number of entries.
                  total_pages:
                    type: integer
                    description: Total number of pages.
                required:
                  - data
                  - page
                  - total_entries
                  - total_pages
              examples:
                getAccounts:
                  summary: List accounts
                  value:
                    data:
                      - token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                        state: ACTIVE
                        spend_limit:
                          daily: 1000
                          monthly: 4000
                          lifetime: 10000
                    page: 1
                    total_entries: 1
                    total_pages: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /accounts/{account_token}:
    get:
      tags:
        - Account
      summary: Get account
      description: Get account configuration such as spend limits.
      operationId: getAccountByToken
      parameters:
        - $ref: '#/components/parameters/accountToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Account
      summary: Update account
      description: |
        Update account configuration such as spend limits and verification address. Can only be run on accounts that are part of the program managed by this API key.

        Accounts that are in the `PAUSED` state will not be able to transact or create new cards.
      operationId: patchAccountByToken
      parameters:
        - $ref: '#/components/parameters/accountToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                daily_spend_limit:
                  type: integer
                  description: Amount (in cents) for the account's new daily spend limit. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the account limit.
                  minimum: 0
                lifetime_spend_limit:
                  type: integer
                  description: >
                    Amount (in cents) for the account's new lifetime limit.
                    Once this limit is reached, no transactions will be accepted
                    on any card created for this account until the limit is updated. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the account limit.
                  minimum: 0
                monthly_spend_limit:
                  type: integer
                  description: Amount (in cents) for the account's new monthly spend limit. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the account limit.
                  minimum: 0
                verification_address:
                  type: object
                  description: Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules.
                  properties:
                    address1:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    postal_code:
                      type: string
                    country:
                      type: string
                state:
                  type: string
                  enum:
                    - ACTIVE
                    - PAUSED
                  description: Account states.
            examples:
              setDailySpendLimit:
                summary: Update daily spend limit
                value:
                  daily_spend_limit: 1000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
              examples:
                exampleResponse:
                  value:
                    token: 'ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1'
                    state: ACTIVE
                    spend_limit:
                      daily: 1000
                      monthly: 40000
                      lifetime: 100000
                    verification_address:
                      address1: '5 Broad Street'
                      address2: ''
                      city: 'New York'
                      state: 'NY'
                      postal_code: '10001'
                      country: 'USA'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /account_holders:
    post:
      tags:
        - Account Holder
      summary: Create an individual or business account holder
      description: >
        Run an individual or business's information through the Customer Identification Program (CIP)
        and return an `account_token` if the status is accepted or pending (i.e., further action required).

        All calls to this endpoint will return an immediate response - though in some cases,
        the response may indicate the workflow is under review or further action will be needed to complete the account creation process.

        This endpoint can only be used on accounts that are part of the program the calling API key manages.
      operationId: postAccountHolders
      parameters:
        - name: Idempotency-Token
          in: header
          schema:
            type: string
            default: ''
            nullable: true
      requestBody:
        required: true
        content:
          application/json:
            examples:
              kybRequest:
                summary: Create an account holder with KYB workflow
                value:
                  business_entity:
                    address:
                      address1: '123 Old Forest Way'
                      city: 'Omaha'
                      country: 'USA'
                      postal_code: '61022'
                      state: 'NE'
                    phone_numbers: ['+12124007676']
                    government_id: '114-123-1513'
                    legal_business_name: 'Busy Business, Inc.'

                  control_person:
                    address:
                      address1: '451 New Forest Way'
                      city: 'Springfield'
                      country: 'USA'
                      postal_code: '68022'
                      state: 'IL'
                    dob: '1991-03-08 08:00:00'
                    email: 'tom@middle-pluto.com'
                    first_name: 'Tom'
                    government_id: '111-23-1412'
                    last_name: 'Timothy'
                    phone_number: '+12024008176'

                  beneficial_owner_individuals:
                    - address:
                        address1: '300 Normal Forest Way'
                        city: 'Portland'
                        country: 'USA'
                        postal_code: '90210'
                        state: 'OR'
                      dob: '1991-03-08 08:00:00'
                      email: 'tim@left-earth.com'
                      first_name: 'Timmy'
                      government_id: '211-23-1412'
                      last_name: 'Turner'
                      phone_number: '+12024007611'
                  nature_of_business: 'Software company selling solutions to the restaurant industry'
                  tos_timestamp: '2022-03-08 08:00:00'
                  website_url: 'www.mybusiness.com'
                  workflow: 'KYB_BASIC'

              kycRequest:
                summary: Create an account holder with KYC workflow
                value:
                  individual:
                    address:
                      address1: 123 Old Forest Way
                      city: Omaha
                      country: USA
                      postal_code: '68022'
                      state: NE
                    dob: '1991-03-08 08:00:00'
                    email: tom@middle-earth.com
                    first_name: Tom
                    government_id: 111-23-1412
                    last_name: Bombadil
                    phone_number: '+12124007676'
                  tos_timestamp: '2022-03-08 08:00:00'
                  workflow: KYC_ADVANCED

              kycExemptRequest:
                summary: Create an account holder with KYC Exempt workflow
                value:
                  workflow: KYC_EXEMPT
                  kyc_exemption_type: AUTHORIZED_USER
                  first_name: Tom
                  last_name: Bombadil
                  email: tom@middle-earth.com
                  phone_number: '+12124007676'
                  address:
                    address1: 123 Old Forest Way
                    city: Omaha
                    country: USA
                    postal_code: '68022'
                    state: NE
                  business_account_token: 'e87db14a-4abf-4901-adad-5d5c9f46aff2'
            schema:
              oneOf:
                - $ref: '#/components/schemas/Kyb'
                - $ref: '#/components/schemas/Kyc'
                - $ref: '#/components/schemas/KycExempt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
              examples:
                acceptedEvaluationResponse:
                  summary: Accepted KYC/KYB evaluation response
                  value:
                    account_token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                    status: ACCEPTED
                    status_reasons: []
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
                    business_account_token: 'e87db14a-4abf-4901-adad-5d5c9f46aff2'
                pendingResubmitResponse:
                  summary: Pending resubmit KYC evaluation response
                  value:
                    account_token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                    status: PENDING_RESUBMIT
                    status_reasons:
                      - NAME_VERIFICATION_FAILURE
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /account_holders/{account_holder_token}:
    get:
      tags:
        - Account Holder
      summary: Get an Individual or Business Account Holder
      description: Get an Individual or Business Account Holder and/or their KYC or KYB evaluation status.
      operationId: getAccountHolder
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
              examples:
                acceptedEvaluationResponse:
                  summary: Accepted KYC evaluation response
                  value:
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
                    phone_number: '5555555555'
                    email: 'test@lithic.com'
                    business_account_token: '6b67b340-ed11-4463-a33d-0d7f7fdcd28c'
                    account_token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                    status: ACCEPTED
                    status_reasons: []
                pendingDocumentResponse:
                  summary: Pending document submission KYC evaluation response
                  value:
                    account_token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                    status: PENDING_DOCUMENT
                    status_reasons:
                      - DOB_VERIFICATION_FAILURE
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Account Holder
      summary: Update account holder information
      description: Update the information associated with a particular account holder.
      operationId: patchAccountHolder
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Account holder's email address. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.
                phone_number:
                  type: string
                  description: Account holder's phone number, entered in E.164 format. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.
                business_account_token:
                  type: string
                  description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The token for the account holder that was updated
                  email:
                    type: string
                    description: The newly updated email for the account holder
                  phone_number:
                    type: string
                    description: The newly updated phone_number for the account holder
                  business_account_token:
                    type: string
                    description: Only applicable for customers using the KYC-Exempt workflow to enroll businesses with authorized users. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
        '404':
          $ref: '#/components/responses/NotFound'

  /account_holders/{account_holder_token}/documents:
    post:
      tags:
        - Account Holder
      summary: Initiate account holder document upload
      description: |
        Use this endpoint to identify which type of supported government-issued documentation you will upload for further verification.
        It will return two URLs to upload your document images to - one for the front image and one for the back image.

        This endpoint is only valid for evaluations in a `PENDING_DOCUMENT` state.

        Uploaded images must either be a `jpg` or `png` file, and each must be less than 15 MiB. Once both required uploads have been successfully completed, your document will be run through KYC verification.

        If you have registered a webhook, you will receive evaluation updates for any document submission evaluations, as well as for any failed document uploads.

        Two document submission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended. Currently only one type of
        account holder document is supported per KYC verification.
      operationId: postAccountHolderDocuments
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                document_type:
                  type: string
                  description: Type of the document to upload.
                  enum:
                    - commercial_license
                    - drivers_license
                    - passport
                    - passport_card
                    - visa
              required:
                - document_type
            examples:
              recieveLinkForDriversLicense:
                summary: Initiate account holder document upload
                value:
                  document_type: 'drivers_license'

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolderDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    get:
      tags:
        - Account Holder
      summary: Get account holder document uploads
      description: |
        Retrieve the status of account holder document uploads, or retrieve the upload URLs to process your image uploads.

        Note that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).

        In the event your upload URLs have expired, calling this endpoint will refresh them.
        Similarly, in the event a previous account holder document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.

        When a new document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` list
        in a `PENDING` state for the corresponding `image_type`.
      operationId: getAccountHolderDocuments
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountHolderDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /account_holders/{account_holder_token}/documents/{document_token}:
    get:
      tags:
        - Account Holder
      summary: Get account holder document upload status
      description: |
        Check the status of an account holder document upload, or retrieve the upload URLs to process your image uploads.

        Note that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).

        In the event your upload URLs have expired, calling this endpoint will refresh them.
        Similarly, in the event a document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.

        When a new account holder document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` array
        in a `PENDING` state for the corresponding `image_type`.
      operationId: getAccountHolderDocumentByToken
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
        - $ref: '#/components/parameters/documentToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolderDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /account_holders/{account_holder_token}/resubmit:
    post:
      tags:
        - Account Holder
      summary: Resubmit account holder information
      description: |
        Resubmit a KYC submission. This endpoint should be used in cases where a KYC submission returned a `PENDING_RESUBMIT` result,
        meaning one or more critical KYC fields may have been mis-entered and the individual's identity has not yet been successfully verified.
        This step must be completed in order to proceed with the KYC evaluation.

        Two resubmission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended.
      operationId: postAccountHolderResubmit
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        required: true
        content:
          application/json:
            examples:
              resubmitKycRequest:
                summary: Resubmit account holder information
            schema:
              type: object
              properties:
                workflow:
                  type: string
                  default: KYC_ADVANCED
                  enum:
                    - KYC_ADVANCED
                tos_timestamp:
                  type: string
                  description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
                  example: '2022-03-08 08:00:00'
                individual:
                  description: Information on individual for whom the account is being opened and KYC is being re-run.
                  $ref: '#/components/schemas/Individual'
              required:
                - workflow
                - individual
                - tos_timestamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
              examples:
                acceptedEvaluationResponse:
                  summary: Accepted KYC evaluation response
                  value:
                    account_token: 'b68b7424-aa69-4cbc-a946-30d90181b621'
                    status: ACCEPTED
                    status_reasons: []
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
                maxSubmissions:
                  summary: KYC rejected for too many resubmissions
                  value:
                    account_token: ''
                    status: REJECTED
                    status_reasons:
                      - MAX_RESUBMISSION_ATTEMPTS
                    token: '12345678-aa69-4cbc-a946-30d90181b621'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /webhooks/account_holders:
    post:
      tags:
        - Account Holder
      summary: Create webhook for KYC/KYB events
      description: |
        Create a webhook to receive KYC or KYB evaluation events.

        There are two types of account holder webhooks:
          - `verification`: Webhook sent when the status of a KYC or KYB evaluation changes from `PENDING_DOCUMENT` (KYC) or `PENDING` (KYB) to `ACCEPTED` or `REJECTED`.
          - `document_upload_front`/`document_upload_back`: Webhook sent when a document upload fails.

        After a webhook has been created, this endpoint can be used to rotate a webhooks HMAC token or modify the registered URL. Only a single webhook is allowed per program. Since HMAC verification is available, the IP addresses from which KYC/KYB webhooks are sent are subject to change.
      operationId: postWebhookAccountHolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: URL to receive webhook requests. Must be a valid HTTPS address.
              required:
                - url
            examples:
              createAccountHolderWebhooks:
                summary: Create a webhook for KYC/KYB events
                value:
                  url: 'https://mywebhookurl.com/incoming'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      hmac_token:
                        type: string
                        format: uuid
                        description: >
                          Shared secret which can optionally be used to validate the authenticity of
                          incoming identity webhooks.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth_stream:
    get:
      tags:
        - Auth Stream Access (ASA)
      summary: Get ASA enrollment status
      description: Check status for whether you have enrolled in Authorization Stream Access (ASA) for your program in Sandbox.
      operationId: getAuthStream
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrolled:
                    type: boolean
                    description: Whether ASA is enrolled.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - Auth Stream Access (ASA)
      summary: Disenroll ASA
      description: Disenroll Authorization Stream Access (ASA) in Sandbox.
      operationId: deleteAuthStream
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    post:
      tags:
        - Auth Stream Access (ASA)
      summary: Enroll ASA
      description: |
        Authorization Stream Access (ASA) provides the ability to make custom transaction approval decisions through an HTTP interface to the ISO 8583 message stream.

        ASA requests are delivered as an HTTP POST during authorization. The ASA request body adheres to the Lithic transaction schema, with some additional fields added for use in decisioning. A response should be sent with HTTP response code 200 and the approval decision in the response body. This response is converted by Lithic back into ISO 8583 format and forwarded to the network.

        In Sandbox, users can self-enroll and disenroll in ASA. In production, onboarding requires manual approval and setup.
      operationId: postAuthStream
      requestBody:
        content:
          application/json:
            examples:
              enrollAsaExample:
                summary: Enroll in ASA
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
                  description: A user-specified url to receive and respond to ASA request.
                  default: 'https://mywebhookurl.com/incoming'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        authStreamAccessRequest:
          '{$request.body#/webhook_url}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        acquirer_fee:
                          type: integer
                          description: Fee assessed by the merchant and paid for by the cardholder. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.
                        amount:
                          type: integer
                          description: Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time.
                        authorization_amount:
                          type: integer
                          description: The base transaction amount plus the acquirer fee field. This is the amount the issuer should authorize against unless the issuer is paying the acquirer fee on behalf of the cardholder.
                        avs:
                          type: string
                          description: Contains validation information entered by the client to be verified by the issuer.
                        card:
                          $ref: '#/components/schemas/Card'
                        cardholder_authentication:
                          $ref: '#/components/schemas/CardholderAuthentication'
                        created:
                          type: string
                          format: date-time
                          description: Date and time when the transaction first occurred. UTC time zone.
                        events:
                          type: array
                          items:
                            $ref: '#/components/schemas/TransactionEvent'
                          x-lithic-tag: Issuing
                          description: A list of all events that have modified this transaction.
                        funding:
                          type: array
                          description: >
                            A list of objects that describe how this transaction was funded,
                            with the `amount` represented in cents. A reference to the funding account for the
                            `card` that made this transaction may appear here and the `token` will match the `token`
                            for the funding account in the `card` field.
                          items:
                            type: object
                            properties:
                              amount:
                                type: integer
                                description: Funding amount (in cents), including any acquirer fees.
                              token:
                                type: string
                                description: Funding account token.
                              type:
                                type: string
                                enum:
                                  - DEPOSITORY_CHECKING
                                  - DEPOSITORY_SAVINGS
                                description: |
                                  Types of funding:
                                  * `DEPOSITORY_CHECKING` - Bank checking account.
                                  * `DEPOSITORY_SAVINGS` - Bank savings account.
                        merchant:
                          $ref: '#/components/schemas/Merchant'
                        merchant_amount:
                          type: string
                          description: >
                            The amount that the merchant will receive, denominated in `merchant_currency`
                            and in the smallest currency unit. Note the amount includes `acquirer_fee`,
                            similar to `authorization_amount`. It will be different from `authorization_amount`
                            if the merchant is taking payment in a different currency.
                        merchant_currency:
                          type: string
                          description: ISO 4217 alpha 3 code for the currency of the transaction.
                        pos:
                          $ref: '#/components/schemas/PointOfSale'
                        settled_amount:
                          type: integer
                          description: Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.
                          example: 100
                        status:
                          type: string
                          enum:
                            - AUTHORIZATION
                            - BALANCE_INQUIRY
                            - FINANCIAL_AUTHORIZATION
                          description: >
                            `AUTHORIZATION`, `FINANCIAL_AUTHORIZATION` and `BALANCE_INQUIRY` indicates that this request
                            requires an ASA response body in HTTP 200 response. `FINANCIAL_AUTHORIZATION` is a final
                            single-message transaction with no subsequent clearing, `BALANCE_INQUIRY` is a $0 authorization
                            that should prompt a response with the appropriate balance.
                        token:
                          type: string
                          format: uuid
                          description: Globally unique identifier.
              responses:
                '200':
                  description: OK
  /aggregate_balances:
    get:
      tags:
        - Balance
      summary: List Aggregate Balances
      description: Get the aggregated balance across all end-user accounts by financial account type
      operationId: getAggregateBalances
      parameters:
        - in: query
          name: financial_account_type
          schema:
            type: string
            enum: &financialAccountTypes
              - ISSUING
              - RESERVE
          description: Get the aggregate balance for a given Financial Account type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AggregateBalance'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth_stream/secret:
    get:
      tags:
        - Auth Stream Access (ASA)
      summary: Retrieve the ASA HMAC secret key
      description: >
        Retrieve the ASA HMAC secret key. If one does not exist your program yet, calling this endpoint will create one for you.
        The headers (which you can use to verify webhooks) will begin appearing shortly after calling this endpoint for the first time.
        See [this page](https://docs.lithic.com/docs/auth-stream-access-asa#asa-webhook-verification) for more detail about verifying ASA webhooks.
      operationId: getAuthStreamSecret
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                    description: The shared HMAC ASA secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth_stream/secret/rotate:
    post:
      tags:
        - Auth Stream Access (ASA)
      summary: Rotate the ASA HMAC secret key
      description: >
        Generate a new ASA HMAC secret key. The old ASA HMAC secret key will be deactivated 24 hours
        after a successful request to this endpoint. Make a [`GET /auth_stream/secret`](https://docs.lithic.com/reference/getauthstreamsecret)
        request to retrieve the new secret key.
      operationId: rotateAuthStreamSecret
      responses:
        '204':
          description: We have successfully rotated the secret key.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /tokenization_decisioning/secret:
    get:
      tags:
        - Card
      summary: Retrieve the Tokenization Decisioning HMAC secret key
      description: >
        Retrieve the Tokenization Decisioning secret key. If one does not exist your program yet, calling this endpoint will create one for you.
        The headers of the Tokenization Decisioning request will contain a hmac signature which you can use to verify requests originate from Lithic.
        See [this page](https://docs.lithic.com/docs/events-api#verifying-webhooks) for more detail about verifying Tokenization Decisioning requests.
      operationId: getTokenizationDecisioningSecret
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                    description: The Tokenization Decisioning HMAC secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /tokenization_decisioning/secret/rotate:
    post:
      tags:
        - Card
      summary: Rotate the Tokenization Decisioning HMAC secret key
      description: >
        Generate a new Tokenization Decisioning secret key. The old Tokenization Decisioning secret key will be deactivated 24 hours
        after a successful request to this endpoint.
      operationId: rotateTokenizationDecisioningSecret
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                    description: The new Tokenization Decisioning HMAC secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /balances:
    get:
      tags:
        - Balance
      summary: List Balances
      description: Get the balances for a program or a given end-user account
      operationId: getBalances
      parameters:
        - in: query
          name: account_token
          schema:
            type: string
            format: uuid
          description: List balances for all financial accounts of a given account_token.
        - in: query
          name: balance_date
          schema:
            type: string
            format: date-time
          description: UTC date and time of the balances to retrieve. Defaults to latest available balances
        - in: query
          name: financial_account_type
          schema:
            type: string
            enum: *financialAccountTypes
          description: List balances for a given Financial Account type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Balance'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /cards:
    get:
      tags:
        - Card
      summary: List cards
      description: List cards.
      operationId: getCards
      parameters:
        - in: query
          name: account_token
          schema:
            type: string
            format: uuid
          description: >
            Returns cards associated with the specified account.
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  page:
                    type: integer
                    description: Page number.
                    example: 1
                  total_entries:
                    type: integer
                    description: Total number of entries.
                    example: 1
                  total_pages:
                    type: integer
                    description: Total number of pages.
                    example: 1
                required:
                  - data
                  - page
                  - total_entries
                  - total_pages
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    post:
      tags:
        - Card
      summary: Create card
      description: >
        Create a new virtual or physical card. Parameters `pin`,
        `shipping_address`, and `product_id` only apply to physical cards.
      operationId: postCards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                account_token:
                  type: string
                  format: uuid
                  description: >
                    Globally unique identifier for the account that the card will be associated with.
                    Required for programs enrolling users using the [/account\_holders endpoint](https://docs.lithic.com/docs/account-holders-kyc).
                    See [Managing Your Program](doc:managing-your-program) for more information.
                card_program_token:
                  type: string
                  format: uuid
                  description: For card programs with more than one BIN range. This must be configured with Lithic before use. Identifies the card program/BIN range under which to create the card. If omitted, will utilize the program's default `card_program_token`. In Sandbox, use 00000000-0000-0000-1000-000000000000 and 00000000-0000-0000-2000-000000000000 to test creating cards on specific card programs.
                  example: '00000000-0000-0000-1000-000000000000'
                exp_month:
                  type: string
                  description: Two digit (MM) expiry month. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.
                  minLength: 2
                  maxLength: 2
                  example: '06'
                exp_year:
                  type: string
                  description: Four digit (yyyy) expiry year. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.
                  minLength: 4
                  maxLength: 4
                  example: '2027'
                memo:
                  type: string
                  description: Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.
                  example: 'New Card'
                spend_limit:
                  type: integer
                  description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.
                  example: 0
                  minimum: 0
                spend_limit_duration:
                  type: string
                  enum: &spendingLimitDurationTypes
                    - ANNUALLY
                    - FOREVER
                    - MONTHLY
                    - TRANSACTION
                  description: |
                    Spend limit duration values:
                    * `ANNUALLY` - Card will authorize transactions up to spend limit in a calendar year.
                    * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
                    * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. Month is calculated as this calendar date one month prior.
                    * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
                state:
                  type: string
                  enum:
                    - OPEN
                    - PAUSED
                  description: |
                    Card state values:
                    * `OPEN` - Card will approve authorizations (if they match card and account parameters).
                    * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
                type:
                  type: string
                  default: VIRTUAL
                  enum:
                    - VIRTUAL
                    - PHYSICAL
                    - MERCHANT_LOCKED
                    - SINGLE_USE
                  description: |
                    Card types:
                    * `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).
                    * `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
                    * `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.
                    * `SINGLE_USE` - *[Deprecated]* Card is closed upon first successful authorization.
                pin:
                  type: string
                  description: Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block-enterprise).
                digital_card_art_token:
                  type: string
                  format: uuid
                  description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
                  example: '00000000-0000-0000-1000-000000000000'
                product_id:
                  type: string
                  description: Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.
                  example: '1'
                shipping_address:
                  $ref: '#/components/schemas/ShippingAddress'
                shipping_method:
                  type: string
                  enum:
                    - STANDARD
                    - STANDARD_WITH_TRACKING
                    - EXPEDITED
                  description: |
                    Shipping method for the card. Only applies to cards of type PHYSICAL. Use of options besides `STANDARD` require additional permissions.
                    * `STANDARD` - USPS regular mail or similar international option, with no tracking
                    * `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking
                    * `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking
            examples:
              createCard:
                summary: Create card
                value:
                  memo: New Card
                  spend_limit: 1000
                  spend_limit_duration: TRANSACTION
                  state: OPEN
                  type: VIRTUAL
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
              example:
                created: '2021-06-28T22:53:15Z'
                cvv: '776'
                exp_month: '06'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08T17:57:36Z'
                  last_four: '5263'
                  nickname: ''
                  state: ENABLED
                  token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4142'
                memo: New Card
                pan: '4111111289144142'
                spend_limit: 1000
                spend_limit_duration: TRANSACTION
                state: OPEN
                token: 7ef7d65c-9023-4da3-b113-3b8583fd7951
                type: VIRTUAL
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /cards/{card_token}:
    get:
      tags:
        - Card
      summary: Get card
      description: Get card configuration such as spend limit and state.
      operationId: getCardByToken
      parameters:
        - $ref: '#/components/parameters/cardToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Card
      summary: Update card
      description: |
        Update the specified properties of the card. Unsupplied properties will remain unchanged. `pin` parameter only applies to physical cards.

        *Note: setting a card to a `CLOSED` state is a final action that cannot be undone.*
      operationId: patchCardByToken
      parameters:
        - $ref: '#/components/parameters/cardToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memo:
                  type: string
                  description: Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.
                  example: New Card
                spend_limit:
                  type: integer
                  description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.
                  example: 0
                spend_limit_duration:
                  type: string
                  enum: *spendingLimitDurationTypes
                  description: |
                    Spend limit duration values:
                    * `ANNUALLY` - Card will authorize transactions up to spend limit in a calendar year.
                    * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
                    * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. Month is calculated as this calendar date one month prior.
                    * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
                auth_rule_token:
                  type: string
                  description: |
                    Identifier for any Auth Rules that will be applied to transactions taking place with the card.
                state:
                  type: string
                  enum:
                    - CLOSED
                    - OPEN
                    - PAUSED
                  description: |
                    Card state values:
                    * `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.
                    * `OPEN` - Card will approve authorizations (if they match card and account parameters).
                    * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
                pin:
                  type: string
                  description: Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block-enterprise).
                digital_card_art_token:
                  type: string
                  format: uuid
                  description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
                  example: '00000000-0000-0000-1000-000000000000'
            examples:
              updateCard:
                summary: Update card
                value:
                  memo: Updated Name
                  spend_limit: 100
                  spend_limit_duration: FOREVER
                  state: OPEN
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
              example:
                created: '2021-06-28T22:53:15Z'
                cvv: '742'
                exp_month: '05'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08 17:57:36'
                  last_four: '5263'
                  nickname: ''
                  state: ENABLED
                  token: 'b0f0d91a-3697-46d8-85f3-20f0a585cbea'
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4938'
                memo: Updated Name
                pan: '4111111289144142'
                spend_limit: 100
                spend_limit_duration: FOREVER
                state: OPEN
                token: 'f5f905f5-8a8e-49bf-a9b4-c0adaa401456'
                type: VIRTUAL
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /cards/{card_token}/provision:
    post:
      tags:
        - Card
      summary: Provision card (Digital Wallet)
      description: |
        Allow your cardholders to directly add payment cards to the device's digital wallet (e.g. Apple Pay) with one touch from your app.

        This requires some additional setup and configuration. Please [Contact Us](https://lithic.com/contact) or your Customer Success representative for more information.
      operationId: postCardProvision
      parameters:
        - $ref: '#/components/parameters/cardTokenDigitalWallet'
      requestBody:
        description: Update request.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                digital_wallet:
                  type: string
                  description: Name of digital wallet provider.
                  enum:
                    - APPLE_PAY
                    - GOOGLE_PAY
                    - SAMSUNG_PAY
                nonce:
                  type: string
                  format: byte
                  description: Required for `APPLE_PAY`. Base64 cryptographic nonce provided by the device's wallet.
                nonce_signature:
                  type: string
                  format: byte
                  description: Required for `APPLE_PAY`. Base64 cryptographic nonce provided by the device's wallet.
                certificate:
                  type: string
                  format: byte
                  description: Required for `APPLE_PAY`. Apple's public leaf certificate. Base64 encoded in PEM format with headers `(-----BEGIN CERTIFICATE-----)` and trailers omitted. Provided by the device's wallet.
            examples:
              provisionGoogleCard:
                summary: Provision a card in Google Pay
                value:
                  digital_wallet: GOOGLE_PAY
      responses:
        '200':
          description: >
            Returns `provisioning_payload`, a cryptographic payload representing a payment card
            that can be passed to a device's digital wallet. Each digital wallet has a different API;
            consult the wallet's documentation for more info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  provisioning_payload:
                    type: string
              example:
                provisioning_payload: 'eyJjYXJ......'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /cards/{card_token}/reissue:
    post:
      tags:
        - Card
      summary: Reissue physical card
      description: |
        Initiate print and shipment of a duplicate physical card.

        Only applies to cards of type `PHYSICAL`.
      operationId: postCardReissue
      parameters:
        - $ref: '#/components/parameters/cardToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shipping_address:
                  $ref: '#/components/schemas/ShippingAddress'
                  description: If omitted, the previous shipping address will be used.
                shipping_method:
                  type: string
                  enum:
                    - STANDARD
                    - STANDARD_WITH_TRACKING
                    - EXPEDITED
                  description: |
                    Shipping method for the card. Use of options besides `STANDARD` require additional permissions.
                    * `STANDARD` - USPS regular mail or similar international option, with no tracking
                    * `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking
                    * `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking
                product_id:
                  type: string
                  description: >
                    Specifies the configuration (e.g. physical card art) that
                    the card should be manufactured with, and only applies to
                    cards of type `PHYSICAL`. This must be configured
                    with Lithic before use.
            examples:
              reissueCardNewAddress:
                summary: Reissue card with a new address
                value:
                  shipping_address:
                    first_name: Janet
                    last_name: Yellen
                    address1: 5 Broad Street
                    address2: Unit 5A
                    city: NEW YORK
                    state: NY
                    zipcode: '10001'
                    country: USA
                  shipping_method: STANDARD
                  product_id: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                created: '2021-06-28T22:53:15Z'
                cvv: '742'
                exp_month: '05'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08 17:57:36'
                  last_four: '5263'
                  nickname: ''
                  state: ENABLED
                  token: 'b0f0d91a-3697-46d8-85f3-20f0a585cbea'
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4938'
                memo: Updated Name
                pan: '4111111289144142'
                spend_limit: 100
                spend_limit_duration: FOREVER
                state: OPEN
                token: 'f5f905f5-8a8e-49bf-a9b4-c0adaa401456'
                type: VIRTUAL
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /disputes:
    get:
      tags:
        - Disputes
      summary: List disputes
      description: List disputes.
      operationId: getDisputes
      parameters:
        - in: query
          name: transaction_token
          schema:
            type: string
            format: uuid
          description: List disputes of a given transaction token.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - NEW
              - PENDING_CUSTOMER
              - SUBMITTED
              - REPRESENTMENT
              - PREARBITRATION
              - ARBITRATION
              - CASE_WON
              - CASE_CLOSED
          description: List disputes of a specific status.
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/endingBefore'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dispute'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    post:
      tags:
        - Disputes
      summary: Initiate dispute
      description: Initiate a dispute.
      operationId: postDisputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - reason
                - transaction_token
              properties:
                amount:
                  type: integer
                  description: Amount to dispute
                customer_filed_date:
                  type: string
                  format: date-time
                  description: Date the customer filed the dispute
                reason:
                  type: string
                  enum:
                    - ATM_CASH_MISDISPENSE
                    - CANCELLED
                    - DUPLICATED
                    - FRAUD_CARD_NOT_PRESENT
                    - FRAUD_CARD_PRESENT
                    - FRAUD_OTHER
                    - GOODS_SERVICES_NOT_AS_DESCRIBED
                    - GOODS_SERVICES_NOT_RECEIVED
                    - INCORRECT_AMOUNT
                    - MISSING_AUTH
                    - OTHER
                    - PROCESSING_ERROR
                    - REFUND_NOT_PROCESSED
                    - RECURRING_TRANSACTION_NOT_CANCELLED
                  description: Reason for dispute
                transaction_token:
                  type: string
                  format: uuid
                  description: Transaction to dispute
                customer_note:
                  type: string
                  maximum: 5000
                  description: Customer description of dispute
            examples:
              initiateDispute:
                summary: Initiate a dispute
                value:
                  amount: 10000
                  customer_filed_date: '2021-06-28T22:53:15Z'
                  reason: FRAUDULENT
                  transaction_token: 12345624-aa69-4cbc-a946-30d90181b621
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /disputes/{dispute_token}:
    get:
      tags:
        - Disputes
      summary: Get dispute
      description: Get dispute.
      operationId: getDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - Disputes
      summary: Withdraw dispute
      description: Withdraw dispute.
      operationId: deleteDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Disputes
      summary: Update dispute
      description: Update dispute. Can only be modified if status is `NEW`.
      operationId: updateDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: Amount to dispute
                customer_filed_date:
                  type: string
                  format: date-time
                  description: Date the customer filed the dispute
                customer_note:
                  type: string
                  description: Customer description of dispute
                reason:
                  type: string
                  enum:
                    - ATM_CASH_MISDISPENSE
                    - CANCELLED
                    - DUPLICATED
                    - FRAUD_CARD_NOT_PRESENT
                    - FRAUD_CARD_PRESENT
                    - FRAUD_OTHER
                    - GOODS_SERVICES_NOT_AS_DESCRIBED
                    - GOODS_SERVICES_NOT_RECEIVED
                    - INCORRECT_AMOUNT
                    - MISSING_AUTH
                    - OTHER
                    - PROCESSING_ERROR
                    - REFUND_NOT_PROCESSED
                    - RECURRING_TRANSACTION_NOT_CANCELLED
                  description: Reason for dispute
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /disputes/{dispute_token}/evidences:
    get:
      tags:
        - Disputes
      summary: List dispute evidences
      description: List evidence metadata for a dispute.
      operationId: getDisputeEvidences
      parameters:
        - $ref: '#/components/parameters/disputeToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/endingBefore'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DisputeEvidence'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    post:
      tags:
        - Disputes
      summary: Initiate dispute evidence upload
      description: |
        Use this endpoint to upload evidences for the dispute. It will return a URL to upload your documents to. The URL will expire in 30 minutes.

        Uploaded documents must either be a `jpg`, `png` or `pdf` file, and each must be less than 5 GiB.
      operationId: postEvidenceDocument
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_url:
                    type: string
                description: URL to upload document image to. The URL will expire in 5 minutes.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /disputes/{dispute_token}/evidences/{evidence_token}:
    get:
      tags:
        - Disputes
      summary: Get dispute evidence
      description: Get a dispute's evidence metadata.
      operationId: getDisputeEvidenceByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
        - $ref: '#/components/parameters/disputeEvidenceToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEvidence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - Disputes
      summary: Withdraw dispute evidence
      description: Soft delete evidence for a dispute. Evidence will not be reviewed or submitted by Lithic after it is withdrawn.
      operationId: deleteDisputeEvidenceByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
        - $ref: '#/components/parameters/disputeEvidenceToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEvidence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /embed/card:
    get:
      tags:
        - Card
      summary: Embedded card UI
      description: |
        Handling full card PANs and CVV codes requires that you comply with the Payment Card Industry Data Security Standards (PCI DSS). Some clients choose to reduce their compliance obligations by leveraging our embedded card UI solution documented below.

        In this setup, PANs and CVV codes are presented to the end-user via a card UI that we provide, optionally styled in the customer's branding using a specified css stylesheet. A user's browser makes the request directly to api.lithic.com, so card PANs and CVVs never touch the API customer's servers while full card data is displayed to their end-users. The response contains an HTML document. This means that the url for the request can be inserted straight into the `src` attribute of an iframe.

        ```html
        <iframe id="card-iframe"
                src="https://sandbox.lithic.com/v1/embed/card?embed_request=eyJjc3MiO...;hmac=r8tx1..."
                allow="clipboard-write" class="content"></iframe>
        ```

        You should compute the request payload on the server side. You can render it (or the whole iframe) on the server or make an ajax call from your front end code, but **do not ever embed your API key into front end code, as doing so introduces a serious security vulnerability**.
      operationId: getEmbedCard
      parameters:
        - in: query
          name: embed_request
          description: A base64 encoded JSON string of an EmbedRequest to specify which card to load.
          schema:
            type: string
          required: true
        - in: query
          name: hmac
          description: SHA256 HMAC of the embed_request JSON string with base64 digest.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: |
            The endpoint returns an HTML document similar to the one below. It is up to the API client to provide css styles for these elements in the EmbedRequest. You can always rely on the `card`, `pan`, `expiry`, `cvv`, and `alert` ids, as well as the `pan-separator` class. You shouldn't make any other assumptions about the structure of the document as it could change at any time.

            Note that using the default style sheet there is no visual indication that copying is happening on-click, and you may need to add on-click styling yourself.
          content:
            text/html:
              schema:
                type: string
              examples:
                html:
                  summary: Card UI
                  value: |
                    <html>
                    <head>
                    <link rel="stylesheet" type="text/css" href="https://demo.lithic.com/backend/embedded.css">
                    <style>
                        #alert { display: none; }
                    </style>
                    <script type="text/javascript">
                        var timeout;

                        function clearAlertDelay() {
                            clearTimeout(timeout);
                            var messageDiv = document.getElementById('alert');
                            timeout = window.setTimeout(
                                function() {
                                    messageDiv.className = "empty";
                                    messageDiv.innerText = "";
                                },
                                1200
                            );
                        }

                        function copySuccess(divId) {
                            var messageDiv = document.getElementById('alert');
                            messageDiv.innerText = divId + " copied to clipboard";
                            messageDiv.className = "success";
                            console.log('Copying to clipboard was successful!');
                            clearAlertDelay();
                        }

                        function copyFailed(divId) {
                            var messageDiv = document.getElementById('alert');
                            messageDiv.innerText = "error copying " + divId;
                            messageDiv.className = "error";
                            console.error('Copying to clipboard failed');
                            clearAlertDelay();
                        }

                        function copyToClip(divId) {
                            var messageDiv = document.getElementById('alert');
                            var copyEl = document.getElementById(divId);
                            var copyText = copyEl.textContent;
                            navigator.clipboard.writeText(copyText)
                                .then(function () {
                                    copySuccess(divId);
                                    clearAlertDelay();
                                })
                                .catch(function(err) {
                                    try {
                                        var copied = false;
                                        if (document.createRange) {
                                            range = document.createRange();
                                            range.selectNode(copyEl)
                                            select = window.getSelection();
                                            select.removeAllRanges();
                                            select.addRange(range);
                                            copied = document.execCommand('copy');
                                            select.removeAllRanges();
                                        }
                                        else {
                                            range = document.body.createTextRange();
                                            range.moveToElementText(copyEl);
                                            range.select();
                                            copied = document.execCommand('copy');
                                        }

                                        if (copied) {
                                            copySuccess(divId);
                                        }
                                        else {
                                            copyFailed(divId);
                                        }
                                    }
                                    catch (err) {
                                        copyFailed(divId);
                                    }
                                    clearAlertDelay();
                                })
                        }
                    </script>
                    </head>
                    <body>
                        <div id="card">
                            <div id="pan" onclick="copyToClip('pan')">9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999</div>
                            <div id="expiry">
                                <span id="month" onclick="copyToClip('month')">08</span>
                                <span id="separator">/</span>
                                <span id="year" onclick="copyToClip('year')">27</span>
                            </div>
                            <div id="cvv" onclick="copyToClip('cvv')">574</div>
                            <div id="alert" class="empty"></div>
                        </div>
                    </body>
                    </html>
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions:
    get:
      tags:
        - Event
      summary: List event subscriptions
      description: List all the event subscriptions.
      operationId: getEventSubscriptions
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/endingBefore'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data:
                  - description: A subscription for all events
                    token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                    event_types: null
                    url: https://example.com/webhook
                    disabled: false
                has_more: false
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventSubscription'
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    post:
      tags:
        - Event
      summary: Create event subscription
      description: Create a new event subscription.
      operationId: createEventSubscription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Event subscription description.
                disabled:
                  type: boolean
                  default: false
                  description: Whether the event subscription is active (false) or inactive (true).
                event_types:
                  type: array
                  items:
                    type: string
                    enum: &eventTypes
                      - dispute.updated
                      - digital_wallet.tokenization_approval_request
                  description: Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.
                url:
                  type: string
                  format: uri
                  description: URL to which event webhooks will be sent. URL must be a valid HTTPS address.
              required:
                - url
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                description: A subscription for all events
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions/{event_subscription_token}:
    get:
      tags:
        - Event
      summary: Get event subscription
      description: Get an event subscription.
      operationId: getEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                description: A subscription for all events
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      tags:
        - Event
      summary: Update event subscription
      description: Update an event subscription.
      operationId: updateEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Event subscription description.
                disabled:
                  type: boolean
                  default: false
                  description: Whether the event subscription is active (false) or inactive (true).
                event_types:
                  type: array
                  items:
                    type: string
                    enum: &eventTypes
                      - dispute.updated
                      - digital_wallet.tokenization_approval_request
                  description: Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.
                url:
                  type: string
                  format: uri
                  description: URL to which event webhooks will be sent. URL must be a valid HTTPS address.
              required:
                - url
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                description: A subscription for all events
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - Event
      summary: Delete event subscription
      description: Delete an event subscription.
      operationId: deleteEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions/{event_subscription_token}/recover:
    post:
      tags:
        - Event
      summary: Resend failed messages
      description: Resend all failed messages since a given time.
      operationId: recoverEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions/{event_subscription_token}/replay_missing:
    post:
      tags:
        - Event
      summary: Replay missing messages
      description: >
        Replays messages to the endpoint. Only messages that were created after `begin` will be sent.
        Messages that were previously sent to the endpoint are not resent.
      operationId: replayMissingEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions/{event_subscription_token}/secret:
    get:
      tags:
        - Event
      summary: Get event subscription secret
      description: Get the secret for an event subscription.
      operationId: getEventSubscriptionSecret
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                key: whsec_C2FVsBQIhrscChlQIMA
              schema:
                type: object
                properties:
                  key:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /event_subscriptions/{event_subscription_token}/secret/rotate:
    post:
      tags:
        - Event
      summary: Rotate event subscription secret
      description: >
        Rotate the secret for an event subscription.
        The previous secret will be valid for the next 24 hours.
      operationId: rotateEventSubscriptionSecret
      parameters:
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /events:
    get:
      tags:
        - Event
      summary: List events
      description: List all events.
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/endingBefore'
        - in: query
          name: event_types[]
          required: false
          schema:
            type: array
            items:
              type: string
              enum: *eventTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                data:
                  - created: '2020-07-08 17:57:36'
                    event_type: 'dispute.updated'
                    token: 'msg_1srOrx2ZWZBpBUvZwXKQmoEYga1'
                    payload: {}
                has_more: false
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /events/{event_token}:
    get:
      tags:
        - Event
      summary: Get event
      description: Get an event.
      operationId: getEvent
      parameters:
        - in: path
          name: event_token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /events/{event_token}/event_subscriptions/{event_subscription_token}/resend:
    post:
      tags:
        - Event
      summary: Resend event
      description: Resend an event to an event subscription.
      operationId: resendEvent
      parameters:
        - in: path
          name: event_token
          schema:
            type: string
          required: true
        - in: path
          name: event_subscription_token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /financial_accounts:
    get:
      tags:
        - Financial Account
      summary: List Financial Accounts
      description: Retrieve information on your financial accounts including routing and account number.
      operationId: getFinancialAccounts
      parameters:
        - in: query
          name: account_token
          schema:
            type: string
            format: uuid
          description: List financial accounts for a given account_token
        - in: query
          name: type
          schema:
            type: string
            enum: *financialAccountTypes
          description: List financial accounts of a given type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FinancialAccount'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /financial_accounts/{financial_account_token}/balances:
    get:
      tags:
        - Balance
      summary: Get balances
      description: Get the balances for a given financial account.
      operationId: getBalance
      parameters:
        - in: query
          name: balance_date
          schema:
            type: string
            format: date-time
          description: UTC date of the balance to retrieve. Defaults to latest available balance
        - in: query
          name: last_transaction_event_token
          schema:
            type: string
            format: uuid
          description: |
            Balance after a given financial event occured. 
            For example, passing the event_token of a $5 CARD_CLEARING financial event will return a balance decreased by $5
        - $ref: '#/components/parameters/financialAccountToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Balance'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /financial_accounts/{financial_account_token}/financial_transactions:
    get:
      tags:
        - Financial Transaction
      summary: List Financial Transactions
      description: List the financial transactions for a given financial account.
      operationId: getFinancialTransactions
      parameters:
        - in: query
          name: category
          schema:
            type: string
            enum:
              - ACH
              - CARD
              - TRANSFER
          description: Financial Transaction category to be returned.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - DECLINED
              - EXPIRED
              - PENDING
              - SETTLED
              - VOIDED
          description: Financial Transaction status to be returned.
        - in: query
          name: result
          schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
          description: Financial Transaction result to be returned.
        - $ref: '#/components/parameters/financialAccountToken'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/endingBefore'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FinancialTransaction'
                  has_more:
                    type: boolean
                    description: More data exists.
                required:
                  - data
                  - has_more
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /financial_accounts/{financial_account_token}/financial_transactions/{financial_transaction_token}:
    get:
      tags:
        - Financial Transaction
      summary: Get Financial Transaction
      description: Get the financial transaction for the provided token.
      operationId: getFinancialTransactionByToken
      parameters:
        - $ref: '#/components/parameters/financialAccountToken'
        - $ref: '#/components/parameters/financialTransactionToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialTransaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /simulate/authorize:
    post:
      tags:
        - Transaction
      summary: Simulate authorization
      description: >
        Simulates an authorization request from the payment network as if
        it came from a merchant acquirer. If you're configured for ASA,
        simulating auths requires your ASA client to be set up properly
        (respond with a valid JSON to the ASA request). For users that are not
        configured for ASA, a daily transaction limit of $5000 USD is applied by default.
        This limit can be modified via the [update account](https://docs.lithic.com/reference/patchaccountbytoken) endpoint.
      operationId: postSimulateAuthorize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - descriptor
                - pan
              properties:
                amount:
                  type: integer
                  description: Amount (in cents) to authorize. For credit authorizations and financial credit authorizations, any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction. For balance inquiries, this field must be set to 0.
                  minimum: 0
                descriptor:
                  type: string
                  description: Merchant descriptor.
                  minLength: 1
                  maxLength: 25
                  example: 'COFFEE SHOP'
                pan:
                  type: string
                  description: Sixteen digit card number.
                  minLength: 16
                  maxLength: 16
                  example: '4111111289144142'
                status:
                  type: string
                  description: |
                    Type of event to simulate.
                    * `AUTHORIZATION` is a dual message purchase authorization, meaning a subsequent clearing step is required to settle the transaction.
                    * `BALANCE_INQUIRY` is a $0 authorization that includes a request for the balance held on the card, and is most typically seen when a cardholder requests to view a card's balance at an ATM.
                    * `CREDIT_AUTHORIZATION` is a dual message request from a merchant to authorize a refund or credit, meaning a subsequent clearing step is required to settle the transaction.
                    * `FINANCIAL_AUTHORIZATION` is a single message request from a merchant to debit funds immediately (such as an ATM withdrawal), and no subsequent clearing is required to settle the transaction.
                    * `FINANCIAL_CREDIT_AUTHORIZATION` is a single message request from a merchant to credit funds immediately, and no subsequent clearing is required to settle the transaction.
                  default: AUTHORIZATION
                  enum:
                    - AUTHORIZATION
                    - BALANCE_INQUIRY
                    - CREDIT_AUTHORIZATION
                    - FINANCIAL_AUTHORIZATION
                    - FINANCIAL_CREDIT_AUTHORIZATION
                  example: AUTHORIZATION
                merchant_acceptor_id:
                  type: string
                  description: Unique identifier to identify the payment card acceptor.
                  example: 'OODKZAPJVN4YS7O'
                  minLength: 1
                  maxLength: 15
                merchant_currency:
                  type: string
                  description: 3-digit alphabetic ISO 4217 currency code.
                  example: GBP
                merchant_amount:
                  type: integer
                  description: Amount of the transaction to be simulated in currency specified in merchant_currency, including any acquirer fees.
                mcc:
                  type: string
                  description: |
                    Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.
                    Supported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).
                  example: '5812'
                partial_approval_capable:
                  type: boolean
                  description: |
                    Set to true if the terminal is capable of partial approval otherwise false.
                    Partial approval is when part of a transaction is approved and another
                    payment must be used for the remainder.
            examples:
              simulateAuthorization:
                summary: Simulate an authorization
                value:
                  amount: 3831
                  descriptor: 'COFFEE SHOP'
                  pan: '4111111289144142'
              simulateFinancialCreditAuthorization:
                summary: Simulate a financial credit authorization
                value:
                  amount: 3831
                  descriptor: 'COFFEE SHOP'
                  pan: '4111111289144142'
                  status: FINANCIAL_CREDIT_AUTHORIZATION
              simulateBalanceInquiry:
                summary: Simulate a balance inquiry
                value:
                  amount: 0
                  descriptor: 'NEIGHBORHOOD ATM'
                  pan: '4111111289144142'
                  status: BALANCE_INQUIRY
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
                  token:
                    type: string
                    format: uuid
                    description: A unique token to reference this transaction with later calls to void or clear the authorization.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/authorization_advice:
    post:
      tags:
        - Transaction
      summary: Simulate authorization advice
      description: >
        Simulates an authorization advice request from the payment network as if
        it came from a merchant acquirer. An authorization advice request changes the
        amount of the transaction.
      operationId: postSimulateAuthorizationAdvice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - token
              properties:
                amount:
                  type: integer
                  description: Amount (in cents) to authorize. This amount will override the transaction's amount that was originally set by /v1/simulate/authorize.
                  minimum: 0
                token:
                  type: string
                  format: uuid
                  description: The transaction token returned from the /v1/simulate/authorize response.
            examples:
              simulateAuthorizationAdvice:
                summary: Simulate an authorization
                value:
                  amount: 3831
                  descriptor: 'COFFEE SHOP'
                  pan: '4111111289144142'
                  token: 'fabd829d-7f7b-4432-a8f2-07ea4889aaac'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
                  token:
                    type: string
                    format: uuid
                    description: A unique token to reference this transaction.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/clearing:
    post:
      tags:
        - Transaction
      summary: Simulate clearing transaction
      description: |
        Clears an existing authorization. After this event, the transaction is no longer pending.

        If no `amount` is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.
      operationId: postSimulateClearing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                amount:
                  type: integer
                  description: |
                    Amount (in cents) to complete. Typically this will match the original authorization, but may be more or less.

                    If no amount is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.
                token:
                  type: string
                  format: uuid
                  description: The transaction token returned from the /v1/simulate/authorize response.
            examples:
              simulateClear:
                summary: Simulate settling a transaction
                value:
                  amount: '0'
                  token: 'fabd829d-7f7b-4432-a8f2-07ea4889aaac'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: '3ec51ef1-b68d-4243-be6c-2204229b09cf'
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/credit_authorization_advice:
    post:
      tags:
        - Transaction
      summary: Simulate credit authorization advice
      description: >
        Simulates a credit authorization advice message from the payment network.

        This message indicates that a credit authorization was approved on your behalf by the network.
      operationId: postSimulateCreditAuthorizationAdvice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - descriptor
                - pan
              properties:
                amount:
                  type: integer
                  description: Amount (in cents). Any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction.
                  minimum: 0
                descriptor:
                  type: string
                  description: Merchant descriptor.
                  minLength: 1
                  maxLength: 25
                  example: 'COFFEE SHOP'
                pan:
                  type: string
                  description: Sixteen digit card number.
                  minLength: 16
                  maxLength: 16
                  example: '4111111289144142'
                merchant_acceptor_id:
                  type: string
                  description: Unique identifier to identify the payment card acceptor.
                  example: 'XRKGDPOWEWQRRWU'
                  minLength: 1
                  maxLength: 15
                mcc:
                  type: string
                  description: |
                    Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.
                    Supported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).
                  example: '5812'
            examples:
              simulateCreditAuthorizationAdvice:
                summary: Simulate a credit authorization advice message
                value:
                  amount: 3831
                  descriptor: 'COFFEE SHOP'
                  pan: '4111111289144142'
                  merchant_acceptor_id: 'XRKGDPOWEWQRRWU'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
                  token:
                    type: string
                    format: uuid
                    description: A unique token to reference this transaction.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/return:
    post:
      tags:
        - Transaction
      summary: Simulate return
      description: |
        Returns (aka refunds) an amount back to a card. Returns are cleared immediately and do not spend time in a `PENDING` state.
      operationId: postSimulateReturn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - descriptor
                - pan
              properties:
                amount:
                  type: integer
                  description: Amount (in cents) to authorize.
                  minimum: 0
                descriptor:
                  type: string
                  description: Merchant descriptor.
                  minLength: 1
                  maxLength: 25
                  example: 'COFFEE SHOP'
                pan:
                  type: string
                  description: Sixteen digit card number.
                  minLength: 16
                  maxLength: 16
                  example: '4111111289144142'
            examples:
              simulateReturn:
                summary: Simulate a return
                value:
                  amount: 3831
                  descriptor: 'COFFEE SHOP'
                  pan: '4111111289144142'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
                  token:
                    type: string
                    format: uuid
                    description: A unique token to reference this transaction.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/return_reversal:
    post:
      tags:
        - Transaction
      summary: Simulate return reversal
      description: >
        Voids a settled credit transaction – i.e., a transaction with a negative
        amount and `SETTLED` status. These can be credit authorizations that have
        already cleared or financial credit authorizations.
      operationId: postSimulateReturnReversal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  format: uuid
                  description: The transaction token returned from the /v1/simulate/authorize response.
            examples:
              simulateReturnReversal:
                summary: Simulate a return reversal
                value:
                  token: 'fabd829d-7f7b-4432-a8f2-07ea4889aaac'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /simulate/void:
    post:
      tags:
        - Transaction
      summary: Simulate void transaction
      description: >
        Voids an existing, uncleared (aka pending) authorization.
        If amount is not sent the full amount will be voided. Cannot be used on partially completed transactions, but can be used on partially voided transactions.
        _Note that simulating an authorization expiry on credit authorizations or credit authorization advice is not currently supported but will be added soon._
      operationId: postSimulateVoid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                amount:
                  type: integer
                  minimum: 0
                  description: Amount (in cents) to void. Typically this will match the original authorization, but may be less.
                token:
                  type: string
                  format: uuid
                  description: The transaction token returned from the /v1/simulate/authorize response.
                type:
                  type: string
                  description: |
                    Type of event to simulate. Defaults to `AUTHORIZATION_REVERSAL`.

                    * `AUTHORIZATION_EXPIRY` indicates authorization has expired and been reversed by Lithic.
                    * `AUTHORIZATION_REVERSAL` indicates authorization was reversed by the merchant.
                  default: AUTHORIZATION_REVERSAL
                  enum:
                    - AUTHORIZATION_EXPIRY
                    - AUTHORIZATION_REVERSAL
                  example: AUTHORIZATION_EXPIRY
            examples:
              simulateAuthorizationExpiry:
                summary: Simulate expiring a transaction
                value:
                  amount: 100
                  type: AUTHORIZATION_EXPIRY
                  token: 'fabd829d-7f7b-4432-a8f2-07ea4889aaac'
              simulateAuthorizationReversal:
                summary: Simulate reversing a transaction
                value:
                  amount: 100
                  type: AUTHORIZATION_REVERSAL
                  token: 'fabd829d-7f7b-4432-a8f2-07ea4889aaac'
      responses:
        '201':
          description: OK
          content:
            application/json:
              example:
                debugging_request_id: '3ec51ef1-b68d-4243-be6c-2204229b09cf'
              schema:
                type: object
                properties:
                  debugging_request_id:
                    type: string
                    format: uuid
                    description: Debugging request ID to share with Lithic Support team.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /status:
    get:
      tags:
        - Status
      summary: API status check
      operationId: getStatus
      security: [{}] # disable security
      responses:
        '200':
          description: Endpoint for users to check whether they can reach the api.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /transfer:
    post:
      tags:
        - Financial Transaction
      summary: Transfer funds within Lithic
      description: Transfer funds between two financial accounts
      operationId: postTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - from
                - to
                - amount
              properties:
                from:
                  type: string
                  description: Globally unique identifier for the financial account that will send the funds.
                  $ref: '#/components/schemas/FinancialAccount'
                to:
                  type: string
                  description: Globally unique identifier for the financial account that will receive the funds.
                  $ref: '#/components/schemas/FinancialAccount'
                amount:
                  type: integer
                  description: Amount to be transferred in the currency’s smallest unit (e.g., cents for USD). This should always be a positive value.
                memo:
                  type: string
                  description: Optional descriptor for the transfer.
                transaction_token:
                  type: string
                  format: uuid
                  description: Customer-provided transaction_token that will serve as an idempotency token.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Transfer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /transactions:
    get:
      tags:
        - Transaction
      summary: List transactions
      description: |
        List transactions.
      operationId: getTransactions
      parameters:
        - in: query
          name: account_token
          schema:
            type: string
            format: uuid
          description: >
            Filters for transactions associated with a specific account.
        - in: query
          name: card_token
          schema:
            type: string
            format: uuid
          description: Filters for transactions associated with a specific card.
        - in: query
          name: result
          schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
          description: Filters for transactions using transaction result field. Can filter by `APPROVED`, and `DECLINED`.
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  page:
                    type: integer
                    description: Page of the result.
                  total_entries:
                    type: integer
                    description: Number of matched rows.
                  total_pages:
                    type: integer
                    description: Total pages of result.
                required:
                  - data
                  - page
                  - total_entries
                  - total_pages
              example:
                data:
                  - amount: -7666
                    cardholder_authentication:
                      verification_attempted: 'NONE'
                      verification_result: 'NOT_ATTEMPTED'
                      liability_shift: 'NONE'
                      3ds_version: null
                      acquirer_exemption: 'NONE'
                    card:
                      created: '2020-07-15T17:48:48Z'
                      cvv: '574'
                      exp_month: '07'
                      exp_year: '2026'
                      funding:
                        account_name: Sandbox
                        created: '2020-07-08T17:57:36Z'
                        last_four: '5263'
                        nickname: ''
                        state: ENABLED
                        token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                        type: DEPOSITORY_CHECKING
                      hostname: ''
                      last_four: '6749'
                      memo: card 2
                      pan: '4111111171826749'
                      spend_limit: 0
                      spend_limit_duration: TRANSACTION
                      state: OPEN
                      token: 079d1898-65f7-4d66-b0bc-172d2935a5fa
                      type: VIRTUAL
                    created: '2020-07-15T19:17:22Z'
                    events:
                      - amount: 7666
                        created: '2020-07-15T19:17:22Z'
                        result: APPROVED
                        token: 6a885bcb-89f6-4fcb-a0ce-7f0233ae20a0
                        type: RETURN
                    funding:
                      - amount: -7666
                        token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                        type: DEPOSITORY_CHECKING
                    merchant:
                      acceptor_id: '174030075991'
                      city: NEW YORK
                      country: USA
                      descriptor: Sample Return
                      mcc: '5812'
                      state: NY
                    result: APPROVED
                    settled_amount: -7666
                    status: SETTLING
                    token: 9b4c99b1-2e90-4e24-b54b-90dc8af4695b
                page: 1
                total_entries: 1
                total_pages: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /transactions/{transaction_token}:
    get:
      tags:
        - Transaction
      summary: Get transaction
      description: |
        Get specific transaction.
      operationId: getTransactionByToken
      parameters:
        - $ref: '#/components/parameters/transactionToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /auth_rules:
    post:
      tags:
        - Authorization Rules
      summary: Create authorization rule
      description: Creates an authorization rule (Auth Rule) and applies it at the program, account, or card level.
      operationId: postAuthRules
      requestBody:
        required: true
        content:
          application/json:
            examples:
              authRule:
                summary: Create an authorization rule at the program level
                value:
                  allowed_mcc: ['3000']
                  allowed_countries: ['USA', 'CAN']
                  avs_type: ZIP_ONLY
                  program_level: True
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthRuleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthRule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    get:
      tags:
        - Authorization Rules
      summary: List authorization rule(s)
      description: >
        Return all of the Auth Rules under the program.
      operationId: getAuthRules
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthRule'
                  total_entries:
                    type: string
                    description: Total number of entries.
                    example: '1'
                  total_pages:
                    type: integer
                    description: Total number of pages
                    example: 1
                  page:
                    type: integer
                    description: Page number.
                    example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /auth_rules/{auth_rule_token}:
    put:
      tags:
        - Authorization Rules
      summary: Update authorization rule
      description: Update the properties associated with an existing authorization rule (Auth Rule).
      operationId: putAuthRuleByToken
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      requestBody:
        required: true
        content:
          application/json:
            examples:
              authRule:
                summary: Update an existing authorization rule
                value:
                  allowed_mcc: ['3000', '3001']
                  allowed_countries: ['USA']
                  avs_type: ZIP_ONLY
            schema:
              type: object
              properties:
                allowed_mcc:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of merchant category codes for which the Auth Rule will permit transactions.
                    Note that only this field or `blocked_mcc` can be used for a given Auth Rule.
                blocked_mcc:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of merchant category codes for which the Auth Rule will automatically decline transactions.
                    Note that only this field or `allowed_mcc` can be used for a given Auth Rule.
                allowed_countries:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of country codes for which the Auth Rule will permit transactions.
                    Note that only this field or `blocked_countries` can be used for a given Auth Rule.
                blocked_countries:
                  type: array
                  items:
                    type: string
                  description: |
                    Array of country codes for which the Auth Rule will automatically decline transactions.
                    Note that only this field or `allowed_countries` can be used for a given Auth Rule.
                avs_type:
                  type: string
                  enum:
                    - ZIP_ONLY
                  description: |
                    Address verification to confirm that postal code entered at point of transaction (if applicable) matches the postal code on file for a given card.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthRule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    get:
      tags:
        - Authorization Rules
      summary: Get authorization rule by token
      description: |
        Detail the properties and entities (program, accounts, and cards) associated with an existing authorization rule (Auth Rule).
      operationId: getAuthRuleByToken
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthRule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /auth_rules/{auth_rule_token}/apply:
    post:
      tags:
        - Authorization Rules
      summary: Apply existing authorization rule
      description: Applies an existing authorization rule (Auth Rule) to an program, account, or card level.
      operationId: postAuthRuleByTokenApply
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      requestBody:
        required: true
        content:
          application/json:
            examples:
              applyAuthRule:
                summary: Apply an existing authorization rule at the card level
                value:
                  card_tokens:
                    ['df942c4e-9130-4ab5-b067-778a2c55b357', '1336a403-2447-4b36-a009-6fbb852ee675']
            schema:
              type: object
              properties:
                card_tokens:
                  type: array
                  items:
                    type: string
                  format: uuid
                  description: |
                    Array of card_token(s) identifying the cards that the Auth Rule applies to.
                    Note that only this field or `account_tokens` can be provided for a given Auth Rule.
                account_tokens:
                  type: array
                  items:
                    type: string
                  format: uuid
                  description: |
                    Array of account_token(s) identifying the accounts that the Auth Rule applies to.
                    Note that only this field or `card_tokens` can be provided for a given Auth Rule.
                program_level:
                  type: boolean
                  description: Boolean indicating whether the Auth Rule is applied at the program level.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthRule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /auth_rules/remove:
    delete:
      tags:
        - Authorization Rules
      summary: Remove authorization rule
      description: Remove an existing authorization rule (Auth Rule) from an program, account, or card-level.
      operationId: deleteAuthRuleRemove
      requestBody:
        required: true
        content:
          application/json:
            examples:
              removeAuthRule:
                summary: Remove an authorization rule from program level
                value:
                  program_level: false
            schema:
              type: object
              properties:
                card_tokens:
                  type: array
                  items:
                    type: string
                  format: uuid
                  description: |
                    Array of card_token(s) identifying the cards that the Auth Rule applies to.
                    Note that only this field or `account_tokens` can be provided for a given Auth Rule.
                account_tokens:
                  type: array
                  items:
                    type: string
                  format: uuid
                  description: |
                    Array of account_token(s) identifying the accounts that the Auth Rule applies to.
                    Note that only this field or `card_tokens` can be provided for a given Auth Rule.
                program_level:
                  type: boolean
                  description: Boolean indicating whether the Auth Rule is applied at the program level.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_tokens:
                    type: array
                    items:
                      type: string
                    example: ['ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1']
                  card_tokens:
                    type: array
                    items:
                      type: string
                    example: ['ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1']
                  previous_auth_rule_tokens:
                    type: array
                    items:
                      type: string
                    example: ['ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1']
                  program_level:
                    type: boolean
                    example: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /responder_endpoints:
    post:
      tags:
        - Responder Endpoints
      summary: Enroll a responder endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL for the responder endpoint (must be http(s)).
                type:
                  type: string
                  enum:
                    - TOKENIZATION_DECISIONING
                  description: The type of the endpoint.
      responses:
        200:
          description: Endpoint enrolled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrolled:
                    type: boolean
                    description: True if the endpoint was enrolled successfully.
    delete:
      tags:
        - Responder Endpoints
      summary: Disenroll a responder endpoint
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - TOKENIZATION_DECISIONING
          required: true
          description: The type of the endpoint.
      responses:
        200:
          description: Endpoint disenrolled successfully
          content: {}
    get:
      tags:
        - Responder Endpoints
      summary: Check the status of a responder endpoint
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - TOKENIZATION_DECISIONING
          required: true
          description: The type of the endpoint.
      responses:
        200:
          description: Responder endpoint status
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrolled:
                    type: boolean
                    description: True if the instance has an endpoint enrolled.
                  url:
                    type: string
                    nullable: true
                    format: uri
                    description: The URL of the currently enrolled endpoint or null.

components:
  parameters:
    accountToken:
      in: path
      name: account_token
      required: true
      description: Globally unique identifier for account.
      schema:
        type: string
        format: uuid
      examples:
        accountTokenExample:
          value: d86a0a4d-7459-471a-83b4-431136320828
          summary: A sample account token
    accountHolderTokenPath:
      in: path
      name: account_holder_token
      required: true
      description: Globally unique identifier for the account holder.
      schema:
        type: string
        format: uuid
      examples:
        accountHolderTokenExample:
          value: 65db64b2-ae89-491a-97d9-f64788f8b2ab
          summary: A sample account holder token
    authRuleToken:
      in: path
      name: auth_rule_token
      required: true
      schema:
        type: string
        format: uuid
      description: Globally unique identifier for the Auth Rule.
      examples:
        accountHolderTokenExample:
          value: 50ca12c3-ae11-513b-20e0-e55421f8b2ab
          summary: A sample authorization rule token
    cardToken:
      in: path
      name: card_token
      required: true
      schema:
        type: string
        format: uuid
      examples:
        cardTokenExample:
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
          summary: A sample card token
    cardTokenDigitalWallet:
      in: path
      name: card_token
      required: true
      schema:
        type: string
        format: uuid
      examples:
        cardTokenExample:
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
          summary: A sample card token
      description: The unique token of the card to add to the device's digital wallet.
    disputeToken:
      in: path
      name: dispute_token
      required: true
      schema:
        type: string
        format: uuid
      examples:
        disputeTokenExample:
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
          summary: A sample dispute token
    disputeEvidenceToken:
      in: path
      name: evidence_token
      required: true
      schema:
        type: string
        format: uuid
      examples:
        disputeEvidenceExample:
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
          summary: A sample dispute evidence token
    documentToken:
      in: path
      name: document_token
      required: true
      description: Globally unique identifier for the document.
      schema:
        type: string
        format: uuid
      examples:
        documentTokenExample:
          value: 76ca80c3-bf90-491a-97d9-f64788f8b2ab
          summary: A sample document token
    financialAccountToken:
      in: path
      name: financial_account_token
      required: true
      description: Globally unique identifier for financial account.
      schema:
        type: string
        format: uuid
      examples:
        financialAccountTokenExample:
          value: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          summary: A sample financial account token
    financialTransactionToken:
      in: path
      name: financial_transaction_token
      required: true
      description: Globally unique identifier for financial transaction token.
      schema:
        type: string
        format: uuid
      examples:
        financialTransactionTokenExample:
          value: 18394f8e-711b-4b3e-ae21-d35a9eafe7d1
          summary: A sample financial transaction token
    fundingSourceToken:
      in: path
      name: funding_source_token
      required: true
      schema:
        type: string
        format: uuid
      examples:
        fundingSourceTokenExample:
          value: 73ca53a1-bf91-502b-97d9-f64788f8b2ab
          summary: A sample funding source token
    idempotencyToken:
      in: header
      name: Idempotency-Token
      schema:
        type: string
      description: Idempoency key for the request.
    transactionToken:
      in: path
      name: transaction_token
      required: true
      schema:
        type: string
        format: uuid
      description: Globally unique identifier for the transaction.
      examples:
        transactionTokenExample:
          value: 84bc53a1-bf91-502b-97d9-f75888f8b2ab
          summary: A sample transaction token
    beginTime:
      in: query
      name: begin
      description: Date string in RFC 3339 format. Only entries created after the specified date will be included. UTC time zone.
      schema:
        type: string
        format: date-time
    endTime:
      in: query
      name: end
      description: Date string in RFC 3339 format. Only entries created before the specified date will be included. UTC time zone.
      schema:
        type: string
        format: date-time
    page:
      in: query
      name: page
      description: Page (for pagination).
      schema:
        type: integer
        default: 1
    pageSize:
      in: query
      name: page_size
      description: Page size (for pagination).
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 100
    startingAfter:
      in: query
      name: starting_after
      required: false
      description: The unique identifier of the last item in the previous page. Used to retrieve the next page.
      schema:
        type: string
    endingBefore:
      in: query
      name: ending_before
      required: false
      description: The unique identifier of the first item in the previous page. Used to retrieve the previous page.
      schema:
        type: string

  responses:
    BadRequest:
      description: A parameter in the query given in the request does not match the valid queries for the endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: There was a processing error on the server-side.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: |
        Client has exceeded the number of allowed requests in a given time period.

        |   |   |
        |---|---|
        | Rate limited, too many requests per second | User has exceeded their per second rate limit |
        | Rate limited, reached daily limit | User has exceeded their daily rate limit |
        | Rate limited, too many keys tried | One IP has queried too many different API keys |
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: |
        |   |   |
        |---|---|
        | User has not been authenticated | Invalid or missing API key |
        | API key is not active | The API key used is no longer active |
        | Could not find API key | The API key provided is not associated with any user |
        | Please provide API key in Authorization header | The Authorization header is not in the request |
        | Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |
        | Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |
        | Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SimulateAuthorizationFailure:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  token:
                    type: string
                    format: uuid
                    example: 'b68ba424-ab69-4cbc-a946-30d90181b621'
                    description: A unique token to reference this transaction.

    UnprocessableEntity:
      description: Unprocessable entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    AccountConfiguration:
      type: object
      properties:
        spend_limit:
          type: object
          description: >
            Spend limit information for the user containing the daily, monthly, and
            lifetime spend limit of the account. Any charges to a card owned by
            this account will be declined once their transaction volume has surpassed
            the value in the applicable time limit (rolling). A lifetime limit of
            0 indicates that the lifetime limit feature is disabled.
          properties:
            daily:
              type: integer
              description: Daily spend limit (in cents).
              example: 10000
              minimum: 0
            monthly:
              type: integer
              description: Monthly spend limit (in cents).
              example: 40000
              minimum: 0
            lifetime:
              type: integer
              description: Total spend limit over account lifetime (in cents).
              example: 100000
              minimum: 0
          required:
            - daily
            - monthly
            - lifetime
        state:
          type: string
          enum:
            - ACTIVE
            - PAUSED
            - CLOSED
          description: |
            Account state:
              * `ACTIVE` - Account is able to transact and create new cards.
              * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.
              * `CLOSED` - Account will permanently not be able to transact or create new cards.
        token:
          type: string
          format: uuid
          description: >
            Globally unique identifier for the account.
            This is the same as the account_token returned by the enroll endpoint.
            If using this parameter, do not include pagination.
          example: 'b68b7424-aa69-4cbc-a946-30d90181b621'
        auth_rule_tokens:
          type: array
          items:
            type: string
          description: |
            List of identifiers for the Auth Rule(s) that are applied on the account.
          example: ['b68b7424-aa69-4cbc-a946-30d90181b621']
        verification_address:
          type: object
          properties:
            address1:
              type: string
              description: Valid deliverable address (no PO boxes).
              example: 124 Old Forest Way
            address2:
              type: string
              description: Unit or apartment number (if applicable).
              example: Apt 21
            city:
              type: string
              description: City name.
              example: Seattle
            state:
              type: string
              description: Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.
              example: WA
            postal_code:
              type: string
              description: Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.
              example: 98109
            country:
              type: string
              description: Country name. Only USA is currently supported.
              example: USA
          required:
            - address1
            - city
            - state
            - postal_code
            - country
        account_holder:
          type: object
          properties:
            token:
              type: string
              description: Globally unique identifier for the account holder.
              example: 95e5f1b7-cfd5-4520-aa3c-2451bab8608d
            phone_number:
              type: string
              description: Phone number of the individual.
              example: +12124007676
            email:
              type: string
              description: Email address.
              example: jack@lithic.com
            business_account_token:
              type: string
              description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.
              example: e87db14a-4abf-4901-adad-5d5c9f46aff2
          required:
            - token
            - phone_number
            - email
            - business_account_token
      required:
        - token
        - spend_limit
        - state

    AccountHolderDocument:
      type: object
      description: Describes the document and the required document image uploads required to re-run KYC.
      properties:
        account_holder_token:
          type: string
          format: uuid
          description: Globally unique identifier for the account holder.
        document_type:
          type: string
          description: Type of documentation to be submitted for verification.
          enum:
            - commercial_license
            - drivers_license
            - passport
            - passport_card
            - visa
        required_document_uploads:
          type: array
          items:
            type: object
            description: Represents a single image of the document to upload.
            properties:
              image_type:
                type: string
                description: Type of image to upload.
                enum:
                  - back
                  - front
              status:
                type: string
                description: Status of document image upload.
                enum:
                  - COMPLETED
                  - FAILED
                  - PENDING
                  - UPLOADED
              status_reasons:
                type: array
                items:
                  type: string
                  description: Reasons for document image upload status.
                  enum:
                    - BACK_IMAGE_BLURRY
                    - FILE_SIZE_TOO_LARGE
                    - FRONT_IMAGE_BLURRY
                    - FRONT_IMAGE_GLARE
                    - INVALID_FILE_TYPE
                    - UNKNOWN_ERROR
              upload_url:
                type: string
                description: |
                  URL to upload document image to.

                  Note that the upload URLs expire after 7 days. If an upload URL expires, you can
                  refresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the document.
      example:
        account_holder_token: aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149
        document_type: drivers_license
        required_document_uploads:
          - image_type: front
            status: PENDING
            status_reasons: []
            upload_url: 'https://lithic-document-verification-uploads.com'
          - image_type: back
            status: UPLOADED
            status_reasons: []
            upload_url: null
        token: 12345678-3630-4cd0-bbec-1a0fa5c7e149

    AccountHolder:
      type: object
      properties:
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the account holder.
        account_token:
          type: string
          format: uuid
          description: Globally unique identifier for the account.
        business_account_token:
          type: string
          format: uuid
          description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
        status:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - PENDING_RESUBMIT
            - PENDING_DOCUMENT
          description: |
            KYC and KYB evaluation states.

            Note: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.
        status_reasons:
          type: array
          description: Reason for the evaluation status.
          items:
            type: string
            enum:
              - ADDRESS_VERIFICATION_FAILURE
              - AGE_THRESHOLD_FAILURE
              - COMPLETE_VERIFICATION_FAILURE
              - DOB_VERIFICATION_FAILURE
              - ID_VERIFICATION_FAILURE
              - MAX_DOCUMENT_ATTEMPTS
              - MAX_RESUBMISSION_ATTEMPTS
              - NAME_VERIFICATION_FAILURE
              - OTHER_VERIFICATION_FAILURE
              - RISK_THRESHOLD_FAILURE
              - WATCHLIST_ALERT_FAILURE

    AggregateBalance:
      type: object
      description: Aggregate Balance across all end-user accounts
      required:
        - financial_account_type
        - currency
        - available_amount
        - pending_amount
        - total_amount
        - created
        - updated
        - last_transaction_token
        - last_transaction_event_token
        - last_financial_account_token
      properties:
        financial_account_type:
          type: string
          description: Type of financial account
          enum: *financialAccountTypes
        currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
        available_amount:
          type: integer
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
        pending_amount:
          type: integer
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)
        total_amount:
          type: integer
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)
        created:
          type: string
          format: date-time
          description: Date and time for when the balance was first created.
        updated:
          type: string
          format: date-time
          description: Date and time for when the balance was last updated.
        last_transaction_token:
          type: string
          format: uuid
          description: Globally unique identifier for the last transaction that impacted this balance
        last_transaction_event_token:
          type: string
          format: uuid
          description: Globally unique identifier for the last transaction event that impacted this balance
        last_financial_account_token:
          type: string
          format: uuid
          description: Globally unique identifier for the financial account that had its balance updated most recently

    Balance:
      type: object
      description: Balance of a Financial Account
      required:
        - available_amount
        - created
        - currency
        - last_transaction_event_token
        - last_transaction_token
        - pending_amount
        - token
        - total_amount
        - type
        - updated
      properties:
        available_amount:
          type: integer
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
        created:
          type: string
          format: date-time
          description: Date and time for when the balance was first created.
        currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
        last_transaction_event_token:
          type: string
          format: uuid
          description: Globally unique identifier for the last financial transaction event that impacted this balance.
        last_transaction_token:
          type: string
          format: uuid
          description: Globally unique identifier for the last financial transaction that impacted this balance.
        pending_amount:
          type: integer
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the financial account that holds this balance.
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        total_amount:
          type: integer
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).
        type:
          type: string
          description: Type of financial account.
          enum: *financialAccountTypes
        updated:
          type: string
          format: date-time
          description: Date and time for when the balance was last updated.

    CardholderAuthentication:
      type: object
      nullable: true
      properties:
        3ds_version:
          type: string
          nullable: true
          description: |
            3-D Secure Protocol version. Possible values:
            * `1`: 3-D Secure Protocol version 1.x applied to the transaction.
            * `2`: 3-D Secure Protocol version 2.x applied to the transaction.
            * `null`: 3-D Secure was not used for the transaction
        acquirer_exemption:
          type: string
          enum:
            - 'AUTHENTICATION_OUTAGE_EXCEPTION'
            - 'LOW_VALUE'
            - 'MERCHANT_INITIATED_TRANSACTION'
            - 'NONE'
            - 'RECURRING_PAYMENT'
            - 'SECURE_CORPORATE_PAYMENT'
            - 'STRONG_CUSTOMER_AUTHENTICATION_DELEGATION'
            - 'TRANSACTION_RISK_ANALYSIS'
          description: |
            Exemption applied by the ACS to authenticate the transaction without requesting a challenge. Possible values:
            * `AUTHENTICATION_OUTAGE_EXCEPTION`: Authentication Outage Exception exemption.
            * `LOW_VALUE`: Low Value Payment exemption.
            * `MERCHANT_INITIATED_TRANSACTION`: Merchant Initiated Transaction (3RI).
            * `NONE`: No exemption applied.
            * `RECURRING_PAYMENT`: Recurring Payment exemption.
            * `SECURE_CORPORATE_PAYMENT`: Secure Corporate Payment exemption.
            * `STRONG_CUSTOMER_AUTHENTICATION_DELEGATION`: Strong Customer Authentication Delegation exemption.
            * `TRANSACTION_RISK_ANALYSIS`: Acquirer Low-Fraud and Transaction Risk Analysis exemption.

            Maps to the 3-D Secure `transChallengeExemption` field.
        liability_shift:
          type: string
          enum:
            - '3DS_AUTHENTICATED'
            - 'ACQUIRER_EXEMPTION'
            - 'NONE'
            - 'TOKEN_AUTHENTICATED'
          description: |
            Indicates whether chargeback liability shift applies to the transaction. Possible values:
            * `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.
            * `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.
            * `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.
            * `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.
        verification_attempted:
          type: string
          enum:
            - 'APP_LOGIN'
            - 'BIOMETRIC'
            - 'NONE'
            - 'OTHER'
            - 'OTP'
          description: |
            Verification attempted values:
            * `APP_LOGIN`: Out-of-band login verification was attempted by the ACS.
            * `BIOMETRIC`: Out-of-band biometric verification was attempted by the ACS.
            * `NONE`: No cardholder verification was attempted by the Access Control Server (e.g. frictionless 3-D Secure flow, no 3-D Secure, or stand-in Risk Based Analysis).
            * `OTHER`: Other method was used by the ACS to verify the cardholder (e.g. Mastercard Identity Check Express, recurring transactions, etc.)
            * `OTP`: One-time password verification was attempted by the ACS.
        verification_result:
          type: string
          enum:
            - 'CANCELLED'
            - 'FAILED'
            - 'FRICTIONLESS'
            - 'NOT_ATTEMPTED'
            - 'REJECTED'
            - 'SUCCESS'
          description: |
            This field partially maps to the `transStatus` field in the [EMVCo 3-D Secure specification](https://www.emvco.com/emv-technologies/3d-secure/) and Mastercard SPA2 AAV leading indicators.

            Verification result values:
            * `CANCELLED`: Authentication/Account verification could not be performed, `transStatus = U`.
            * `FAILED`: Transaction was not authenticated. `transStatus = N`, note: the utilization of exemptions could also result in `transStatus = N`, inspect the `acquirer_exemption` field for more information.
            * `FRICTIONLESS`: Attempts processing performed, the transaction was not authenticated, but a proof of attempted authentication/verification is provided. `transStatus = A` and the leading AAV indicator was one of {`kE`, `kF`, `kQ`}.
            * `NOT_ATTEMPTED`: A 3-D Secure flow was not applied to this transaction. Leading AAV indicator was one of {`kN`, `kX`} or no AAV was provided for the transaction.
            * `REJECTED`: Authentication/Account Verification rejected; `transStatus = R`. Issuer is rejecting authentication/verification and requests that authorization not be attempted.
            * `SUCCESS`: Authentication verification successful. `transStatus = Y` and leading AAV indicator for the transaction was one of {`kA`, `kB`, `kC`, `kD`, `kO`, `kP`, `kR`, `kS`}.

            Note that the following `transStatus` values are not represented by this field:
            * `C`: Challenge Required
            * `D`: Challenge Required; decoupled authentication confirmed
            * `I`: Informational only
            * `S`: Challenge using Secure Payment Confirmation (SPC)
      required:
        - 3ds_version
        - acquirer_exemption
        - liability_shift
        - verification_attempted
        - verification_result

    Dispute:
      type: object
      description: Dispute.
      required:
        - amount
        - arbitration_date
        - created
        - customer_filed_date
        - customer_note
        - network_claim_ids
        - network_filed_date
        - network_reason_code
        - prearbitration_date
        - primary_claim_id
        - reason
        - representment_date
        - resolution_amount
        - resolution_date
        - resolution_note
        - resolution_reason
        - status
        - token
        - transaction_token
      properties:
        amount:
          type: integer
          description: Amount under dispute. May be different from the original transaction amount.
        arbitration_date:
          type: string
          format: date-time
          description: Date dispute entered arbitration.
        created:
          type: string
          format: date-time
          description: Timestamp of when first Dispute was reported.
        customer_filed_date:
          type: string
          format: date-time
          description: Date that the dispute was filed by the customer making the dispute.
        customer_note:
          type: string
          description: End customer description of the reason for the dispute.
          maxLength: 10000
        network_claim_ids:
          type: array
          items:
            type: string
          description: Unique identifiers for the dispute from the network.
        primary_claim_id:
          type: string
          description: Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network
        network_filed_date:
          type: string
          format: date-time
          description: Date that the dispute was submitted to the network.
        network_reason_code:
          type: string
          description: Network reason code used to file the dispute.
        prearbitration_date:
          type: string
          format: date-time
          description: Date dispute entered pre-arbitration.
        reason:
          type: string
          enum: &disputeReasonTypes
            - ATM_CASH_MISDISPENSE
            - CANCELLED
            - DUPLICATED
            - FRAUD_CARD_NOT_PRESENT
            - FRAUD_CARD_PRESENT
            - FRAUD_OTHER
            - GOODS_SERVICES_NOT_AS_DESCRIBED
            - GOODS_SERVICES_NOT_RECEIVED
            - INCORRECT_AMOUNT
            - MISSING_AUTH
            - OTHER
            - PROCESSING_ERROR
            - REFUND_NOT_PROCESSED
            - RECURRING_TRANSACTION_NOT_CANCELLED
          description: |
            Dispute reason:
            * `ATM_CASH_MISDISPENSE`: ATM cash misdispense.
            * `CANCELLED`: Transaction was cancelled by the customer.
            * `DUPLICATED`: The transaction was a duplicate.
            * `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.
            * `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.
            * `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.
            * `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.
            * `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.
            * `INCORRECT_AMOUNT`: The transaction amount was incorrect.
            * `MISSING_AUTH`: The transaction was missing authorization.
            * `OTHER`: Other reason.
            * `PROCESSING_ERROR`: Processing error.
            * `REFUND_NOT_PROCESSED`: The refund was not processed.
            * `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.
        representment_date:
          type: string
          format: date-time
          description: Date the representment was received.
        resolution_amount:
          type: integer
          description: Resolution amount net of network fees.
        resolution_date:
          type: string
          format: date-time
          description: Date that the dispute was resolved.
        resolution_note:
          type: string
          description: Note by Dispute team on the case resolution.
          maxLength: 10000
        resolution_reason:
          type: string
          enum: &disputeResolutionReasonTypes
            - CASE_LOST
            - NETWORK_REJECTED
            - NO_DISPUTE_RIGHTS_3DS
            - NO_DISPUTE_RIGHTS_BELOW_THRESHOLD
            - NO_DISPUTE_RIGHTS_CONTACTLESS
            - NO_DISPUTE_RIGHTS_HYBRID
            - NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS
            - NO_DISPUTE_RIGHTS_OTHER
            - PAST_FILING_DATE
            - PREARBITRATION_REJECTED
            - PROCESSOR_REJECTED_OTHER
            - REFUNDED
            - REFUNDED_AFTER_CHARGEBACK
            - WITHDRAWN
            - WON_ARBITRATION
            - WON_FIRST_CHARGEBACK
            - WON_PREARBITRATION
          description: |
            Reason for the dispute resolution:
            * `CASE_LOST`: This case was lost at final arbitration.
            * `NETWORK_REJECTED`: Network rejected.
            * `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.
            * `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.
            * `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.
            * `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.
            * `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.
            * `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.
            * `PAST_FILING_DATE`: Past filing date.
            * `PREARBITRATION_REJECTED`: Prearbitration rejected.
            * `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.
            * `REFUNDED`: Refunded.
            * `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.
            * `WITHDRAWN`: Withdrawn.
            * `WON_ARBITRATION`: Won arbitration.
            * `WON_FIRST_CHARGEBACK`: Won first chargeback.
            * `WON_PREARBITRATION`: Won prearbitration.
        status:
          type: string
          enum: &disputeStatusTypes
            - NEW
            - PENDING_CUSTOMER
            - SUBMITTED
            - REPRESENTMENT
            - PREARBITRATION
            - ARBITRATION
            - CASE_WON
            - CASE_CLOSED
          description: |
            Status types:
            * `NEW` - New dispute case is opened.
            * `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.
            * `SUBMITTED` - Dispute is submitted to the card network.
            * `REPRESENTMENT` - Case has entered second presentment.
            * `PREARBITRATION` - Case has entered prearbitration.
            * `ARBITRATION` - Case has entered arbitration.
            * `CASE_WON` - Case was won and credit will be issued.
            * `CASE_CLOSED` - Case was lost or withdrawn.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        transaction_token:
          type: string
          format: uuid
          description: The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.

    DisputeEvidence:
      type: object
      description: Dispute evidence.
      required:
        - created
        - dispute_token
        - token
        - upload_status
      properties:
        created:
          type: string
          format: date-time
          description: Timestamp of when first Dispute was reported.
        dispute_token:
          type: string
          format: uuid
          description: Dispute token evidence is attached to.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        upload_status:
          type: string
          enum: &disputeUploadStatusTypes
            - DELETED
            - ERROR
            - PENDING
            - REJECTED
            - UPLOADED
          description: |
            Upload status types:
            * `DELETED` - Evidence was deleted.
            * `ERROR` - Evidence upload failed.
            * `PENDING` - Evidence is pending upload.
            * `REJECTED` - Evidence was rejected.
            * `UPLOADED` - Evidence was uploaded.
        upload_url:
          type: string
          description: URL to upload evidence. Only shown when `upload_status` is `PENDING`.

    Kyc:
      type: object
      properties:
        individual:
          description: Information on individual for whom the account is being opened and KYC is being run.
          $ref: '#/components/schemas/Individual'
        kyc_passed_timestamp:
          type: string
          description: |
            An RFC 3339 timestamp indicating when precomputed KYC was completed on the individual with a pass result.

            This field is required only if workflow type is `KYC_BYO`.
        tos_timestamp:
          type: string
          description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
        workflow:
          type: string
          description: Specifies the type of KYC workflow to run.
          enum:
            - KYC_ADVANCED
            - KYC_BASIC
            - KYC_BYO
      required:
        - individual
        - tos_timestamp
        - workflow

    Kyb:
      type: object
      properties:
        business_entity:
          description: Information for business for which the account is being opened and KYB is being run.
          $ref: '#/components/schemas/BusinessEntity'
        beneficial_owner_entities:
          type: array
          description: >
            List of all entities with >25% ownership in the company. If no entity or
            individual owns >25% of the company, and the largest shareholder is an entity,
            please identify them in this field. See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background. If no business owner is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_individuals` must be populated.
            on entities that should be included.
          minItems: 0
          items:
            $ref: '#/components/schemas/BusinessEntity'
        beneficial_owner_individuals:
          type: array
          description: |
            List of all individuals with >25% ownership in the company. If no entity or individual owns >25% of the company,
            and the largest shareholder is an individual, please identify them in this field.
            See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background on individuals that should be included. If no individual is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_entities` must be populated.
          minItems: 0
          items:
            $ref: '#/components/schemas/Individual'
        control_person:
          description: |
            An individual with significant responsibility for managing the legal entity (e.g., a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer,
            Managing Member, General Partner, President, Vice President, or Treasurer). This can be an executive, or someone who will have program-wide access
            to the cards that Lithic will provide. In some cases, this individual could also be a beneficial owner listed above.
            See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section II) for more background.
          $ref: '#/components/schemas/Individual'
        kyb_passed_timestamp:
          type: string
          description: |
            An RFC 3339 timestamp indicating when precomputed KYC was completed on the business with a pass result.

            This field is required only if workflow type is `KYB_BYO`.
          example: '2022-03-08 08:00:00'
        nature_of_business:
          type: string
          description: Short description of the company's line of business (i.e., what does the company do?).
          example: Software company selling solutions to the restaurant industry
        tos_timestamp:
          type: string
          description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
          example: '2022-03-08 08:00:00'
        website_url:
          type: string
          description: Company website URL.
          example: www.mybusiness.com
        workflow:
          type: string
          description: Specifies the type of KYB workflow to run.
          enum:
            - KYB_BASIC
            - KYB_BYO
      required:
        - business_entity
        - beneficial_owner_entities
        - beneficial_owner_individuals
        - control_person
        - nature_of_business
        - tos_timestamp
        - website_url
        - workflow

    KycExempt:
      type: object
      properties:
        workflow:
          type: string
          description: Specifies the workflow type. This must be 'KYC_EXEMPT'
          enum:
            - KYC_EXEMPT
        kyc_exemption_type:
          type: string
          description: Specifies the type of KYC Exempt user
          enum:
            - AUTHORIZED_USER
            - PREPAID_CARD_USER
        first_name:
          type: string
          description: The KYC Exempt user's first name
        last_name:
          type: string
          description: The KYC Exempt user's last name
        email:
          type: string
          description: The KYC Exempt user's email
        phone_number:
          type: string
          description: The KYC Exempt user's phone number
        business_account_token:
          type: string
          description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
        address:
          description: >
            KYC Exempt user's current address - PO boxes, UPS drops, and FedEx drops are not acceptable;
            APO/FPO are acceptable. Only USA addresses are currently supported.
          $ref: '#/components/schemas/Address'
      required:
        - workflow
        - kyc_exemption_type
        - first_name
        - last_name
        - email
        - phone_number

    Address:
      type: object
      properties:
        address1:
          type: string
          description: Valid deliverable address (no PO boxes).
          example: '123 Old Forest Way'
        address2:
          type: string
          description: Unit or apartment number (if applicable).
        city:
          type: string
          description: Name of city.
          example: Omaha
        country:
          type: string
          description: >
            Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3
            three-character format.
          example: USA
        postal_code:
          type: string
          description: >
            Valid postal code. Only USA ZIP codes are currently
            supported, entered as a five-digit ZIP or nine-digit ZIP+4.
          example: '68022'
        state:
          type: string
          description: >
            Valid state code. Only USA state codes are currently supported,
            entered in uppercase ISO 3166-2 two-character format.
          example: NE
      required:
        - address1
        - city
        - country
        - postal_code
        - state

    Individual:
      type: object
      properties:
        address:
          description: >
            Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable;
            APO/FPO are acceptable. Only USA addresses are currently supported.
          $ref: '#/components/schemas/Address'
        dob:
          type: string
          description: Individual's date of birth, as an RFC 3339 date.
          example: '1991-03-08 08:00:00'
        email:
          type: string
          description: >
            Individual's email address.

            If utilizing Lithic for chargeback processing, this customer
            email address may be used to communicate dispute status and resolution.
          example: 'tom@middle-earth.com'
        first_name:
          type: string
          description: Individual's first name, as it appears on government-issued identity documents.
          example: Tom
        government_id:
          type: string
          description: >
            Government-issued identification number (required for identity verification and compliance with banking regulations).
            Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported,
            entered as full nine-digits, with or without hyphens
          example: '111-23-1412'
        last_name:
          type: string
          description: Individual's last name, as it appears on government-issued identity documents.
          example: Bombadil
        phone_number:
          type: string
          description: >
            Individual's phone number, entered in E.164 format.
          example: '+12124007676'
      required:
        - address
        - dob
        - email
        - first_name
        - government_id
        - last_name
        - phone_number

    BusinessEntity:
      type: object
      properties:
        address:
          description: >
            Business's physical address - PO boxes, UPS drops, and FedEx drops
            are not acceptable; APO/FPO are acceptable.
          $ref: '#/components/schemas/Address'
        dba_business_name:
          type: string
          description: Any name that the business operates under that is not its legal business name (if applicable).
        government_id:
          type: string
          description: >
            Government-issued identification number. US Federal Employer Identification Numbers
            (EIN) are currently supported, entered as full nine-digits, with or without hyphens.
          example: '114-123-1513'
        legal_business_name:
          type: string
          description: Legal (formal) business name.
          example: Acme, Inc.
        parent_company:
          type: string
          description: Parent company name (if applicable).
        phone_numbers:
          type: array
          description: One or more of the business's phone number(s), entered as a list in E.164 format.
          minItems: 1
          items:
            type: string
            description: Business phone number, entered in E.164 format.
            example: '+12124007676'
      required:
        - address
        - government_id
        - legal_business_name
        - phone_numbers

    ASAClientResponse:
      type: object
      description: |
        ## Response Time
        The request timeout is configurable per request, with a default of 5 seconds. Response before the timeout does not guarantee that the authorization will succeed.

        ## AVS Matching
        AVS response is optional. If AVS is present and a response is not received, Lithic will return AVS validated. If AVS attributes aren’t included in the authorization, any AVS response result will be ignored.

        ## Returned Balances
        BALANCE_INQUIRY ASA messages require a settled and available amount to be returned. If no balance is returned, Lithic will return $0 for both attributes.
      required:
        - result
        - token
        - type
      properties:
        result:
          type: string
          enum:
            - ACCOUNT_INACTIVE
            - AVS_INVALID
            - CARD_CLOSED
            - CARD_PAUSED
            - INSUFFICIENT_FUNDS
            - MALFORMED_RESPONSE
            - VELOCITY_EXCEEDED
            - UNAUTHORIZED_MERCHANT
          description: |
            ASA response result. `APPROVED` to accept the authorization. Any other response will decline the authorization.

            |   |   |   |
            |---|---|---|
            | **Decline reason** | **Description** |
            | CARD_CLOSED | Card is permanently closed. Using `CARD_CLOSED` will result in subsequent authorizations being declined on the ASA client's behalf |
            | CARD_PAUSED | Card is not yet activated, or in a paused state |
            | ACCOUNT_INACTIVE | Same as `CARD_PAUSED`, will be deprecated in future versions |
            | AVS_INVALID | Prevent acquirers from approving the transaction despite incorrect AVS. Note: AVS response is not required for this decline type |
            | VELOCITY_EXCEEDED | Transaction exceeds issuer-set velocity limits. Acquirers may retry the transaction at a later date |
            | UNAUTHORIZED_MERCHANT | Can be used for restricted MCCs, countries, or transaction types (e.g. money transfer transactions) |
            | INSUFFICIENT_FUNDS | User has insufficient funds. Acquirers may retry the transaction at a later time |
            | MALFORMED_RESPONSE | The response to Lithic's Auth Stream Access (ASA) request was malformed. |
        avs_result:
          type: string
          enum:
            - FAIL
            - MATCH
            - MATCH_ADDRESS_ONLY
            - MATCH_ZIP_ONLY
          description: AVS response result.
        balance:
          type: object
          description: Available amount and settled amount values. These values can be used by merchants for authorization decisions as well as balance display at POS/ATM.
          properties:
            amount:
              type: integer
              description: Settled amount (in cents).
              example: 100
            available:
              type: integer
              description: Available amount (in cents).
              example: 200
        token:
          type: string
          format: uuid
          description: The transaction token from the ASA request.

    AuthRule:
      allOf:
        - $ref: '#/components/schemas/AuthRuleResponseOnly'
        - $ref: '#/components/schemas/AuthRuleRequest'

    AuthRuleResponseOnly:
      type: object
      properties:
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        state:
          enum:
            - ACTIVE
            - INACTIVE
          type: string
          description: Indicates whether the Auth Rule is ACTIVE or INACTIVE
        previous_auth_rule_tokens:
          type: array
          items:
            type: string
          description: Identifier for the Auth Rule(s) that a new Auth Rule replaced; will be returned only if an Auth Rule is applied to entities that previously already had one applied.
          example: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']

    AuthRuleRequest:
      type: object
      properties:
        allowed_mcc:
          type: array
          items:
            type: string
          description: Merchant category codes for which the Auth Rule permits transactions.
          example: ['3000']
        blocked_mcc:
          type: array
          items:
            type: string
          description: Merchant category codes for which the Auth Rule automatically declines transactions.
          example: ['5811', '5812']
        allowed_countries:
          type: array
          items:
            type: string
          description: >
            Countries in which the Auth Rule permits transactions.
            Note that Lithic maintains a list of countries in which all transactions are blocked; "allowing" those countries in an Auth Rule does not override the Lithic-wide restrictions.
          example: ['MEX']
        blocked_countries:
          type: array
          items:
            type: string
          description: Countries in which the Auth Rule automatically declines transactions.
          example: ['USA', 'CAN']
        avs_type:
          enum:
            - ZIP_ONLY
          type: string
          description: |
            Address verification to confirm that postal code entered at point of transaction (if applicable) matches the postal code on file for a given card. Since this check is performed against the address submitted via the Enroll Consumer endpoint, it should only be used in cases where card users are enrolled with their own accounts. Available values:
            * `ZIP_ONLY` - AVS check is performed to confirm ZIP code entered at point of transaction (if applicable) matches address on file.
        account_tokens:
          type: array
          items:
            type: string
          description: Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.
          example: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']
        card_tokens:
          type: array
          items:
            type: string
          description: Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.
          example: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']
        program_level:
          type: boolean
          description: Boolean indicating whether the Auth Rule is applied at the program level.
          example: False

    Card:
      type: object
      required:
        - created
        - funding
        - last_four
        - spend_limit
        - spend_limit_duration
        - state
        - token
        - type
      properties:
        created:
          type: string
          format: date-time
          description: An RFC 3339 timestamp for when the card was created. UTC time zone.
          example: '2021-06-28T22:53:15Z'
        cvv:
          type: string
          minLength: 3
          maxLength: 3
          description: Three digit cvv printed on the back of the card.
          example: '776'
          x-lithic-tag: Enterprise
        funding:
          $ref: '#/components/schemas/FundingAccount'
        exp_month:
          type: string
          description: Two digit (MM) expiry month.
          minLength: 2
          maxLength: 2
          example: '06'
          x-lithic-tag: Enterprise
        exp_year:
          type: string
          description: Four digit (yyyy) expiry year.
          minLength: 4
          maxLength: 4
          example: '2027'
          x-lithic-tag: Enterprise
        hostname:
          type: string
          description: Hostname of card’s locked merchant (will be empty if not applicable).
        last_four:
          type: string
          description: Last four digits of the card number.
          minLength: 4
          maxLength: 4
        memo:
          type: string
          description: Friendly name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.
          example: New Card
        pan:
          type: string
          description: >
            Primary Account Number (PAN) (i.e. the card number).
            Customers must be PCI compliant to have PAN returned as a
            field in production. Please contact
            [support@lithic.com](mailto:support@lithic.com)
            for questions.
          minLength: 16
          maxLength: 16
          example: '4111111289144142'
          x-lithic-tag: Enterprise
        spend_limit:
          type: integer
          description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.
          example: 1000
        spend_limit_duration:
          type: string
          enum:
            - ANNUALLY
            - FOREVER
            - MONTHLY
            - TRANSACTION
          description: |
            Spend limit duration values:
            * `ANNUALLY` - Card will authorize transactions up to spend limit in a calendar year.
            * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
            * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. Month is calculated as this calendar date one month prior.
            * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
        state:
          type: string
          enum:
            - CLOSED
            - OPEN
            - PAUSED
            - PENDING_ACTIVATION
            - PENDING_FULFILLMENT
          description: |
            Card state values:
            * `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.
            * `OPEN` - Card will approve authorizations (if they match card and account parameters).
            * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
            * `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for "Card Present" purchases where the physical card itself is present.
            * `PENDING_ACTIVATION` - Each business day at 2pm Eastern Time Zone (ET), cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.

            In sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.
        auth_rule_tokens:
          type: array
          items:
            type: string
          description: |
            List of identifiers for the Auth Rule(s) that are applied on the card.
          example: ['b68b7424-aa69-4cbc-a946-30d90181b621']
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
          example: '7ef7d65c-9023-4da3-b113-3b8583fd7951'
        type:
          type: string
          enum:
            - VIRTUAL
            - PHYSICAL
            - MERCHANT_LOCKED
            - SINGLE_USE
          description: |
            Card types:
            * `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).
            * `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
            * `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.
            * `SINGLE_USE` - *[Deprecated]* Card is closed upon first successful authorization.
        digital_card_art_token:
          type: string
          format: uuid
          description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
          example: '00000000-0000-0000-1000-000000000000'

    EmbedRequest:
      type: object
      properties:
        css:
          type: string
          description: A publicly available URI, so the white-labeled card element can be styled with the client's branding.
        expiration:
          type: string
          format: date-time
          description: |
            An RFC 3339 timestamp for when the request should expire. UTC time zone.

            If no timezone is specified, UTC will be used. If payload does not contain an expiration, the request will never expire.

            Using an `expiration` reduces the risk of a [replay attack](https://en.wikipedia.org/wiki/Replay_attack). Without supplying the `expiration`, in the event that a malicious user gets a copy of your request in transit, they will be able to obtain the response data indefinitely.
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the card to be displayed.
        target_origin:
          type: string
          description: |
            Required if you want to post the element clicked to the parent iframe.

            If you supply this param, you can also capture click events in the parent iframe by adding an event listener.
      required:
        - token

    Error:
      type: object
      properties:
        message:
          type: string
          description: Explanation of error response.
        debugging_request_id:
          type: string
          format: uuid
          description: Identifier to help debug an error.
      required:
        - message
        - debugging_request_id

    Event:
      type: object
      description: A single event that affects the transaction state and lifecycle.
      required:
        - token
        - event_type
        - payload
        - created
      properties:
        token:
          type: string
          description: Globally unique identifier.
          example: 'msg_1srOrx2ZWZBpBUvZwXKQmoEYga1'
        event_type:
          type: string
          enum: *eventTypes
          description: |
            Event types:
            * `dispute.updated` - A dispute has been updated.
            * `digital_wallet.tokenization_approval_request` - Card network's request to Lithic to activate a digital wallet token.
        payload:
          type: object
        created:
          type: string
          format: date-time
          description: |
            An RFC 3339 timestamp for when the event was created. UTC time zone.

            If no timezone is specified, UTC will be used.

    EventSubscription:
      type: object
      description: A subscription to specific event types.
      required:
        - description
        - disabled
        - event_types
        - url
        - token
      properties:
        description:
          type: string
          description: A description of the subscription.
        disabled:
          type: boolean
          description: Whether the subscription is disabled.
        event_types:
          type: array
          items:
            type: string
            enum: *eventTypes
        url:
          type: string
          format: uri
        token:
          type: string
          description: Globally unique identifier.
          example: 'ep_1srOrx2ZWZBpBUvZwXKQmoEYga1'

    TransactionEvent:
      type: object
      description: A single card transaction may include multiple events that affect the transaction state and lifecycle.
      required:
        - amount
        - created
        - result
        - token
        - type
      properties:
        amount:
          type: integer
          description: Amount of the transaction event (in cents), including any acquirer fees.
          example: 2795
        created:
          type: string
          format: date-time
          description: RFC 3339 date and time this event entered the system. UTC time zone.
          example: '2018-05-29 21:16:05'
        result:
          type: string
          enum: &eventResultTypes
            - ACCOUNT_STATE_TRANSACTION
            - APPROVED
            - BANK_CONNECTION_ERROR
            - BANK_NOT_VERIFIED
            - CARD_CLOSED
            - CARD_PAUSED
            - FRAUD_ADVICE
            - GLOBAL_TRANSACTION_LIMIT
            - GLOBAL_WEEKLY_LIMIT
            - GLOBAL_MONTHLY_LIMIT
            - INACTIVE_ACCOUNT
            - INCORRECT_PIN
            - INVALID_CARD_DETAILS
            - INSUFFICIENT_FUNDS
            - MERCHANT_BLACKLIST
            - SINGLE_USE_RECHARGED
            - SWITCH_INOPERATIVE_ADVICE
            - UNAUTHORIZED_MERCHANT
            - UNKNOWN_HOST_TIMEOUT
            - USER_TRANSACTION_LIMIT
          description: |
            `APPROVED` or decline reason.

            Result types:
            * `ACCOUNT_STATE_TRANSACTION_FAIL` - Contact [support@lithic.com](mailto:support@lithic.com).
            * `APPROVED` - Transaction is approved.
            * `BANK_CONNECTION_ERROR` - Please reconnect a funding source.
            * `BANK_NOT_VERIFIED` - Please confirm the funding source.
            * `CARD_CLOSED` - Card state was closed at the time of authorization.
            * `CARD_PAUSED` - Card state was paused at the time of authorization.
            * `FRAUD_ADVICE` - Transaction declined due to risk.
            * `GLOBAL_TRANSACTION_LIMIT` - Platform spend limit exceeded, contact [support@lithic.com](mailto:support@lithic.com).
            * `GLOBAL_WEEKLY_LIMIT` - Platform spend limit exceeded, contact [support@lithic.com](mailto:support@lithic.com).
            * `GLOBAL_MONTHLY_LIMIT` - Platform spend limit exceeded, contact [support@lithic.com](mailto:support@lithic.com).
            * `INACTIVE_ACCOUNT` - Account is inactive. Contact [support@lithic.com](mailto:support@lithic.com).
            * `INCORRECT_PIN` - PIN verification failed.
            * `INVALID_CARD_DETAILS` - Incorrect CVV or expiry date.
            * `INSUFFICIENT_FUNDS` - Please ensure the funding source is connected and up to date.
            * `MERCHANT_BLACKLIST` - This merchant is disallowed on the platform.
            * `SINGLE_USE_RECHARGED` - Single use card attempted multiple times.
            * `SWITCH_INOPERATIVE_ADVICE` - Network error, re-attempt the transaction.
            * `UNAUTHORIZED_MERCHANT` - Merchant locked card attempted at different merchant.
            * `UNKNOWN_HOST_TIMEOUT` - Network error, re-attempt the transaction.
            * `USER_TRANSACTION_LIMIT` - User-set spend limit exceeded.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        type:
          type: string
          enum:
            - AUTHORIZATION
            - AUTHORIZATION_ADVICE
            - AUTHORIZATION_EXPIRY
            - AUTHORIZATION_REVERSAL
            - BALANCE_INQUIRY
            - CLEARING
            - CORRECTION_DEBIT
            - CORRECTION_CREDIT
            - CREDIT_AUTHORIZATION
            - CREDIT_AUTHORIZATION_ADVICE
            - FINANCIAL_AUTHORIZATION
            - FINANCIAL_CREDIT_AUTHORIZATION
            - RETURN
            - RETURN_REVERSAL
            - VOID
          description: |
            Event types:
            * `AUTHORIZATION` - Authorize a transaction.
            * `AUTHORIZATION_ADVICE` - Advice on a transaction.
            * `AUTHORIZATION_EXPIRY` - Authorization has expired and reversed by Lithic.
            * `AUTHORIZATION_REVERSAL` - Authorization was reversed by the merchant.
            * `BALANCE_INQUIRY` - A balance inquiry (typically a $0 authorization) has occurred on a card.
            * `CLEARING` - Transaction is settled.
            * `CORRECTION_DEBIT` - Manual transaction correction (Debit).
            * `CORRECTION_CREDIT` - Manual transaction correction (Credit).
            * `CREDIT_AUTHORIZATION` - A refund or credit authorization from a merchant.
            * `CREDIT_AUTHORIZATION_ADVICE` - A credit authorization was approved on your behalf by the network.
            * `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit funds without additional clearing.
            * `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit funds without additional clearing.
            * `RETURN` - A refund has been processed on the transaction.
            * `RETURN_REVERSAL` - A refund has been reversed (e.g., when a merchant reverses an incorrect refund).

    FinancialAccount:
      type: object
      description: Financial Account
      required:
        - created
        - token
        - type
        - updated
      properties:
        account_number:
          type: string
          description: Account number for your Lithic-assigned bank account number, if applicable.
        created:
          type: string
          format: date-time
          description: Date and time for when the financial account was first created.
        routing_number:
          type: string
          description: Routing number for your Lithic-assigned bank account number, if applicable.
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the financial account.
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        type:
          type: string
          description: Type of financial account
          enum: *financialAccountTypes
        updated:
          type: string
          format: date-time
          description: Date and time for when the financial account was last updated.

    FinancialEvent:
      type: object
      properties:
        amount:
          type: integer
          description: Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).
        created:
          type: string
          format: date-time
          description: Date and time when the financial event occurred. UTC time zone.
        result:
          type: string
          enum:
            - APPROVED
            - DECLINED
          description: APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        type:
          type: string
          enum:
            - ACH_INSUFFICIENT_FUNDS
            - ACH_ORIGINATION_PENDING
            - ACH_ORIGINATION_RELEASED
            - ACH_RECEIPT_PENDING
            - ACH_RECEIPT_RELEASED
            - ACH_RETURN
            - AUTHORIZATION
            - AUTHORIZATION_ADVICE
            - AUTHORIZATION_EXPIRY
            - AUTHORIZATION_REVERSAL
            - BALANCE_INQUIRY
            - CLEARING
            - CORRECTION_DEBIT
            - CORRECTION_CREDIT
            - CREDIT_AUTHORIZATION
            - CREDIT_AUTHORIZATION_ADVICE
            - FINANCIAL_AUTHORIZATION
            - FINANCIAL_CREDIT_AUTHORIZATION
            - RETURN
            - RETURN_REVERSAL
            - TRANSFER
            - TRANSFER_INSUFFICIENT_FUNDS
          description: |
            Event types:
            * `ACH_INSUFFICIENT_FUNDS` - Attempted ACH origination declined due to insufficient balance.
            * `ACH_ORIGINATION_PENDING` - ACH origination pending release from an ACH hold.
            * `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.
            * `ACH_RECEIPT_PENDING` - ACH receipt pending release from an ACH holder.
            * `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.
            * `ACH_RETURN` - ACH origination returned by the Receiving Depository Financial Institution.
            * `AUTHORIZATION` - Authorize a card transaction.
            * `AUTHORIZATION_ADVICE` - Advice on a card transaction.
            * `AUTHORIZATION_EXPIRY` - Card Authorization has expired and reversed by Lithic.
            * `AUTHORIZATION_REVERSAL` - Card Authorization was reversed by the merchant.
            * `BALANCE_INQUIRY` - A card balance inquiry (typically a $0 authorization) has occurred on a card.
            * `CLEARING` - Card Transaction is settled.
            * `CORRECTION_DEBIT` - Manual card transaction correction (Debit).
            * `CORRECTION_CREDIT` - Manual card transaction correction (Credit).
            * `CREDIT_AUTHORIZATION` - A refund or credit card authorization from a merchant.
            * `CREDIT_AUTHORIZATION_ADVICE` - A credit card authorization was approved on your behalf by the network.
            * `FINANCIAL_AUTHORIZATION` -  A request from a merchant to debit card funds without additional clearing.
            * `FINANCIAL_CREDIT_AUTHORIZATION` - A request from a merchant to refund or credit card funds without additional clearing.
            * `RETURN` - A card refund has been processed on the transaction.
            * `RETURN_REVERSAL` - A card refund has been reversed (e.g., when a merchant reverses an incorrect refund).
            * `TRANSFER` - Successful internal transfer of funds between financial accounts.
            * `TRANSFER_INSUFFICIENT_FUNDS` - Declined internl transfer of funds due to insufficient balance of the sender.

    FinancialTransaction:
      type: object
      properties:
        category:
          type: string
          enum:
            - CARD
            - ACH
            - TRANSFER
          description: |
            Status types:
            * `CARD` - Issuing card transaction.
            * `ACH` - Transaction over ACH.
            * `TRANSFER` - Internal transfer of funds between financial accounts in your program.
        created:
          type: string
          format: date-time
          description: Date and time when the financial transaction first occurred. UTC time zone.
        currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction.
        descriptor:
          type: string
          description: A string that provides a description of the financial transaction; may be useful to display to users.
        events:
          type: array
          items:
            $ref: '#/components/schemas/FinancialEvent'
          description: A list of all financial events that have modified this financial transaction.
        pending_amount:
          type: integer
          description: |
            Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.
            The value of this field will go to zero over time once the financial transaction is settled.
        result:
          type: string
          enum:
            - APPROVED
            - DECLINED
          description: APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.
        settled_amount:
          type: integer
          description: Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.
        status:
          type: string
          enum:
            - DECLINED
            - EXPIRED
            - PENDING
            - SETTLED
            - VOIDED
          description: |
            Status types:
            * `DECLINED` - The card transaction was declined.
            * `EXPIRED` - Lithic reversed the card authorization as it has passed its expiration time.
            * `PENDING` - Authorization is pending completion from the merchant or pending release from ACH hold period
            * `SETTLED` - The financial transaction is completed.
            * `VOIDED` - The merchant has voided the previously pending card authorization.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.
        updated:
          type: string
          format: date-time
          description: Date and time when the financial transaction was last updated. UTC time zone.

    FundingAccount:
      type: object
      required:
        - created
        - last_four
        - state
        - token
        - type
      properties:
        account_name:
          type: string
          description: Account name identifying the funding source. This may be `null`.
        created:
          type: string
          format: date-time
          description: An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.
        last_four:
          type: string
          description: The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.
          minLength: 4
          maxLength: 4
        nickname:
          type: string
          description: The nickname given to the `FundingAccount` or `null` if it has no nickname.
          minLength: 1
          maxLength: 255
        state:
          type: string
          enum:
            - ENABLED
            - PENDING
            - DELETED
          description: |
            State of funding source.

            Funding source states:
            * `ENABLED` - The funding account is available to use for card creation and transactions.
            * `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.
            * `DELETED` - The founding account has been deleted.
        token:
          type: string
          format: uuid
          description: A globally unique identifier for this FundingAccount.
        type:
          type: string
          enum:
            - DEPOSITORY_CHECKING
            - DEPOSITORY_SAVINGS
          description: |
            Types of funding source:
            * `DEPOSITORY_CHECKING` - Bank checking account.
            * `DEPOSITORY_SAVINGS` - Bank savings account.

    Merchant:
      type: object
      properties:
        acceptor_id:
          type: string
          description: Unique identifier to identify the payment card acceptor.
          example: '72600003'
        city:
          type: string
          description: City of card acceptor.
          example: 'NEW YORK'
          minLength: 1
          maxLength: 255
        country:
          type: string
          minLength: 3
          maxLength: 3
          description: Uppercase country of card acceptor (see ISO 8583 specs).
          example: USA
        descriptor:
          type: string
          description: Short description of card acceptor.
          minLength: 1
          maxLength: 25
          example: 'COFFEE SHOP'
        mcc:
          type: string
          description: >
            Merchant category code (MCC). A four-digit number listed in ISO 18245.
            An MCC is used to classify a business by the types
            of goods or services it provides.
          minLength: 4
          maxLength: 4
          example: '5812'
        state:
          type: string
          description: 'Geographic state of card acceptor (see ISO 8583 specs).'
          minLength: 2
          maxLength: 2
          example: NY

    PointOfSale:
      type: object
      properties:
        terminal:
          type: object
          properties:
            attended:
              type: boolean
              description: True if a clerk is present at the sale.
            card_retention_capable:
              type: boolean
              description: Card retention capable.
            on_premise:
              type: boolean
              description: True if the sale was made at the place of business (vs. mobile).
            operator:
              type: string
              enum:
                - ADMINISTRATIVE
                - CARDHOLDER
                - CARD_ACCEPTOR
              description: The person that is designed to swipe the card.
            partial_approval_capable:
              type: boolean
              description: >
                True if the terminal is capable of partial approval.
                Partial approval is when part of a transaction is approved and another
                payment must be used for the remainder.
                Example scenario: A $40 transaction is attempted on a
                prepaid card with $25 balance. If partial approval is enabled,
                $25 can be authorized, at which point the POS will prompt
                the user for additional payment of $15.
            pin_capability:
              type: string
              enum:
                - CAPABLE
                - INOPERATIVE
                - NOT_CAPABLE
                - UNSPECIFIED
              description: Status of whether the POS is able to accept PINs.
            type:
              type: string
              enum:
                - ATM
                - AUTHORIZATION
                - COUPON_MACHINE
                - DIAL_TERMINAL
                - ECOMMERCE
                - ECR
                - FUEL_MACHINE
                - HOME_TERMINAL
                - MICR
                - OFF_PREMISE
                - PAYMENT
                - PDA
                - PHONE
                - POS_TERMINAL
                - POINT
                - SELF_SERVICE
                - TELEVISION
                - TELLER
                - TRAVELERS_CHECK_MACHINE
                - VENDING
                - VOICE
              description: Point of Sales (POS) type.
        entry_mode:
          type: object
          properties:
            card:
              type: string
              enum:
                - NOT_PRESENT
                - PREAUTHORIZED
                - PRESENT
              description: Card status.
            cardholder:
              type: string
              enum:
                - DEFERRED_BILLING
                - INSTALLMENT
                - MAIL_ORDER
                - NOT_PRESENT
                - PREAUTHORIZED
                - PRESENT
                - REOCCURRING
                - TELEPHONE_ORDER
              description: Cardholder status.
            pan:
              type: string
              enum:
                - AUTO_ENTRY
                - BAR_CODE
                - CONTACTLESS
                - ECOMMERCE
                - ERROR_KEYED
                - ERROR_MAGNETIC_STRIPE
                - ICC
                - KEY_ENTERED
                - MAGNETIC_STRIPE
                - MANUAL
                - OCR
                - SECURE_CARDLESS
                - UNSPECIFIED
              description: Method of entry for the PAN.
            pin_entered:
              type: boolean
              description: True if the PIN was entered.

    ShippingAddress:
      type: object
      required:
        - address1
        - city
        - country
        - first_name
        - last_name
        - state
        - postal_code
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 26
          description: Customer's first name. This will be the first name printed on the physical card.
          example: Michael
        last_name:
          type: string
          minLength: 1
          maxLength: 26
          description: Customer's surname (family name). This will be the last name printed on the physical card.
          example: Bluth
        line2_text:
          type: string
          minLength: 0
          maxLength: 26
          description: Text to be printed on line two of the physical card. Use of this field requires additional permissions.
          example: The Bluth Company
        address1:
          type: string
          minLength: 1
          maxLength: 40
          description: Valid USPS routable address.
          example: 5 Broad Street
        address2:
          type: string
          minLength: 1
          maxLength: 40
          description: Unit number (if applicable).
          example: Unit 25A
        city:
          type: string
          description: City
          minLength: 1
          maxLength: 30
          example: NEW YORK
        state:
          type: string
          description: Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.
          minLength: 0
          maxLength: 24
          example: NY
        postal_code:
          type: string
          description: Postal code (formerly zipcode). For US addresses, either five-digit zipcode or nine-digit "ZIP+4".
          minLength: 1
          maxLength: 12
          example: '10001-1809'
        country:
          type: string
          description: Uppercase ISO 3166-1 alpha-3 three character abbreviation.
          minLength: 3
          maxLength: 3
          example: 'USA'
        email:
          type: string
          description: Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.
          minLength: 5
          maxLength: 50
          example: 'johnny@appleseed.com'
        phone_number:
          type: string
          description: Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.
          minLength: 8
          maxLength: 16
          example: '+12124007676'

    Transfer:
      type: object
      properties:
        category:
          type: string
          enum:
            - TRANSFER
          description: |
            Status types:
            * `TRANSFER` - Internal transfer of funds between financial accounts in your program.
        created:
          type: string
          format: date-time
          description: Date and time when the transfer occurred. UTC time zone.
        currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction.
        descriptor:
          type: string
          description: A string that provides a description of the transfer; may be useful to display to users.
        events:
          type: array
          items:
            $ref: '#/components/schemas/FinancialEvent'
          description: A list of all financial events that have modified this trasnfer.
        pending_amount:
          type: integer
          description: |
            Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.
            The value of this field will go to zero over time once the financial transaction is settled.
        result:
          type: string
          enum:
            - APPROVED
            - DECLINED
          description: APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.
        settled_amount:
          type: integer
          description: Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents).
        status:
          type: string
          enum:
            - DECLINED
            - EXPIRED
            - PENDING
            - SETTLED
            - VOIDED
          description: |
            Status types:
            * `DECLINED` - The transfer was declined.
            * `EXPIRED` - The transfer was held in pending for too long and expired.
            * `PENDING` - The transfer is pending release from a hold.
            * `SETTLED` - The transfer is completed.
            * `VOIDED` - The transfer was reversed before it settled.
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the transfer event.
        updated:
          type: string
          format: date-time
          description: Date and time when the financial transaction was last updated. UTC time zone.
        from_balance:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: The updated balance of the sending financial account.
        to_balance:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: The updated balance of the receiving financial account.

    Transaction:
      type: object
      properties:
        acquirer_reference_number:
          type: string
          minLength: 23
          maxLength: 23
          nullable: true
          description: |
            A fixed-width 23-digit numeric identifier for the Transaction that may be set if the transaction originated from the Mastercard network. This number may be used for dispute tracking.
        amount:
          type: integer
          description: Authorization amount of the transaction (in cents), including any acquirer fees. This may change over time, and will represent the settled amount once the transaction is settled.
        authorization_amount:
          type: integer
          description: Authorization amount (in cents) of the transaction, including any acquirer fees. This amount always represents the amount authorized for the transaction, unaffected by settlement.
        cardholder_authentication:
          $ref: '#/components/schemas/CardholderAuthentication'
        merchant_amount:
          type: integer
          description: Analogous to the "amount" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.
        merchant_authorization_amount:
          type: integer
          description: Analogous to the "authorization_amount" property, but will represent the amount in the transaction's local currency (smallest unit), including any acquirer fees.
        merchant_currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the local currency of the transaction.
        authorization_code:
          type: string
          minLength: 6
          maxLength: 6
          description: A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.
        card_token:
          type: string
          format: uuid
          description: >
            Token for the card used in this transaction.
        created:
          type: string
          format: date-time
          description: Date and time when the transaction first occurred. UTC time zone.
        events:
          type: array
          items:
            $ref: '#/components/schemas/TransactionEvent'
          description: A list of all events that have modified this transaction.
        merchant:
          $ref: '#/components/schemas/Merchant'
        network:
          type: string
          description: >
            Card network of the authorization. Can be `INTERLINK`, `MAESTRO`,
            `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot
            determine the network code from the upstream provider.
          enum:
            - INTERLINK
            - MAESTRO
            - MASTERCARD
            - VISA
            - UNKNOWN
            - null
        result:
          type: string
          enum: *eventResultTypes
          description: >
            `APPROVED` or decline reason. See Event result types
        settled_amount:
          type: integer
          description: Amount of the transaction that has been settled (in cents), including any acquirer fees. This may change over time.
          example: 100
        status:
          type: string
          enum:
            - BOUNCED
            - DECLINED
            - EXPIRED
            - PENDING
            - SETTLED
            - SETTLING
            - VOIDED
          description: |
            Status types:
            * `DECLINED` - The transaction was declined.
            * `EXPIRED` - Lithic reversed the authorization as it has passed its expiration time.
            * `PENDING` - Authorization is pending completion from the merchant.
            * `SETTLED` - The transaction is complete.
            * `VOIDED` - The merchant has voided the previously pending authorization.
        token:
          type: string
          format: uuid
          description: Globally unique identifier.

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: 'Authorization'

# Apply the API key globally to all operations
security:
  - ApiKeyAuth: [] # see securitySchemes

