openapi: 3.1.0
info:
  contact:
    email: support@lithic.com
  description: |
    The Lithic Developer API is designed to provide a predictable programmatic interface for accessing your Lithic account through an API and transaction webhooks.
    Note that your API key is a secret and should be treated as such. Don't share it with anyone, including us. We will never ask you for it.
  termsOfService: https://lithic.com/legal#terms
  title: Lithic Developer API
  version: 1.0.0
servers:
  - description: Sandbox environment that provides key functionality mirroring production
    url: https://sandbox.lithic.com
security:
  - ApiKeyAuth: []
tags:
  - name: 3DS
  - name: Account
  - name: Book Transfer
  - name: Account Holder
  - name: Auth Stream Access (ASA)
  - name: Authorization Rules
  - name: Balance
  - name: Card
  - name: Credit Product
  - name: Dispute
  - name: Event
  - name: External Bank Account
  - name: External Payments
  - name: Financial Account
  - name: Management Operations
  - name: Payment
  - name: Responder Endpoints
  - name: Settlement Report
  - name: Statements
  - name: Status
  - name: Tokenization
  - name: Transaction
paths:
  /v1/account_holders:
    get:
      description: Get a list of individual or business account holders and their KYC or KYB evaluation status.
      operationId: getAccountHolders
      parameters:
        - description: If applicable, represents the external_id associated with the account_holder.
          example: 00000000-0000-0000-0000-000000000001
          in: query
          name: external_id
          schema:
            format: uuid
            type: string
        - description: The number of account_holders to limit the response to.
          example: 10
          in: query
          name: limit
          schema:
            type: integer
        - description: (Individual Account Holders only) The first name of the account holder. The query is case insensitive and supports partial matches.
          example: John
          in: query
          name: first_name
          schema:
            type: string
        - description: (Individual Account Holders only) The last name of the account holder. The query is case insensitive and supports partial matches.
          example: Appleseed
          in: query
          name: last_name
          schema:
            type: string
        - description: (Business Account Holders only) The legal business name of the account holder. The query is case insensitive and supports partial matches.
          example: Busy Business, Inc.
          in: query
          name: legal_business_name
          schema:
            type: string
        - description: Phone number of the account holder. The query must be an exact match.
          example: 5555555555
          in: query
          name: phone_number
          schema:
            type: string
        - description: Email address of the account holder. The query must be an exact match, case insensitive.
          example: example@domain.com
          in: query
          name: email
          schema:
            type: string
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          content:
            application/json:
              examples:
                getAccountHoldersResponse:
                  value:
                    data:
                      - account_token: 6b67b340-ed11-4463-a33d-0d7f7fdcd28c
                        business_account_token: 00000000-0000-0000-0000-000000000000
                        created: '2024-01-11T19:50:36.105448'
                        email: john@appleseed.com
                        exemption_type: AUTHORIZED_USER
                        external_id: '5555555555'
                        individual:
                          address:
                            address1: 123 Main Street
                            city: New York
                            country: USA
                            postal_code: '10128'
                            state: NY
                          dob: '2000-01-01'
                          email: john@appleseed.com
                          first_name: John
                          last_name: Appleseed
                          phone_number: '5555555555'
                          entity_token: 49c978db-20c4-46d8-9db4-b0ef28c03533
                        phone_number: '5555555555'
                        status: ACCEPTED
                        token: b68b7424-aa69-4cbc-a946-30d90181b621
                        user_type: INDIVIDUAL
                        verification_application:
                          created: '2024-01-11T19:58:24.821848'
                          status: ACCEPTED
                          status_reasons: []
                          updated: '2024-01-11T19:58:24.821848'
                      - account_token: 732f7328-a2d7-4281-a264-e8cb5af8d392
                        beneficial_owner_entities:
                          - address:
                              address1: 22 Street North
                              city: New York
                              country: US
                              postal_code: '10004'
                              state: NY
                            dba_business_name: Busy Business, Inc.
                            government_id: 98-7654321
                            legal_business_name: Busy Business, Inc.
                            parent_company: Example company
                            phone_numbers:
                              - '5555555555'
                            entity_token: d89185ca-1fad-4f33-905c-416b4270a5d4
                        business_account_token: 00000000-0000-0000-0000-000000000000
                        business_entity:
                          address:
                            address1: 22 Street North
                            city: New York
                            country: US
                            postal_code: '10004'
                            state: NY
                          dba_business_name: Busy Business, Inc.
                          government_id: 98-7654321
                          legal_business_name: Busy Business, Inc.
                          parent_company: Example company
                          phone_numbers:
                            - '5555555555'
                          entity_token: f360a3c0-24e6-4852-ae82-27916a5c4e86
                        control_person:
                          address:
                            address1: 451 New Forest Way
                            city: Springfield
                            country: US
                            postal_code: '68022'
                            state: IL
                          dob: '1991-03-08T08:00:00Z'
                          email: john@busybusiness.com
                          first_name: John
                          last_name: Appleseed
                          phone_number: '5555555555'
                          entity_token: 9d657ba0-7c8a-4946-a596-f99d978a4137
                        created: '2024-01-11T19:50:36.105449'
                        exemption_type: AUTHORIZED_USER
                        external_id: 851030f1-9b7b-4939-8ac9-161bd972d26f
                        token: fa68ed76-9d02-4d45-8a3f-782f3b6a8b3f
                        user_type: BUSINESS
                        verification_application:
                          created: '2024-01-11T19:50:36.105449'
                          status: PENDING_REVIEW
                          status_reasons: []
                          updated: '2024-01-11T19:50:36.105449'
                    has_more: false
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/AccountHolder'
                    type: array
                  has_more:
                    description: Whether there are more accounts to be retrieved.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get a list of individual or business account holders
      tags:
        - Account Holder
    post:
      description: |-
        Run an individual or business's information through the Customer Identification Program (CIP).
        All calls to this endpoint will return an immediate response - though in some cases, the response may indicate the enrollment is under review or further action will be needed to complete the account enrollment process.
        This endpoint can only be used on accounts that are part of the program that the calling API key manages.
      operationId: postAccountHolders
      requestBody:
        content:
          application/json:
            examples:
              kybRequest:
                summary: Create an account holder with KYB workflow
                value:
                  beneficial_owner_entities:
                    - address:
                        address1: 300 Normal Forest Way
                        city: Portland
                        country: USA
                        postal_code: '90210'
                        state: OR
                      dba_name: MHoldings
                      entity_type: LLC
                      government_id: 98-7654321
                      incorporation_country: US
                      incorporation_date: '2015-09-17'
                      incorporation_state: NV
                      legal_business_name: Majority Holdings LLC
                      phone_numbers:
                        - '+12124007676'
                  beneficial_owner_individuals:
                    - address:
                        address1: 300 Normal Forest Way
                        city: Portland
                        country: USA
                        postal_code: '90210'
                        state: OR
                      dob: '1991-03-08T08:00:00Z'
                      email: tim@left-earth.com
                      first_name: Timmy
                      government_id: 211-23-1412
                      last_name: Turner
                      phone_number: '+12024007611'
                  business_entity:
                    address:
                      address1: 123 Old Forest Way
                      city: Omaha
                      country: USA
                      postal_code: '61022'
                      state: NE
                    dba_name: Example Business Solutions
                    entity_type: Corporation
                    government_id: 12-3456789
                    incorporation_country: US
                    incorporation_date: '2010-06-28'
                    incorporation_state: DE
                    legal_business_name: Busy Business, Inc.
                    phone_numbers:
                      - '+12124007676'
                  control_person:
                    address:
                      address1: 451 New Forest Way
                      city: Springfield
                      country: USA
                      postal_code: '68022'
                      state: IL
                    birthdate: '1980-04-12'
                    dob: '1991-03-08T08:00:00Z'
                    email: tom@middle-pluto.com
                    first_name: Tom
                    government_id: 111-23-1412
                    last_name: Timothy
                    nationality: US
                    phone_number: '+12024008176'
                    title: CEO
                  kyb_passed_timestamp: '2022-03-08T08:00:00Z'
                  nature_of_business: Software company selling solutions to the restaurant industry
                  tos_timestamp: '2022-03-08T08:00:00Z'
                  website_url: https://www.mybusiness.com
                  workflow: KYB_BASIC
              kycExemptRequest:
                summary: Create an account holder with KYC Exempt workflow
                value:
                  address:
                    address1: 123 Old Forest Way
                    city: Omaha
                    country: USA
                    postal_code: '68022'
                    state: NE
                  business_account_token: e87db14a-4abf-4901-adad-5d5c9f46aff2
                  email: tom@middle-earth.com
                  first_name: Tom
                  kyc_exemption_type: AUTHORIZED_USER
                  last_name: Bombadil
                  phone_number: '+12124007676'
                  workflow: KYC_EXEMPT
              kycRequest:
                summary: Create an account holder with KYC workflow
                value:
                  individual:
                    address:
                      address1: 123 Old Forest Way
                      city: Omaha
                      country: USA
                      postal_code: '68022'
                      state: NE
                    dob: '1991-03-08 08:00:00'
                    email: tom@middle-earth.com
                    first_name: Tom
                    government_id: 111-23-1412
                    last_name: Bombadil
                    phone_number: '+12124007676'
                  tos_timestamp: '2022-03-08 08:00:00'
                  workflow: KYC_ADVANCED
            schema:
              oneOf:
                - $ref: '#/components/schemas/Kyb'
                - $ref: '#/components/schemas/Kyc'
                - $ref: '#/components/schemas/KycExempt'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                acceptedEvaluationResponse:
                  summary: Accepted KYC/KYB evaluation response
                  value:
                    account_token: b68b7424-aa69-4cbc-a946-30d90181b621
                    business_account_token: e87db14a-4abf-4901-adad-5d5c9f46aff2
                    status: ACCEPTED
                    status_reasons: []
                    token: 12345678-aa69-4cbc-a946-30d90181b621
                    created: '2024-09-16T20:13:41.865274'
                pendingResubmitResponse:
                  summary: Pending resubmit KYC evaluation response
                  value:
                    account_token: b68b7424-aa69-4cbc-a946-30d90181b621
                    status: PENDING_RESUBMIT
                    status_reasons:
                      - NAME_VERIFICATION_FAILURE
                    token: 12345678-aa69-4cbc-a946-30d90181b621
                    created: '2024-09-16T20:13:41.865274'
                pendingKYBReviewResponse:
                  summary: Pending review response for a KYB_BASIC request
                  value:
                    account_token: 6016af53-87d4-42aa-b021-0170644d6458
                    status: PENDING_REVIEW
                    status_reasons:
                      - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                    token: 12345678-aa69-4cbc-a946-30d90181b621
                    created: '2024-09-16T20:13:41.865274'
                    required_documents:
                      - entity_token: 48afea0a-38b0-44e4-aaa7-c2b5413da9d3
                        valid_documents:
                          - EIN_LETTER
                          - TAX_RETURN
                          - CERTIFICATE_OF_GOOD_STANDING
                          - ARTICLES_OF_INCORPORATION
                          - ARTICLES_OF_ORGANIZATION
                          - CERTIFICATE_OF_FORMATION
                          - BYLAWS
                          - GOVERNMENT_BUSINESS_LICENSE
                          - PARTNERSHIP_AGREEMENT
                          - BANK_STATEMENT
                          - UTILITY_BILL_STATEMENT
                        status_reasons:
                          - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
              schema:
                properties:
                  account_token:
                    description: Globally unique identifier for the account.
                    format: uuid
                    type: string
                  created:
                    description: Timestamp of when the account holder was created.
                    format: date-time
                    type: string
                  external_id:
                    description: Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.
                    format: string
                    type: string
                  status:
                    description: |
                      KYC and KYB evaluation states.

                      Note:
                      * `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `KYC_ADVANCED` workflow.
                      * `PENDING_REVIEW` is only applicable for the `KYB_BASIC` workflow.
                    enum:
                      - ACCEPTED
                      - PENDING_REVIEW
                      - PENDING_DOCUMENT
                      - PENDING_RESUBMIT
                      - REJECTED
                    type: string
                  status_reasons:
                    description: Reason for the evaluation status.
                    items:
                      $ref: '#/components/schemas/status-reasons'
                    type: array
                  required_documents:
                    description: Only present for "KYB_BASIC" and "KYC_ADVANCED" workflows. A list of documents required for the account holder to be approved.
                    type: array
                    items:
                      $ref: '#/components/schemas/required-document'
                  token:
                    description: Globally unique identifier for the account holder.
                    format: uuid
                    type: string
                required:
                  - account_token
                  - status
                  - status_reasons
                  - token
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create an individual or business account holder
      tags:
        - Account Holder
  /v1/account_holders/{account_holder_token}:
    get:
      description: Get an Individual or Business Account Holder and/or their KYC or KYB evaluation status.
      operationId: getAccountHolder
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      responses:
        '200':
          content:
            application/json:
              examples:
                kycAcceptedReview:
                  summary: Accepted KYC evaluation response
                  value:
                    token: b68b7424-aa69-4cbc-a946-30d90181b621
                    account_token: 6b67b340-ed11-4463-a33d-0d7f7fdcd28c
                    business_account_token: 5310469f-3a16-44ce-89f8-cdc4446fcfdf
                    external_id: ''
                    created: '2024-01-11T19:50:36.105449'
                    user_type: INDIVIDUAL
                    exemption_type: ''
                    verification_application:
                      created: '2024-01-11T19:50:36.105449'
                      updated: '2024-01-11T19:50:36.105449'
                      status: ACCEPTED
                      status_reasons: []
                    individual:
                      address:
                        address1: 451 New Forest Way
                        city: Springfield
                        state: IL
                        postal_code: '68022'
                        country: US
                      dob: '1991-03-08T08:00:00Z'
                      email: john@appleseed.com
                      first_name: John
                      last_name: Appleseed
                      phone_number: '5555555555'
                      entity_token: fd771a07-c5c2-42f3-a53c-a6c79c6c0d07
                    email: john@appleseed.com
                    phone_number: '5555555555'
                    status: ACCEPTED
                kybBasicPendingReview:
                  summary: Pending review submission for a KYB_BASIC account_holder
                  value:
                    token: fa68ed76-9d02-4d45-8a3f-782f3b6a8b3f
                    account_token: 732f7328-a2d7-4281-a264-e8cb5af8d392
                    business_account_token: 00000000-0000-0000-0000-000000000000
                    external_id: ''
                    created: '2024-01-11T19:50:36.105449'
                    user_type: BUSINESS
                    exemption_type: ''
                    verification_application:
                      created: '2024-01-11T19:50:36.105449'
                      updated: '2024-01-11T19:50:36.105449'
                      status: PENDING_REVIEW
                      status_reasons:
                        - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                    required_documents:
                      - entity_token: 83cf25ae-c14f-4d10-9fa2-0119f36c7286
                        status_reasons:
                          - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                        valid_documents:
                          - EIN_LETTER
                          - TAX_RETURN
                          - CERTIFICATE_OF_GOOD_STANDING
                          - ARTICLES_OF_INCORPORATION
                          - ARTICLES_OF_ORGANIZATION
                          - CERTIFICATE_OF_FORMATION
                          - BYLAWS
                          - GOVERNMENT_BUSINESS_LICENSE
                          - PARTNERSHIP_AGREEMENT
                          - BANK_STATEMENT
                          - UTILITY_BILL_STATEMENT
                    business_entity:
                      address:
                        address1: 22 Street North
                        city: New York
                        state: NY
                        postal_code: '10004'
                        country: US
                      dba_business_name: Busy Business, Inc.
                      government_id: 98-7654321
                      legal_business_name: Busy Business, Inc.
                      parent_company: Example company
                      phone_numbers:
                        - '5555555555'
                      entity_token: 05cc03c9-dea6-4d17-a11e-0f3ea57d51a5
                    control_person:
                      address:
                        address1: 451 New Forest Way
                        city: Springfield
                        state: IL
                        postal_code: '68022'
                        country: US
                      dob: '1991-03-08T08:00:00Z'
                      email: john@appleseed.com
                      first_name: John
                      last_name: Appleseed
                      phone_number: '5555555555'
                      entity_token: fd771a07-c5c2-42f3-a53c-a6c79c6c0d07
                    beneficial_owner_entities:
                      - address:
                          address1: 22 Street North
                          city: New York
                          state: NY
                          postal_code: '10004'
                          country: US
                        dba_business_name: Busy Business, Inc.
                        government_id: 98-7654321
                        legal_business_name: Busy Business, Inc.
                        parent_company: Example company
                        phone_numbers:
                          - '5555555555'
                        entity_token: 2b3cdab5-c866-408f-85bc-e707015ee409
              schema:
                $ref: '#/components/schemas/AccountHolder'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get an individual or business account holder
      tags:
        - Account Holder
    patch:
      description: Update the information associated with a particular account holder.
      operationId: patchAccountHolder
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                business_account_token:
                  description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
                  type: string
                email:
                  description: Account holder's email address. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.
                  type: string
                phone_number:
                  description: Account holder's phone number, entered in E.164 format. The primary purpose of this field is for cardholder identification and verification during the digital wallet tokenization process.
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  business_account_token:
                    description: Only applicable for customers using the KYC-Exempt workflow to enroll businesses with authorized users. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
                    type: string
                  email:
                    description: The newly updated email for the account holder
                    type: string
                  phone_number:
                    description: The newly updated phone_number for the account holder
                    type: string
                  token:
                    description: The token for the account holder that was updated
                    type: string
                type: object
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Update account holder information
      tags:
        - Account Holder
  /v1/account_holders/{account_holder_token}/documents:
    get:
      description: |
        Retrieve the status of account holder document uploads, or retrieve the upload URLs to process your image uploads.

        Note that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).

        In the event your upload URLs have expired, calling this endpoint will refresh them.
        Similarly, in the event a previous account holder document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.

        When a new document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` list
        in a `PENDING` state for the corresponding `image_type`.
      operationId: getAccountHolderDocuments
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/document'
                    type: array
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get account holder document uploads
      tags:
        - Account Holder
    post:
      description: |
        Use this endpoint to identify which type of supported government-issued documentation you will upload for further verification.
        It will return two URLs to upload your document images to - one for the front image and one for the back image.

        This endpoint is only valid for evaluations in a `PENDING_DOCUMENT` state.

        Uploaded images must either be a `jpg` or `png` file, and each must be less than 15 MiB. Once both required uploads have been successfully completed, your document will be run through KYC verification.

        If you have registered a webhook, you will receive evaluation updates for any document submission evaluations, as well as for any failed document uploads.

        Two document submission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended. Currently only one type of
        account holder document is supported per KYC verification.
      operationId: postAccountHolderDocuments
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        content:
          application/json:
            examples:
              recieveLinkForDriversLicense:
                summary: Initiate account holder document upload
                value:
                  document_type: EIN_LETTER
            schema:
              properties:
                document_type:
                  description: The type of document to upload
                  enum:
                    - EIN_LETTER
                    - TAX_RETURN
                    - OPERATING_AGREEMENT
                    - CERTIFICATE_OF_FORMATION
                    - DRIVERS_LICENSE
                    - PASSPORT
                    - PASSPORT_CARD
                    - CERTIFICATE_OF_GOOD_STANDING
                    - ARTICLES_OF_INCORPORATION
                    - ARTICLES_OF_ORGANIZATION
                    - BYLAWS
                    - GOVERNMENT_BUSINESS_LICENSE
                    - PARTNERSHIP_AGREEMENT
                    - SS4_FORM
                    - BANK_STATEMENT
                    - UTILITY_BILL_STATEMENT
                    - SSN_CARD
                    - ITIN_LETTER
                  type: string
                entity_token:
                  description: Globally unique identifier for the entity.
                  type: string
                  format: uuid
              required:
                - document_type
                - entity_token
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Initiate account holder document upload
      tags:
        - Account Holder
  /v1/account_holders/{account_holder_token}/documents/{document_token}:
    get:
      description: |
        Check the status of an account holder document upload, or retrieve the upload URLs to process your image uploads.

        Note that this is not equivalent to checking the status of the KYC evaluation overall (a document may be successfully uploaded but not be sufficient for KYC to pass).

        In the event your upload URLs have expired, calling this endpoint will refresh them.
        Similarly, in the event a document upload has failed, you can use this endpoint to get a new upload URL for the failed image upload.

        When a new account holder document upload is generated for a failed attempt, the response will show an additional entry in the `required_document_uploads` array
        in a `PENDING` state for the corresponding `image_type`.
      operationId: getAccountHolderDocumentByToken
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
        - $ref: '#/components/parameters/documentToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get account holder document upload status
      tags:
        - Account Holder
  /v1/account_holders/{account_holder_token}/resubmit:
    post:
      description: |
        Resubmit a KYC submission. This endpoint should be used in cases where a KYC submission returned a `PENDING_RESUBMIT` result,
        meaning one or more critical KYC fields may have been mis-entered and the individual's identity has not yet been successfully verified.
        This step must be completed in order to proceed with the KYC evaluation.

        Two resubmission attempts are permitted via this endpoint before a `REJECTED` status is returned and the account creation process is ended.
      operationId: postAccountHolderResubmit
      parameters:
        - $ref: '#/components/parameters/accountHolderTokenPath'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual:
                  $ref: '#/components/schemas/KycIndividual'
                  description: Information on individual for whom the account is being opened and KYC is being re-run.
                tos_timestamp:
                  description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
                  example: '2022-03-08 08:00:00'
                  type: string
                workflow:
                  default: KYC_ADVANCED
                  enum:
                    - KYC_ADVANCED
                  type: string
              required:
                - individual
                - tos_timestamp
                - workflow
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                acceptedEvaluationResponse:
                  summary: Accepted KYC evaluation response
                  value:
                    account_token: b68b7424-aa69-4cbc-a946-30d90181b621
                    status: ACCEPTED
                    status_reasons: []
                    token: 12345678-aa69-4cbc-a946-30d90181b621
                maxSubmissions:
                  summary: KYC rejected for too many resubmissions
                  value:
                    account_token: b68b7424-aa69-4cbc-a946-30d90181b621
                    status: REJECTED
                    status_reasons:
                      - MAX_RESUBMISSION_ATTEMPTS
                    token: 12345678-aa69-4cbc-a946-30d90181b621
              schema:
                $ref: '#/components/schemas/AccountHolder'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Resubmit account holder information
      tags:
        - Account Holder
  /v1/accounts:
    get:
      description: |
        List account configurations.
      operationId: getAccounts
      parameters:
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              examples:
                getAccounts:
                  summary: List accounts
                  value:
                    data:
                      - cardholder_currency: USD
                        spend_limit:
                          daily: 1000
                          lifetime: 10000
                          monthly: 4000
                        state: ACTIVE
                        token: b68b7424-aa69-4cbc-a946-30d90181b621
                    has_more: false
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/AccountConfiguration'
                    type: array
                  has_more:
                    description: Whether there are more accounts to be retrieved.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List accounts
      tags:
        - Account
  /v1/accounts/{account_token}:
    get:
      description: Get account configuration such as spend limits.
      operationId: getAccountByToken
      parameters:
        - $ref: '#/components/parameters/accountToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get account
      tags:
        - Account
    patch:
      description: |
        Update account configuration such as state or spend limits. Can only be run on accounts that are part of the program managed by this API key.
        Accounts that are in the `PAUSED` state will not be able to transact or create new cards.
      operationId: patchAccountByToken
      parameters:
        - $ref: '#/components/parameters/accountToken'
      requestBody:
        content:
          application/json:
            examples:
              setDailySpendLimit:
                summary: Update daily spend limit
                value:
                  daily_spend_limit: 1000
            schema:
              properties:
                daily_spend_limit:
                  default: 125000
                  description: |
                    Amount (in cents) for the account's daily spend limit.
                    By default the daily spend limit is set to $1,250.
                  minimum: 0
                  type: integer
                lifetime_spend_limit:
                  default: 0
                  description: |
                    Amount (in cents) for the account's lifetime spend limit. Once this limit is reached, no transactions will be accepted on any card created for this account until the limit is updated.
                    Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the account limit. This behavior differs from the daily spend limit and the monthly spend limit.
                  minimum: 0
                  type: integer
                monthly_spend_limit:
                  default: 500000
                  description: |
                    Amount (in cents) for the account's monthly spend limit.
                    By default the monthly spend limit is set to $5,000.
                  minimum: 0
                  type: integer
                state:
                  description: Account states.
                  enum:
                    - ACTIVE
                    - PAUSED
                  type: string
                verification_address:
                  description: Address used during Address Verification Service (AVS) checks during transactions if enabled via Auth Rules. This field is deprecated as AVS checks are no longer supported by Authorization Rules. The field will be removed from the schema in a future release.
                  properties:
                    address1:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    country:
                      type: string
                    postal_code:
                      type: string
                    state:
                      type: string
                  type: object
                  deprecated: true
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                exampleResponse:
                  value:
                    cardholder_currency: USD
                    spend_limit:
                      daily: 1000
                      lifetime: 100000
                      monthly: 40000
                    state: ACTIVE
                    token: ecbd1d58-0299-48b3-84da-6ed7f5bf9ec1
                    verification_address:
                      address1: 5 Broad Street
                      address2: ''
                      city: New York
                      country: USA
                      postal_code: '10001'
                      state: NY
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update account
      tags:
        - Account
  /v1/accounts/{account_token}/spend_limits:
    get:
      description: Get an Account's available spend limits, which is based on the spend limit configured on the Account and the amount already spent over the spend limit's duration. For example, if the Account has a daily spend limit of $1000 configured, and has spent $600 in the last 24 hours, the available spend limit returned would be $400.
      operationId: getAccountSpendLimits
      parameters:
        - $ref: '#/components/parameters/accountToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSpendLimits'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get account's available spend limits
      tags:
        - Account
  /v1/aggregate_balances:
    get:
      description: Get the aggregated balance across all end-user accounts by financial account type
      operationId: getAggregateBalances
      parameters:
        - description: Get the aggregate balance for a given Financial Account type.
          in: query
          name: financial_account_type
          schema:
            enum:
              - ISSUING
              - OPERATING
              - RESERVE
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/AggregateBalance'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List aggregate balances
      tags:
        - Balance
  /v2/auth_rules:
    post:
      parameters: []
      tags:
        - Authorization Rules
      summary: Create a new V2 authorization rule
      description: Creates a new V2 authorization rule in draft mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-auth-rule-request'
      responses:
        '201':
          description: Auth Rule Created
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
    get:
      servers:
        - description: Sandbox environment that provides key functionality mirroring production
          url: https://sandbox.lithic.com
      parameters:
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/startingAfter'
        - $ref: '#/components/parameters/pageSize'
        - name: card_token
          in: query
          description: Only return Authorization Rules that are bound to the provided card token.
          schema:
            type: string
            format: uuid
          required: false
        - name: account_token
          in: query
          description: Only return Authorization Rules that are bound to the provided account token.
          schema:
            type: string
            format: uuid
          required: false
      tags:
        - Authorization Rules
      summary: List V2 authorization rules
      description: Lists V2 authorization rules
      responses:
        '200':
          description: Authorization Rules
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/auth-rule'
                    type: array
                  has_more:
                    description: Indicates whether there are more Authorization Rules to be retrieved by paging through the results.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
  /v2/auth_rules/{auth_rule_token}:
    get:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Fetch a V2 authorization rule
      description: Fetches an authorization rule by its token
      responses:
        '200':
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
    patch:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Updates a V2 authorization rule
      description: Updates an authorization rule's properties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch-auth-rule-request'
      responses:
        '200':
          description: Updated Auth Rule
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
  /v2/auth_rules/{auth_rule_token}/apply:
    post:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Apply a V2 authorization rule
      description: |
        Associates an authorization rules with a card program, the provided account(s) or card(s).

        This endpoint will replace any existing associations with the provided list of entities.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apply-auth-rule-request'
      responses:
        '200':
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
  /v2/auth_rules/{auth_rule_token}/draft:
    post:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Draft a new V2 authorization rule version
      description: |
        Creates a new draft version of an authorization rules that will be ran in shadow mode.

        This can also be utilized to reset the draft parameters, causing a draft version to no longer be ran in shadow mode.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  anyOf:
                    - type: 'null'
                      description: Resets the drafts parameters, causing a draft version to no longer be ran in shadow mode.
                    - $ref: '#/components/schemas/auth-rule-parameters'
      responses:
        '200':
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
  /v2/auth_rules/{auth_rule_token}/promote:
    post:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Promote draft authorization rule
      description: Promotes a draft version of an authorization rule to the currently active version such that it is enforced in the authorization stream.
      responses:
        '200':
          $ref: '#/components/responses/AuthRule'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
  /v2/auth_rules/{auth_rule_token}/report:
    post:
      parameters:
        - $ref: '#/components/parameters/authRuleToken'
      tags:
        - Authorization Rules
      summary: Request authorization rule performance report
      description: |
        Requests a performance report of an authorization rule to be asynchronously generated. Reports can only be run on rules in draft or active mode and will included approved and declined statistics as well as examples.
        The generated report will be delivered asynchronously through a webhook with `event_type` = `auth_rules.performance_report.created`. See the docs on setting up [webhook subscriptions](https://docs.lithic.com/docs/events-api).

        Reports are generated based on data collected by Lithic's authorization processing system in the trailing week. The performance of the auth rule will be assessed on the configuration of the auth rule at the time the report is requested.
        This implies that if a performance report is requested, right after updating an auth rule, depending on the number of authorizations processed for a card program, it may be the case that no data is available for the report. Therefore Lithic recommends to decouple making updates to an Auth Rule, and requesting performance reports.

        To make this concrete, consider the following example:
        1. At time `t`, a new Auth Rule is created, and applies to all authorizations on a card program. The Auth Rule has not yet been promoted, causing the draft version of the rule to be applied in shadow mode.
        2. At time `t + 1 hour` a performance report is requested for the Auth Rule. This performance report will *only* contain data for the Auth Rule being executed in the window between `t` and `t + 1 hour`. This is because Lithic's transaction processing system will only start capturing data for the Auth Rule at the time it is created.
        3. At time `t + 2 hours` the draft version of the Auth Rule is promoted to the active version of the Auth Rule by calling the `/v2/auth_rules/{auth_rule_token}/promote` endpoint. If a performance report is requested at this moment it will still only contain data for this version of the rule, but the window of available data will now span from `t` to `t + 2 hours`.
        4. At time `t + 3 hours` a new version of the rule is drafted by calling the `/v2/auth_rules/{auth_rule_token}/draft` endpoint. If a performance report is requested right at this moment, it will only contain data for authorizations to which both the active version and the draft version is applied. Lithic does this to ensure that performance reports represent a fair comparison between rules. Because there may be no authorizations in this window, and because there may be some lag before data is available in a performance report, the requested performance report could contain no to little data.
        5. At time `t + 4 hours` another performance report is requested: this time the performance report will contain data from the window between `t + 3 hours` and `t + 4 hours`, for any authorizations to which both the current version of the authorization rule (in enforcing mode) and the draft version of the authorization rule (in shadow mode) applied.

        Note that generating a report may take up to 15 minutes and that delivery is not guaranteed. Customers are required to have created an event subscription to receive the webhook.
        Additionally, there is a delay of approximately 15 minutes between when Lithic's transaction processing systems have processed the transaction, and when a transaction will be included in the report.
      responses:
        '200':
          description: Report generation request received
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_token:
                    $ref: '#/components/schemas/report-token'
        '400':
          $ref: '#/components/responses/responses-BadRequest'
        '404':
          $ref: '#/components/responses/responses-NotFound'
        '422':
          description: Returned when the request was syntactically correct, but could not be processed
  /v1/auth_stream/secret:
    get:
      description: |
        Retrieve the ASA HMAC secret key. If one does not exist for your program yet, calling this endpoint will create one for you. The headers (which you can use to verify webhooks) will begin appearing shortly after calling this endpoint for the first time. See [this page](https://docs.lithic.com/docs/auth-stream-access-asa#asa-webhook-verification) for more detail about verifying ASA webhooks.
      operationId: getAuthStreamSecret
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  secret:
                    description: The shared HMAC ASA secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
                    type: string
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retrieve the ASA HMAC secret key
      tags:
        - Auth Stream Access (ASA)
  /v1/auth_stream/secret/rotate:
    post:
      description: |
        Generate a new ASA HMAC secret key. The old ASA HMAC secret key will be deactivated 24 hours after a successful request to this endpoint. Make a [`GET /auth_stream/secret`](https://docs.lithic.com/reference/getauthstreamsecret) request to retrieve the new secret key.
      operationId: rotateAuthStreamSecret
      responses:
        '204':
          description: We have successfully rotated the secret key.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Rotate the ASA HMAC secret key
      tags:
        - Auth Stream Access (ASA)
  /v1/balances:
    get:
      description: Get the balances for a program, business, or a given end-user account
      operationId: getBalances
      parameters:
        - description: List balances for all financial accounts of a given account_token.
          in: query
          name: account_token
          schema:
            format: uuid
            type: string
        - description: List balances for all financial accounts of a given business_account_token.
          in: query
          name: business_account_token
          schema:
            format: uuid
            type: string
        - description: UTC date and time of the balances to retrieve. Defaults to latest available balances
          in: query
          name: balance_date
          schema:
            format: date-time
            type: string
        - description: List balances for a given Financial Account type.
          in: query
          name: financial_account_type
          schema:
            enum:
              - ISSUING
              - OPERATING
              - RESERVE
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Balance'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List balances
      tags:
        - Balance
  /v1/card_programs:
    get:
      description: List card programs.
      operationId: getCardPrograms
      parameters:
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CardProgram'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List card programs
      tags:
        - Card
  /v1/card_programs/{card_program_token}:
    get:
      description: Get card program.
      operationId: getCardProgram
      parameters:
        - $ref: '#/components/parameters/cardProgramTokenPath'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardProgram'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card program
      tags:
        - Card
  /v1/cards:
    get:
      description: List cards.
      operationId: getCards
      parameters:
        - description: |
            Returns cards associated with the specified account.
          in: query
          name: account_token
          schema:
            format: uuid
            type: string
        - description: |
            Returns cards with the specified state.
          in: query
          name: state
          schema:
            enum:
              - CLOSED
              - OPEN
              - PAUSED
              - PENDING_ACTIVATION
              - PENDING_FULFILLMENT
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Card'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List cards
      tags:
        - Card
    post:
      description: |
        Create a new virtual or physical card. Parameters `pin`, `shipping_address`, and `product_id` only apply to physical cards.
      operationId: postCards
      requestBody:
        content:
          application/json:
            examples:
              createCard:
                summary: Create card
                value:
                  memo: New Card
                  spend_limit: 1000
                  spend_limit_duration: TRANSACTION
                  state: OPEN
                  type: VIRTUAL
              createPhysicalCard:
                summary: Create a physical card
                value:
                  carrier:
                    qr_code_url: https://lithic.com/activate-card/1
                  memo: New physical card
                  product_id: '783991122'
                  shipping_address:
                    address1: '123'
                    city: NEW YORK
                    country: USA
                    first_name: Johnny
                    last_name: Appleseed
                    postal_code: '10001'
                    state: NY
                  state: OPEN
                  type: PHYSICAL
            schema:
              properties:
                account_token:
                  description: |
                    Globally unique identifier for the account that the card will be associated with. Required for programs enrolling users using the [/account\_holders endpoint](https://docs.lithic.com/docs/account-holders-kyc). See [Managing Your Program](doc:managing-your-program) for more information.
                  format: uuid
                  type: string
                card_program_token:
                  description: For card programs with more than one BIN range. This must be configured with Lithic before use. Identifies the card program/BIN range under which to create the card. If omitted, will utilize the program's default `card_program_token`. In Sandbox, use 00000000-0000-0000-1000-000000000000 and 00000000-0000-0000-2000-000000000000 to test creating cards on specific card programs.
                  example: 00000000-0000-0000-1000-000000000000
                  format: uuid
                  type: string
                carrier:
                  $ref: '#/components/schemas/Carrier'
                digital_card_art_token:
                  description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
                  example: 00000000-0000-0000-1000-000000000000
                  format: uuid
                  type: string
                exp_month:
                  description: Two digit (MM) expiry month. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.
                  example: '06'
                  maxLength: 2
                  minLength: 2
                  type: string
                exp_year:
                  description: Four digit (yyyy) expiry year. If neither `exp_month` nor `exp_year` is provided, an expiration date will be generated.
                  example: '2027'
                  maxLength: 4
                  minLength: 4
                  type: string
                memo:
                  description: Friendly name to identify the card.
                  example: New Card
                  type: string
                pin:
                  description: Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block).
                  type: string
                product_id:
                  description: Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.
                  example: '1'
                  type: string
                replacement_for:
                  description: Only applicable to cards of type `PHYSICAL`. Globally unique identifier for the card that this physical card will replace.
                  example: 00000000-0000-0000-1000-000000000000
                  format: uuid
                  type: string
                replacement_account_token:
                  description: Restricted field limited to select use cases. Lithic will reach out directly if this field should be used. Globally unique identifier for the replacement card's account. If this field is specified, `replacement_for` must also be specified. If `replacement_for` is specified and this field is omitted, the replacement card's account will be inferred from the card being replaced.
                  example: 00000000-0000-0000-2000-000000000000
                  format: uuid
                  type: string
                shipping_address:
                  $ref: '#/components/schemas/ShippingAddress'
                shipping_method:
                  description: |
                    Shipping method for the card. Only applies to cards of type PHYSICAL. Use of options besides `STANDARD` require additional permissions.
                    * `STANDARD` - USPS regular mail or similar international option, with no tracking
                    * `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking
                    * `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking
                    * `EXPRESS` - FedEx Express, 3-day shipping, with tracking
                    * `2_DAY` - FedEx 2-day shipping, with tracking
                    * `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking
                  enum:
                    - 2_DAY
                    - EXPEDITED
                    - EXPRESS
                    - PRIORITY
                    - STANDARD
                    - STANDARD_WITH_TRACKING
                  type: string
                spend_limit:
                  description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.
                  example: 0
                  minimum: 0
                  type: integer
                spend_limit_duration:
                  description: |-
                    Spend limit duration values:
                    * `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.
                    * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
                    * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.
                    * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
                  enum:
                    - ANNUALLY
                    - FOREVER
                    - MONTHLY
                    - TRANSACTION
                  type: string
                state:
                  description: |
                    Card state values:
                    * `OPEN` - Card will approve authorizations (if they match card and account parameters).
                    * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
                  enum:
                    - OPEN
                    - PAUSED
                  type: string
                type:
                  default: VIRTUAL
                  description: |
                    Card types:
                    * `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).
                    * `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
                    * `SINGLE_USE` - Card is closed upon first successful authorization.
                    * `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.
                  enum:
                    - MERCHANT_LOCKED
                    - PHYSICAL
                    - SINGLE_USE
                    - VIRTUAL
                  type: string
              required:
                - type
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: f3f4918c-dee9-464d-a819-4aa42901d624
                card_program_token: 5e9483eb-8103-4e16-9794-2106111b2eca
                cardholder_currency: USD
                created: '2021-06-28T22:53:15Z'
                cvv: '776'
                exp_month: '06'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08T17:57:36Z'
                  last_four: '5263'
                  nickname: checking account
                  state: ENABLED
                  token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4142'
                memo: New Card
                pan: '4111111289144142'
                spend_limit: 1000
                spend_limit_duration: TRANSACTION
                state: OPEN
                token: 7ef7d65c-9023-4da3-b113-3b8583fd7951
                type: VIRTUAL
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create card
      tags:
        - Card
  /v1/cards/aggregate_balances:
    get:
      description: Get the aggregated card balance across all end-user accounts.
      operationId: getCardAggregateBalances
      parameters:
        - description: Cardholder to retrieve aggregate balances for.
          in: query
          name: account_token
          schema:
            type: string
        - description: Business to retrieve aggregate balances for.
          in: query
          name: business_account_token
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CardAggregateBalance'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List card aggregate balances
      tags:
        - Card
  /v1/cards/search_by_pan:
    post:
      description: |-
        Get card configuration such as spend limit and state. Customers must be PCI compliant to use this endpoint. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.
        *Note: this is a `POST` endpoint because it is more secure to send sensitive data in a request body than in a URL.*
      operationId: searchCardByPan
      requestBody:
        content:
          application/json:
            examples:
              searchCardByPan:
                summary: Search for card for by PAN.
                value:
                  pan: '4111111289144142'
            schema:
              properties:
                pan:
                  description: The PAN for the card being retrieved.
                  example: '4111111289144142'
                  type: string
              required:
                - pan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Search for card by PAN
      tags:
        - Card
  /v1/cards/{card_token}:
    get:
      description: Get card configuration such as spend limit and state.
      operationId: getCardByToken
      parameters:
        - $ref: '#/components/parameters/cardToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card
      tags:
        - Card
    patch:
      description: |
        Update the specified properties of the card. Unsupplied properties will remain unchanged. `pin` parameter only applies to physical cards.

        *Note: setting a card to a `CLOSED` state is a final action that cannot be undone.*
      operationId: patchCardByToken
      parameters:
        - $ref: '#/components/parameters/cardToken'
      requestBody:
        content:
          application/json:
            examples:
              updateCard:
                summary: Update card
                value:
                  memo: Updated Name
                  spend_limit: 100
                  spend_limit_duration: FOREVER
                  state: OPEN
            schema:
              properties:
                digital_card_art_token:
                  description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
                  example: 00000000-0000-0000-1000-000000000000
                  format: uuid
                  type: string
                memo:
                  description: Friendly name to identify the card.
                  example: New Card
                  type: string
                pin:
                  description: Encrypted PIN block (in base64). Only applies to cards of type `PHYSICAL` and `VIRTUAL`. Changing PIN also resets PIN status to `OK`. See [Encrypted PIN Block](https://docs.lithic.com/docs/cards#encrypted-pin-block).
                  type: string
                pin_status:
                  description: Indicates if a card is blocked due a PIN status issue (e.g. excessive incorrect attempts). Can only be set to `OK` to unblock a card.
                  enum:
                    - OK
                  type: string
                spend_limit:
                  description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined. Note that a spend limit of 0 is effectively no limit, and should only be used to reset or remove a prior limit. Only a limit of 1 or above will result in declined transactions due to checks against the card limit.
                  example: 0
                  type: integer
                spend_limit_duration:
                  description: |-
                    Spend limit duration values:
                    * `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.
                    * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
                    * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.
                    * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
                  enum:
                    - ANNUALLY
                    - FOREVER
                    - MONTHLY
                    - TRANSACTION
                  type: string
                state:
                  description: |
                    Card state values:
                    * `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.
                    * `OPEN` - Card will approve authorizations (if they match card and account parameters).
                    * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
                  enum:
                    - CLOSED
                    - OPEN
                    - PAUSED
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: f3f4918c-dee9-464d-a819-4aa42901d624
                card_program_token: 5e9483eb-8103-4e16-9794-2106111b2eca
                cardholder_currency: USD
                created: '2021-06-28T22:53:15Z'
                cvv: '742'
                exp_month: '05'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08 17:57:36'
                  last_four: '5263'
                  nickname: checking account
                  state: ENABLED
                  token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4938'
                memo: Updated Name
                pan: '4111111289144142'
                spend_limit: 100
                spend_limit_duration: FOREVER
                state: OPEN
                token: f5f905f5-8a8e-49bf-a9b4-c0adaa401456
                type: VIRTUAL
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update card
      tags:
        - Card
  /v1/cards/{card_token}/balances:
    get:
      description: Get the balances for a given card.
      operationId: getCardBalance
      parameters:
        - description: UTC date of the balance to retrieve. Defaults to latest available balance
          in: query
          name: balance_date
          schema:
            format: date-time
            type: string
        - description: |
            Balance after a given financial event occured.
            For example, passing the event_token of a $5 CARD_CLEARING financial event will return a balance decreased by $5
          in: query
          name: last_transaction_event_token
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/cardToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/FinancialAccountBalance'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card balances
      tags:
        - Card
  /v1/cards/{card_token}/financial_transactions:
    get:
      description: List the financial transactions for a given card.
      operationId: getCardFinancialTransactions
      parameters:
        - description: Financial Transaction category to be returned.
          in: query
          name: category
          schema:
            enum:
              - CARD
              - TRANSFER
            type: string
        - description: Financial Transaction result to be returned.
          in: query
          name: result
          schema:
            enum:
              - APPROVED
              - DECLINED
            type: string
        - description: Financial Transaction status to be returned.
          in: query
          name: status
          schema:
            enum:
              - DECLINED
              - EXPIRED
              - PENDING
              - RETURNED
              - SETTLED
              - VOIDED
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/cardToken'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/FinancialTransaction'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List card financial transactions
      tags:
        - Card
  /v1/cards/{card_token}/financial_transactions/{financial_transaction_token}:
    get:
      description: Get the card financial transaction for the provided token.
      operationId: getCardFinancialTransactionByToken
      parameters:
        - $ref: '#/components/parameters/cardToken'
        - $ref: '#/components/parameters/financialTransactionToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialTransaction'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card financial transaction
      tags:
        - Card
  /v1/cards/{card_token}/provision:
    post:
      description: |
        Allow your cardholders to directly add payment cards to the device's digital wallet (e.g. Apple Pay) with one touch from your app.

        This requires some additional setup and configuration. Please [Contact Us](https://lithic.com/contact) or your Customer Success representative for more information.
      operationId: postCardProvision
      parameters:
        - $ref: '#/components/parameters/cardTokenDigitalWallet'
      requestBody:
        content:
          application/json:
            examples:
              provisionGoogleCard:
                summary: Provision a card in Google Pay
                value:
                  digital_wallet: GOOGLE_PAY
            schema:
              properties:
                certificate:
                  description: Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Apple's public leaf certificate. Base64 encoded in PEM format with headers `(-----BEGIN CERTIFICATE-----)` and trailers omitted. Provided by the device's wallet.
                  format: byte
                  type: string
                client_wallet_account_id:
                  description: Only applicable if `digital_wallet` is `GOOGLE_PAY` or `SAMSUNG_PAY` and the card is on the Visa network. Consumer ID that identifies the wallet account holder entity.
                  type: string
                client_device_id:
                  description: Only applicable if `digital_wallet` is `GOOGLE_PAY` or `SAMSUNG_PAY` and the card is on the Visa network. Stable device identification set by the wallet provider.
                  type: string
                digital_wallet:
                  description: Name of digital wallet provider.
                  enum:
                    - APPLE_PAY
                    - GOOGLE_PAY
                    - SAMSUNG_PAY
                  type: string
                nonce:
                  description: Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Base64 cryptographic nonce provided by the device's wallet.
                  format: byte
                  type: string
                nonce_signature:
                  description: Only applicable if `digital_wallet` is `APPLE_PAY`. Omit to receive only `activationData` in the response. Base64 cryptographic nonce provided by the device's wallet.
                  format: byte
                  type: string
              type: object
        description: Update request.
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                provisioning_payload: eyJjYXJ......
              schema:
                properties:
                  provisioning_payload:
                    type: string
                type: object
          description: |
            Returns `provisioning_payload`, a cryptographic payload representing a payment card that can be passed to a device's digital wallet. Each digital wallet has a different API; consult the wallet's documentation for more info.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Provision card (Digital Wallet)
      tags:
        - Card
  /v1/cards/{card_token}/reissue:
    post:
      description: |
        Initiate print and shipment of a duplicate physical card.

        Only applies to cards of type `PHYSICAL`.
      operationId: postCardReissue
      parameters:
        - $ref: '#/components/parameters/cardToken'
      requestBody:
        content:
          application/json:
            examples:
              reissueCardNewAddress:
                summary: Reissue card with a new address
                value:
                  carrier:
                    qr_code_url: https://lithic.com/activate-card/1
                  product_id: '100'
                  shipping_address:
                    address1: 5 Broad Street
                    address2: Unit 5A
                    city: NEW YORK
                    country: USA
                    first_name: Janet
                    last_name: Yellen
                    postal_code: '10001'
                    state: NY
                  shipping_method: STANDARD
            schema:
              properties:
                carrier:
                  $ref: '#/components/schemas/Carrier'
                  description: If omitted, the previous carrier will be used.
                product_id:
                  description: |
                    Specifies the configuration (e.g. physical card art) that the card should be manufactured with, and only applies to cards of type `PHYSICAL`. This must be configured with Lithic before use.
                  type: string
                shipping_address:
                  $ref: '#/components/schemas/ShippingAddress'
                  description: If omitted, the previous shipping address will be used.
                shipping_method:
                  description: |
                    Shipping method for the card. Use of options besides `STANDARD` require additional permissions.
                    * `STANDARD` - USPS regular mail or similar international option, with no tracking
                    * `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking
                    * `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking
                    * `EXPRESS` - FedEx Express, 3-day shipping, with tracking
                    * `2_DAY` - FedEx 2-day shipping, with tracking
                    * `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking
                  enum:
                    - 2-DAY
                    - EXPEDITED
                    - EXPRESS
                    - PRIORITY
                    - STANDARD
                    - STANDARD_WITH_TRACKING
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: f3f4918c-dee9-464d-a819-4aa42901d624
                card_program_token: 5e9483eb-8103-4e16-9794-2106111b2eca
                cardholder_currency: USD
                created: '2021-06-28T22:53:15Z'
                cvv: '742'
                exp_month: '05'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08 17:57:36'
                  last_four: '5263'
                  nickname: checking account
                  state: ENABLED
                  token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4938'
                memo: Updated Name
                pan: '4111111289144142'
                spend_limit: 100
                spend_limit_duration: FOREVER
                state: OPEN
                token: f5f905f5-8a8e-49bf-a9b4-c0adaa401456
                type: PHYSICAL
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Reissue physical card
      tags:
        - Card
  /v1/cards/{card_token}/renew:
    post:
      description: |
        Initiate print and shipment of a renewed physical card.

        Only applies to cards of type `PHYSICAL`.
      operationId: postCardRenew
      parameters:
        - $ref: '#/components/parameters/cardToken'
      requestBody:
        content:
          application/json:
            examples:
              renewCardNewAddress:
                summary: Renew card with a new address
                value:
                  carrier:
                    qr_code_url: https://lithic.com/activate-card/1
                  product_id: '100'
                  shipping_address:
                    address1: 5 Broad Street
                    address2: Unit 5A
                    city: NEW YORK
                    country: USA
                    first_name: Janet
                    last_name: Yellen
                    postal_code: '10001'
                    state: NY
                  shipping_method: STANDARD
            schema:
              properties:
                carrier:
                  $ref: '#/components/schemas/Carrier'
                  description: If omitted, the previous carrier will be used.
                exp_month:
                  description: Two digit (MM) expiry month. If neither `exp_month` nor `exp_year` is provided, an expiration date six years in the future will be generated.
                  example: '06'
                  maxLength: 2
                  minLength: 2
                  type: string
                exp_year:
                  description: Four digit (yyyy) expiry year. If neither `exp_month` nor `exp_year` is provided, an expiration date six years in the future will be generated.
                  example: '2027'
                  maxLength: 4
                  minLength: 4
                  type: string
                product_id:
                  description: |
                    Specifies the configuration (e.g. physical card art) that the card should be manufactured with, and only applies to cards of type `PHYSICAL`. This must be configured with Lithic before use.
                  type: string
                shipping_address:
                  $ref: '#/components/schemas/ShippingAddress'
                  description: The shipping address this card will be sent to.
                shipping_method:
                  description: |
                    Shipping method for the card. Use of options besides `STANDARD` require additional permissions.
                    * `STANDARD` - USPS regular mail or similar international option, with no tracking
                    * `STANDARD_WITH_TRACKING` - USPS regular mail or similar international option, with tracking
                    * `PRIORITY` - USPS Priority, 1-3 day shipping, with tracking
                    * `EXPRESS` - FedEx Express, 3-day shipping, with tracking
                    * `2_DAY` - FedEx 2-day shipping, with tracking
                    * `EXPEDITED` - FedEx Standard Overnight or similar international option, with tracking
                  enum:
                    - 2-DAY
                    - EXPEDITED
                    - EXPRESS
                    - PRIORITY
                    - STANDARD
                    - STANDARD_WITH_TRACKING
                  type: string
              required:
                - shipping_address
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: f3f4918c-dee9-464d-a819-4aa42901d624
                card_program_token: 5e9483eb-8103-4e16-9794-2106111b2eca
                cardholder_currency: USD
                created: '2021-06-28T22:53:15Z'
                cvv: '742'
                exp_month: '05'
                exp_year: '2027'
                funding:
                  account_name: Sandbox
                  created: '2020-07-08 17:57:36'
                  last_four: '5263'
                  nickname: checking account
                  state: ENABLED
                  token: b0f0d91a-3697-46d8-85f3-20f0a585cbea
                  type: DEPOSITORY_CHECKING
                hostname: ''
                last_four: '4938'
                memo: Updated Name
                pan: '4111111289144142'
                spend_limit: 100
                spend_limit_duration: FOREVER
                state: OPEN
                token: f5f905f5-8a8e-49bf-a9b4-c0adaa401456
                type: PHYSICAL
              schema:
                $ref: '#/components/schemas/Card'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Renew physical card
      tags:
        - Card
  /v1/cards/{card_token}/spend_limits:
    get:
      description: Get a Card's available spend limit, which is based on the spend limit configured on the Card and the amount already spent over the spend limit's duration. For example, if the Card has a monthly spend limit of $1000 configured, and has spent $600 in the last month, the available spend limit returned would be $400.
      operationId: getCardSpendLimits
      parameters:
        - $ref: '#/components/parameters/cardToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSpendLimits'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card's available spend limit
      tags:
        - Card
  /v1/digital_card_art:
    get:
      description: List digital card art.
      operationId: getDigitalCardArt
      parameters:
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/DigitalCardArt'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List digital card art
      tags:
        - Tokenization
  /v1/digital_card_art/{digital_card_art_token}:
    get:
      description: Get digital card art by token.
      operationId: getDigitalCardArtByToken
      parameters:
        - description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
          in: path
          name: digital_card_art_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalCardArt'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get digital card art by token
      tags:
        - Tokenization
  /v1/disputes:
    get:
      description: List disputes.
      operationId: getDisputes
      parameters:
        - description: List disputes of a specific status.
          in: query
          name: status
          required: false
          schema:
            enum:
              - ARBITRATION
              - CASE_CLOSED
              - CASE_WON
              - NEW
              - PENDING_CUSTOMER
              - PREARBITRATION
              - REPRESENTMENT
              - SUBMITTED
            type: string
        - description: Transaction tokens to filter by.
          explode: false
          in: query
          name: transaction_tokens
          required: false
          schema:
            items:
              format: uuid
              type: string
            maxItems: 50
            type: array
          style: form
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Dispute'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List disputes
      tags:
        - Dispute
    post:
      description: Initiate a dispute.
      operationId: postDisputes
      requestBody:
        content:
          application/json:
            examples:
              initiateDispute:
                summary: Initiate a dispute
                value:
                  amount: 10000
                  customer_filed_date: '2021-06-28T22:53:15Z'
                  reason: FRAUD_CARD_PRESENT
                  transaction_token: 12345624-aa69-4cbc-a946-30d90181b621
            schema:
              properties:
                amount:
                  description: Amount to dispute
                  type: integer
                customer_filed_date:
                  description: Date the customer filed the dispute
                  format: date-time
                  type: string
                customer_note:
                  description: Customer description of dispute
                  maximum: 5000
                  type: string
                reason:
                  description: Reason for dispute
                  enum:
                    - ATM_CASH_MISDISPENSE
                    - CANCELLED
                    - DUPLICATED
                    - FRAUD_CARD_NOT_PRESENT
                    - FRAUD_CARD_PRESENT
                    - FRAUD_OTHER
                    - GOODS_SERVICES_NOT_AS_DESCRIBED
                    - GOODS_SERVICES_NOT_RECEIVED
                    - INCORRECT_AMOUNT
                    - MISSING_AUTH
                    - OTHER
                    - PROCESSING_ERROR
                    - RECURRING_TRANSACTION_NOT_CANCELLED
                    - REFUND_NOT_PROCESSED
                  type: string
                transaction_token:
                  description: Transaction to dispute
                  format: uuid
                  type: string
              required:
                - amount
                - reason
                - transaction_token
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Initiate dispute
      tags:
        - Dispute
  /v1/disputes/{dispute_token}:
    delete:
      description: Withdraw dispute.
      operationId: deleteDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Withdraw dispute
      tags:
        - Dispute
    get:
      description: Get dispute.
      operationId: getDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get dispute
      tags:
        - Dispute
    patch:
      description: Update dispute. Can only be modified if status is `NEW`.
      operationId: updateDisputeByToken
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: Amount to dispute
                  type: integer
                customer_filed_date:
                  description: Date the customer filed the dispute
                  format: date-time
                  type: string
                customer_note:
                  description: Customer description of dispute
                  type: string
                reason:
                  description: Reason for dispute
                  enum:
                    - ATM_CASH_MISDISPENSE
                    - CANCELLED
                    - DUPLICATED
                    - FRAUD_CARD_NOT_PRESENT
                    - FRAUD_CARD_PRESENT
                    - FRAUD_OTHER
                    - GOODS_SERVICES_NOT_AS_DESCRIBED
                    - GOODS_SERVICES_NOT_RECEIVED
                    - INCORRECT_AMOUNT
                    - MISSING_AUTH
                    - OTHER
                    - PROCESSING_ERROR
                    - RECURRING_TRANSACTION_NOT_CANCELLED
                    - REFUND_NOT_PROCESSED
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update dispute
      tags:
        - Dispute
  /v1/disputes/{dispute_token}/evidences:
    get:
      description: List evidence metadata for a dispute.
      operationId: getDisputeEvidences
      parameters:
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/disputeToken'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/DisputeEvidence'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List dispute evidences
      tags:
        - Dispute
    post:
      description: |
        Use this endpoint to upload evidences for the dispute. It will return a URL to upload your documents to. The URL will expire in 30 minutes.

        Uploaded documents must either be a `jpg`, `png` or `pdf` file, and each must be less than 5 GiB.
      operationId: postEvidenceDocument
      parameters:
        - $ref: '#/components/parameters/disputeToken'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                filename:
                  description: Filename of the evidence.
                  type: string
              type: object
        required: false
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEvidence'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Initiate dispute evidence upload
      tags:
        - Dispute
  /v1/disputes/{dispute_token}/evidences/{evidence_token}:
    delete:
      description: Soft delete evidence for a dispute. Evidence will not be reviewed or submitted by Lithic after it is withdrawn.
      operationId: deleteDisputeEvidenceByToken
      parameters:
        - $ref: '#/components/parameters/disputeEvidenceToken'
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEvidence'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Withdraw dispute evidence
      tags:
        - Dispute
    get:
      description: Get a dispute's evidence metadata.
      operationId: getDisputeEvidenceByToken
      parameters:
        - $ref: '#/components/parameters/disputeEvidenceToken'
        - $ref: '#/components/parameters/disputeToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEvidence'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get dispute evidence
      tags:
        - Dispute
  /v1/embed/card:
    get:
      description: |
        Handling full card PANs and CVV codes requires that you comply with the Payment Card Industry Data Security Standards (PCI DSS). Some clients choose to reduce their compliance obligations by leveraging our embedded card UI solution documented below.

        In this setup, PANs and CVV codes are presented to the end-user via a card UI that we provide, optionally styled in the customer's branding using a specified css stylesheet. A user's browser makes the request directly to api.lithic.com, so card PANs and CVVs never touch the API customer's servers while full card data is displayed to their end-users. The response contains an HTML document. This means that the url for the request can be inserted straight into the `src` attribute of an iframe.

        ```html
        <iframe id="card-iframe"
                src="https://sandbox.lithic.com/v1/embed/card?embed_request=eyJjc3MiO...;hmac=r8tx1..."
                allow="clipboard-write" class="content"></iframe>
        ```

        You should compute the request payload on the server side. You can render it (or the whole iframe) on the server or make an ajax call from your front end code, but **do not ever embed your API key into front end code, as doing so introduces a serious security vulnerability**.
      operationId: getEmbedCard
      parameters:
        - description: A base64 encoded JSON string of an EmbedRequest to specify which card to load.
          in: query
          name: embed_request
          required: true
          schema:
            type: string
        - description: SHA256 HMAC of the embed_request JSON string with base64 digest.
          in: query
          name: hmac
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/html:
              examples:
                html:
                  summary: Card UI
                  value: |
                    <html>
                    <head>
                    <link rel="stylesheet" type="text/css" href="https://demo.lithic.com/backend/embedded.css">
                    <style>
                        #alert { display: none; }
                    </style>
                    <script type="text/javascript">
                        var timeout;

                        function clearAlertDelay() {
                            clearTimeout(timeout);
                            var messageDiv = document.getElementById('alert');
                            timeout = window.setTimeout(
                                function() {
                                    messageDiv.className = "empty";
                                    messageDiv.innerText = "";
                                },
                                1200
                            );
                        }

                        function copySuccess(divId) {
                            var messageDiv = document.getElementById('alert');
                            messageDiv.innerText = divId + " copied to clipboard";
                            messageDiv.className = "success";
                            console.log('Copying to clipboard was successful!');
                            clearAlertDelay();
                        }

                        function copyFailed(divId) {
                            var messageDiv = document.getElementById('alert');
                            messageDiv.innerText = "error copying " + divId;
                            messageDiv.className = "error";
                            console.error('Copying to clipboard failed');
                            clearAlertDelay();
                        }

                        function copyToClip(divId) {
                            var messageDiv = document.getElementById('alert');
                            var copyEl = document.getElementById(divId);
                            var copyText = copyEl.textContent;
                            navigator.clipboard.writeText(copyText)
                                .then(function () {
                                    copySuccess(divId);
                                    clearAlertDelay();
                                })
                                .catch(function(err) {
                                    try {
                                        var copied = false;
                                        if (document.createRange) {
                                            range = document.createRange();
                                            range.selectNode(copyEl)
                                            select = window.getSelection();
                                            select.removeAllRanges();
                                            select.addRange(range);
                                            copied = document.execCommand('copy');
                                            select.removeAllRanges();
                                        }
                                        else {
                                            range = document.body.createTextRange();
                                            range.moveToElementText(copyEl);
                                            range.select();
                                            copied = document.execCommand('copy');
                                        }

                                        if (copied) {
                                            copySuccess(divId);
                                        }
                                        else {
                                            copyFailed(divId);
                                        }
                                    }
                                    catch (err) {
                                        copyFailed(divId);
                                    }
                                    clearAlertDelay();
                                })
                        }
                    </script>
                    </head>
                    <body>
                        <div id="card">
                            <div id="pan" onclick="copyToClip('pan')">9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999<span class='pan-separator'></span>9999</div>
                            <div id="expiry">
                                <span id="month" onclick="copyToClip('month')">08</span>
                                <span id="separator">/</span>
                                <span id="year" onclick="copyToClip('year')">27</span>
                            </div>
                            <div id="cvv" onclick="copyToClip('cvv')">574</div>
                            <div id="alert" class="empty"></div>
                        </div>
                    </body>
                    </html>
              schema:
                type: string
          description: |
            The endpoint returns an HTML document similar to the one below. It is up to the API client to provide css styles for these elements in the EmbedRequest. You can always rely on the `card`, `pan`, `expiry`, `cvv`, and `alert` ids, as well as the `pan-separator` class. You shouldn't make any other assumptions about the structure of the document as it could change at any time.

            Note that using the default style sheet there is no visual indication that copying is happening on-click, and you may need to add on-click styling yourself.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Embedded card UI
      tags:
        - Card
  /v1/transactions/{transaction_token}/enhanced_commercial_data:
    get:
      description: Get all L2/L3 enhanced commercial data associated with a transaction. Not available in sandbox.
      summary: List enhanced commercial data
      operationId: listEnhancedTransactionData
      tags:
        - Transaction
      parameters:
        - required: true
          schema:
            title: Transaction Token
            type: string
            format: uuid
          name: transaction_token
          description: The token of the transaction that the enhanced data is associated with.
          in: path
          example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnhancedDataListResponse'
              examples:
                listEnhancedTransactionDataResponse:
                  value:
                    data:
                      - token: fda41769-2a3f-5532-898f-0d2034f2da85
                        transaction_token: 6b79924e-0f01-4bdf-9485-9f6da44b6be2
                        event_token: 49bbd49c-dfe1-56db-86ad-98c7c2bd75e4
                        common:
                          customer_reference_number: null
                          merchant_reference_number: null
                          order_date: null
                          line_items: []
                          tax:
                            merchant_tax_id: '521236050'
                            amount: null
                            exempt: null
                        fleet:
                          - service_type: SELF_SERVICE
                            driver_number: null
                            vehicle_number: '012345'
                            odometer: 12345
                            amount_totals:
                              gross_sale: 104
                              discount: null
                              net_sale: 104
                            fuel:
                              quantity: '0.24300'
                              type: PREMIUM_SUPER
                              unit_of_measure: GALLONS
                              unit_price: 4300
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /v1/transactions/events/{event_token}/enhanced_commercial_data:
    get:
      description: Get L2/L3 enhanced commercial data associated with a transaction event. Not available in sandbox.
      summary: Get enhanced commercial data
      operationId: getEnhancedTransactionData
      tags:
        - Transaction
      parameters:
        - required: true
          schema:
            title: Event Token
            type: string
            format: uuid
          name: event_token
          description: The token of the transaction event that the enhanced data is associated with.
          in: path
          example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnhancedData'
              examples:
                getEnhancedTransactionDataResponse:
                  value:
                    token: fda41769-2a3f-5532-898f-0d2034f2da85
                    transaction_token: 6b79924e-0f01-4bdf-9485-9f6da44b6be2
                    event_token: 49bbd49c-dfe1-56db-86ad-98c7c2bd75e4
                    common:
                      customer_reference_number: null
                      merchant_reference_number: null
                      order_date: null
                      line_items: []
                      tax:
                        merchant_tax_id: '521236050'
                        amount: null
                        exempt: null
                    fleet:
                      - service_type: SELF_SERVICE
                        driver_number: null
                        vehicle_number: '012345'
                        odometer: 12345
                        amount_totals:
                          gross_sale: 104
                          discount: null
                          net_sale: 104
                        fuel:
                          quantity: '0.24300'
                          type: PREMIUM_SUPER
                          unit_of_measure: GALLONS
                          unit_price: 4300
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /v1/event_subscriptions:
    get:
      description: List all the event subscriptions.
      operationId: getEventSubscriptions
      parameters:
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                  - description: A subscription for all events
                    disabled: false
                    token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                    url: https://example.com/webhook
                has_more: false
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/EventSubscription'
                    type: array
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List event subscriptions
      tags:
        - Event
    post:
      description: Create a new event subscription.
      operationId: createEventSubscription
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Event subscription description.
                  type: string
                disabled:
                  default: false
                  description: Whether the event subscription is active (false) or inactive (true).
                  type: boolean
                event_types:
                  description: Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.
                  items:
                    enum:
                      - account_holder.created
                      - account_holder.updated
                      - account_holder.verification
                      - auth_rules.performance_report.created
                      - balance.updated
                      - book_transfer_transaction.created
                      - card.created
                      - card.renewed
                      - card.reissued
                      - card.shipped
                      - card_transaction.updated
                      - digital_wallet.tokenization_approval_request
                      - digital_wallet.tokenization_result
                      - digital_wallet.tokenization_two_factor_authentication_code
                      - digital_wallet.tokenization_two_factor_authentication_code_sent
                      - digital_wallet.tokenization_updated
                      - dispute.updated
                      - dispute_evidence.upload_failed
                      - external_bank_account.created
                      - external_bank_account.updated
                      - external_payment.created
                      - external_payment.updated
                      - financial_account.created
                      - financial_account.updated
                      - loan_tape.created
                      - loan_tape.updated
                      - management_operation.created
                      - management_operation.updated
                      - payment_transaction.created
                      - payment_transaction.updated
                      - settlement_report.updated
                      - statements.created
                      - three_ds_authentication.created
                      - tokenization.approval_request
                      - tokenization.result
                      - tokenization.two_factor_authentication_code
                      - tokenization.two_factor_authentication_code_sent
                      - tokenization.updated
                    type: string
                  type: array
                url:
                  description: URL to which event webhooks will be sent. URL must be a valid HTTPS address.
                  format: uri
                  type: string
              required:
                - url
              type: object
      responses:
        '201':
          content:
            application/json:
              example:
                description: A subscription for all events
                disabled: false
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create event subscription
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}:
    delete:
      description: Delete an event subscription.
      operationId: deleteEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete event subscription
      tags:
        - Event
    get:
      description: Get an event subscription.
      operationId: getEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                description: A subscription for all events
                disabled: false
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get event subscription
      tags:
        - Event
    patch:
      description: Update an event subscription.
      operationId: updateEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  description: Event subscription description.
                  type: string
                disabled:
                  default: false
                  description: Whether the event subscription is active (false) or inactive (true).
                  type: boolean
                event_types:
                  description: Indicates types of events that will be sent to this subscription. If left blank, all types will be sent.
                  items:
                    enum:
                      - account_holder.created
                      - account_holder.updated
                      - account_holder.verification
                      - auth_rules.performance_report.created
                      - balance.updated
                      - book_transfer_transaction.created
                      - card.created
                      - card.renewed
                      - card.reissued
                      - card.shipped
                      - card_transaction.updated
                      - digital_wallet.tokenization_approval_request
                      - digital_wallet.tokenization_result
                      - digital_wallet.tokenization_two_factor_authentication_code
                      - digital_wallet.tokenization_two_factor_authentication_code_sent
                      - digital_wallet.tokenization_updated
                      - dispute.updated
                      - dispute_evidence.upload_failed
                      - external_bank_account.created
                      - external_bank_account.updated
                      - external_payment.created
                      - external_payment.updated
                      - financial_account.created
                      - financial_account.updated
                      - loan_tape.created
                      - loan_tape.updated
                      - management_operation.created
                      - management_operation.updated
                      - payment_transaction.created
                      - payment_transaction.updated
                      - settlement_report.updated
                      - statements.created
                      - three_ds_authentication.created
                      - tokenization.approval_request
                      - tokenization.result
                      - tokenization.two_factor_authentication_code
                      - tokenization.two_factor_authentication_code_sent
                      - tokenization.updated
                    type: string
                  type: array
                url:
                  description: URL to which event webhooks will be sent. URL must be a valid HTTPS address.
                  format: uri
                  type: string
              required:
                - url
              type: object
      responses:
        '200':
          content:
            application/json:
              example:
                description: A subscription for all events
                disabled: false
                token: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
                url: https://example.com/webhook
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update event subscription
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}/attempts:
    get:
      description: List all the message attempts for a given event subscription.
      operationId: getMessageAttemptsForEventSubscription
      parameters:
        - in: query
          name: status
          schema:
            enum:
              - FAILED
              - PENDING
              - SENDING
              - SUCCESS
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/eventSubscriptionToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MessageAttempt'
                    type: array
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List message attempts for an event subscription
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}/recover:
    post:
      description: Resend all failed messages since a given time.
      operationId: recoverEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Resend failed messages
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}/replay_missing:
    post:
      description: |
        Replays messages to the endpoint. Only messages that were created after `begin` will be sent. Messages that were previously sent to the endpoint are not resent.
        Message will be retried if endpoint responds with a non-2xx status code. See [Retry Schedule](https://docs.lithic.com/docs/events-api#retry-schedule) for details.
      operationId: replayMissingEventSubscription
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Replay missing messages
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}/secret:
    get:
      description: Get the secret for an event subscription.
      operationId: getEventSubscriptionSecret
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                secret: whsec_C2FVsBQIhrscChlQIMA
              schema:
                properties:
                  secret:
                    description: The secret for the event subscription.
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get event subscription secret
      tags:
        - Event
  /v1/event_subscriptions/{event_subscription_token}/secret/rotate:
    post:
      description: |
        Rotate the secret for an event subscription. The previous secret will be valid for the next 24 hours.
      operationId: rotateEventSubscriptionSecret
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Rotate event subscription secret
      tags:
        - Event
  /v1/events:
    get:
      description: List all events.
      operationId: getEvents
      parameters:
        - description: Event types to filter events by.
          explode: false
          in: query
          name: event_types
          required: false
          schema:
            items:
              enum:
                - account_holder.created
                - account_holder.updated
                - account_holder.verification
                - auth_rules.performance_report.created
                - balance.updated
                - book_transfer_transaction.created
                - card.created
                - card.renewed
                - card.reissued
                - card.shipped
                - card_transaction.updated
                - digital_wallet.tokenization_approval_request
                - digital_wallet.tokenization_result
                - digital_wallet.tokenization_two_factor_authentication_code
                - digital_wallet.tokenization_two_factor_authentication_code_sent
                - digital_wallet.tokenization_updated
                - dispute.updated
                - dispute_evidence.upload_failed
                - external_bank_account.created
                - external_bank_account.updated
                - external_payment.created
                - external_payment.updated
                - financial_account.created
                - financial_account.updated
                - loan_tape.created
                - loan_tape.updated
                - management_operation.created
                - management_operation.updated
                - payment_transaction.created
                - payment_transaction.updated
                - settlement_report.updated
                - statements.created
                - three_ds_authentication.created
                - tokenization.approval_request
                - tokenization.result
                - tokenization.two_factor_authentication_code
                - tokenization.two_factor_authentication_code_sent
                - tokenization.updated
              type: string
            maxLength: 10
            type: array
          style: form
        - description: Whether to include the event payload content in the response.
          in: query
          name: with_content
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                  - created: '2020-07-08 17:57:36'
                    event_type: dispute.updated
                    payload: {}
                    token: msg_1srOrx2ZWZBpBUvZwXKQmoEYga1
                has_more: false
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Event'
                    type: array
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List events
      tags:
        - Event
  /v1/events/{event_token}:
    get:
      description: Get an event.
      operationId: getEvent
      parameters:
        - in: path
          name: event_token
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get event
      tags:
        - Event
  /v1/events/{event_token}/attempts:
    get:
      description: List all the message attempts for a given event.
      operationId: getMessageAttemptsForEvent
      parameters:
        - in: query
          name: status
          schema:
            enum:
              - FAILED
              - PENDING
              - SENDING
              - SUCCESS
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/eventToken'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MessageAttempt'
                    type: array
                  has_more:
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List message attempts for an event
      tags:
        - Event
  /v1/events/{event_token}/event_subscriptions/{event_subscription_token}/resend:
    post:
      description: Resend an event to an event subscription.
      operationId: resendEvent
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
        - in: path
          name: event_token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Resend event
      tags:
        - Event
  /v1/external_bank_accounts:
    get:
      description: List all the external bank accounts for the provided search criteria.
      operationId: searchExternalBankAccounts
      parameters:
        - in: query
          name: account_token
          required: false
          schema:
            format: uuid
            title: Account Token
            type: string
        - in: query
          name: account_types
          required: false
          schema:
            items:
              $ref: '#/components/schemas/searchable_account_types'
            title: Account Types
            type: array
        - in: query
          name: countries
          required: false
          schema:
            items:
              type: string
            title: Countries
            type: array
        - in: query
          name: owner_types
          required: false
          schema:
            items:
              $ref: '#/components/schemas/owner_type'
            title: Owner Types
            type: array
        - in: query
          name: states
          required: false
          schema:
            items:
              $ref: '#/components/schemas/account_state'
            title: Account States
            type: array
        - in: query
          name: verification_states
          required: false
          schema:
            items:
              $ref: '#/components/schemas/verification_state'
            title: Verification States
            type: array
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_accounts_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List external bank accounts
      tags:
        - External Bank Account
    post:
      description: Creates an external bank account within a program or Lithic account.
      operationId: createExternalBankAccount
      requestBody:
        content:
          application/json:
            examples:
              createBankAccountViaMicroDeposits:
                summary: Add external bank account via Micro Deposit Verification
                value:
                  account_number: '13719713158835300'
                  address:
                    address1: 5 Broad Street
                    city: New York
                    country: USA
                    postal_code: '10001'
                    state: NY
                  country: USA
                  currency: USD
                  name: John Does Checking
                  owner: John Doe
                  owner_type: BUSINESS
                  routing_number: '011103093'
                  type: CHECKING
                  verification_method: MICRO_DEPOSIT
              createBankAccountViaPlaid:
                summary: Add external bank account via Plaid Verification
                value:
                  owner: John Doe
                  owner_type: BUSINESS
                  processor_token: processor-sandbox-0asd1-a92nc
                  verification_method: PLAID
              createBankAccountViaPrenote:
                summary: Add external bank account via Prenote Verification
                value:
                  account_number: '13719713158835300'
                  address:
                    address1: 5 Broad Street
                    city: New York
                    country: USA
                    postal_code: '10001'
                    state: NY
                  country: USA
                  currency: USD
                  name: John Does Checking
                  financial_account_token: dabadb3b-700c-41e3-8801-d5dfc84ebea0
                  owner: John Doe
                  owner_type: BUSINESS
                  routing_number: '011103093'
                  type: CHECKING
                  verification_method: PRENOTE
            schema:
              discriminator:
                propertyName: verification_method
                mapping:
                  MICRO_DEPOSIT: '#/components/schemas/bank_verified_create_bank_account_api_request'
                  PLAID: '#/components/schemas/plaid_verified_create_bank_account_api_request'
                  PRENOTE: '#/components/schemas/bank_verified_create_bank_account_api_request'
                  EXTERNALLY_VERIFIED: '#/components/schemas/externally_verified_create_bank_account_api_request'
              oneOf:
                - $ref: '#/components/schemas/bank_verified_create_bank_account_api_request'
                - $ref: '#/components/schemas/plaid_verified_create_bank_account_api_request'
                - $ref: '#/components/schemas/externally_verified_create_bank_account_api_request'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create external bank account
      tags:
        - External Bank Account
  /v1/external_bank_accounts/{external_bank_account_token}:
    get:
      description: Get the external bank account by token.
      operationId: getExternalBankAccountByToken
      parameters:
        - in: path
          name: external_bank_account_token
          required: true
          schema:
            format: uuid
            title: External Bank Account Token
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get external bank account by token
      tags:
        - External Bank Account
    patch:
      description: Update the external bank account by token.
      operationId: patchExternalBankAccountByToken
      parameters:
        - in: path
          name: external_bank_account_token
          required: true
          schema:
            format: uuid
            title: External Bank Account Token
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_bank_account_api_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update external bank account
      tags:
        - External Bank Account
  /v1/external_bank_accounts/{external_bank_account_token}/micro_deposits:
    post:
      description: Verify the external bank account by providing the micro deposit amounts.
      operationId: verifyExternalBankAccountByMicroDeposits
      parameters:
        - in: path
          name: external_bank_account_token
          required: true
          schema:
            format: uuid
            title: External Bank Account Token
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/micro_deposit_verification_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Verify external bank account via micro deposit amounts
      tags:
        - External Bank Account
  /v1/external_bank_accounts/{external_bank_account_token}/retry_micro_deposits:
    post:
      description: Retry external bank account micro deposit verification.
      operationId: retryMicroDeposit
      parameters:
        - in: path
          name: external_bank_account_token
          required: true
          schema:
            format: uuid
            title: External Bank Account Token
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/retry_micro_deposit_verification_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retry external bank account via micro deposit
      tags:
        - External Bank Account
  /v1/external_bank_accounts/{external_bank_account_token}/retry_prenote:
    post:
      description: Retry external bank account prenote verification.
      operationId: retryPrenote
      parameters:
        - in: path
          name: external_bank_account_token
          required: true
          schema:
            format: uuid
            title: External Bank Account Token
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/retry_prenote_verification_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bank_account_api_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retry external bank account via prenote
      tags:
        - External Bank Account
  /v1/credit_products/{credit_product_id}/extended_credit:
    get:
      description: Get the extended credit for a given credit product under a program
      operationId: getExtendedCredit
      parameters:
        - description: Credit Product ID
          in: path
          name: credit_product_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extended_credit'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get extended credit
      tags:
        - Credit Product
  /v1/financial_accounts:
    get:
      description: Retrieve information on your financial accounts including routing and account number.
      operationId: getFinancialAccounts
      parameters:
        - description: List financial accounts for a given account_token or business_account_token
          in: query
          name: account_token
          schema:
            format: uuid
            type: string
        - description: List financial accounts for a given business_account_token
          in: query
          name: business_account_token
          schema:
            format: uuid
            type: string
        - description: List financial accounts of a given type
          in: query
          name: type
          schema:
            enum:
              - ISSUING
              - OPERATING
              - RESERVE
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-accounts-response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List financial accounts
      tags:
        - Financial Account
    post:
      description: Create a new financial account
      operationId: createFinancialAccount
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            format: uuid
            title: Idempotency key for the request
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFinancialAccountRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create financial account
      tags:
        - Financial Account
  /v1/financial_accounts/{financial_account_token}:
    get:
      description: Get a financial account
      operationId: getFinancialAccountByToken
      parameters:
        - in: path
          name: financial_account_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get financial account
      tags:
        - Financial Account
    patch:
      description: Update a financial account
      operationId: updateFinancialAccountByToken
      parameters:
        - in: path
          name: financial_account_token
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFinancialAccountRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update financial account
      tags:
        - Financial Account
  /v1/financial_accounts/{financial_account_token}/balances:
    get:
      description: Get the balances for a given financial account.
      operationId: getBalance
      parameters:
        - description: UTC date of the balance to retrieve. Defaults to latest available balance
          in: query
          name: balance_date
          schema:
            format: date-time
            type: string
        - description: |
            Balance after a given financial event occured.
            For example, passing the event_token of a $5 CARD_CLEARING financial event will return a balance decreased by $5
          in: query
          name: last_transaction_event_token
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/financialAccountToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/FinancialAccountBalance'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get balances
      tags:
        - Balance
  /v1/financial_accounts/{financial_account_token}/charge_off:
    post:
      description: Update issuing account state to charged off
      operationId: chargeOffAccount
      summary: Charge off issuing account
      tags:
        - Financial Account
      parameters:
        - $ref: '#/components/parameters/financialAccountToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/charge-off-account-request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-credit-config-response'
  /v1/financial_accounts/{financial_account_token}/credit_configuration:
    get:
      description: Get an Account's credit configuration
      operationId: getAccountCreditConfiguration
      parameters:
        - $ref: '#/components/parameters/financialAccountToken'
      summary: Get account credit configuration
      tags:
        - Financial Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-credit-config-response'
    patch:
      description: Update an account's credit configuration
      operationId: patchAccountCreditConfiguration
      summary: Update account credit configuration
      tags:
        - Financial Account
      parameters:
        - $ref: '#/components/parameters/financialAccountToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/financial-account-credit-config-request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/financial-account-credit-config-response'
  /v1/financial_accounts/{financial_account_token}/financial_transactions:
    get:
      description: List the financial transactions for a given financial account.
      operationId: getFinancialTransactions
      parameters:
        - description: Financial Transaction category to be returned.
          in: query
          name: category
          schema:
            enum:
              - ACH
              - CARD
              - TRANSFER
            type: string
        - description: Financial Transaction result to be returned.
          in: query
          name: result
          schema:
            enum:
              - APPROVED
              - DECLINED
            type: string
        - description: Financial Transaction status to be returned.
          in: query
          name: status
          schema:
            enum:
              - DECLINED
              - EXPIRED
              - PENDING
              - RETURNED
              - SETTLED
              - VOIDED
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/financialAccountToken'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/FinancialTransaction'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List financial transactions
      tags:
        - Financial Account
  /v1/financial_accounts/{financial_account_token}/financial_transactions/{financial_transaction_token}:
    get:
      description: Get the financial transaction for the provided token.
      operationId: getFinancialTransactionByToken
      parameters:
        - $ref: '#/components/parameters/financialAccountToken'
        - $ref: '#/components/parameters/financialTransactionToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialTransaction'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get financial transaction
      tags:
        - Financial Account
  /v1/financial_accounts/{financial_account_token}/statements:
    get:
      description: List the statements for a given financial account.
      operationId: getStatements
      parameters:
        - description: Date string in RFC 3339 format. Only entries created after the specified date will be included.
          in: query
          name: begin
          required: false
          schema:
            description: Date string in RFC 3339 format. Only entries created after the specified date will be included.
            format: date
            title: Begin
            type: string
        - description: Date string in RFC 3339 format. Only entries created before the specified date will be included.
          in: query
          name: end
          required: false
          schema:
            description: Date string in RFC 3339 format. Only entries created before the specified date will be included.
            format: date
            title: End
            type: string
        - description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
          in: query
          name: ending_before
          required: false
          schema:
            description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
            title: Ending Before
            type: string
        - description: Globally unique identifier for financial account.
          in: path
          name: financial_account_token
          required: true
          schema:
            description: Globally unique identifier for financial account.
            format: uuid
            title: Financial Account Token
            type: string
        - description: Page size (for pagination).
          in: query
          name: page_size
          required: false
          schema:
            default: 50
            description: Page size (for pagination).
            maximum: 100
            minimum: 1
            title: Page Size
            type: integer
        - description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
          in: query
          name: starting_after
          required: false
          schema:
            description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
            title: Starting After
            type: string
        - description: Whether to include the initial statement. It is not included by default.
          in: query
          name: include_initial_statements
          required: false
          schema:
            description: Whether to include the initial statement. It is not included by default.
            title: Include Initial Statements
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statements_response'
          description: OK
      summary: List statements
      tags:
        - Statements
  /v1/financial_accounts/{financial_account_token}/statements/{statement_token}:
    get:
      description: Get a specific statement for a given financial account.
      operationId: getStatement
      parameters:
        - description: Globally unique identifier for financial account.
          in: path
          name: financial_account_token
          required: true
          schema:
            description: Globally unique identifier for financial account.
            format: uuid
            title: Financial Account Token
            type: string
        - description: Globally unique identifier for statements.
          in: path
          name: statement_token
          required: true
          schema:
            description: Globally unique identifier for statements.
            title: Statement Token
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement_response'
          description: OK
      summary: Get statement by token
      tags:
        - Statements
  /v1/financial_accounts/{financial_account_token}/statements/{statement_token}/line_items:
    get:
      description: List the line items for a given statement within a given financial account.
      operationId: getStatementLineItems
      parameters:
        - description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
          in: query
          name: ending_before
          required: false
          schema:
            description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
            title: Ending Before
            type: string
        - description: Globally unique identifier for financial account.
          in: path
          name: financial_account_token
          required: true
          schema:
            description: Globally unique identifier for financial account.
            format: uuid
            title: Financial Account Token
            type: string
        - description: Page size (for pagination).
          in: query
          name: page_size
          required: false
          schema:
            default: 50
            description: Page size (for pagination).
            maximum: 100
            minimum: 1
            title: Page Size
            type: integer
        - description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
          in: query
          name: starting_after
          required: false
          schema:
            description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
            title: Starting After
            type: string
        - description: Globally unique identifier for statements.
          in: path
          name: statement_token
          required: true
          schema:
            description: Globally unique identifier for statements.
            title: Statement Token
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement_line_items_response'
          description: OK
      summary: List line items for a statement
      tags:
        - Statements
  /v1/financial_accounts/{financial_account_token}/loan_tapes:
    get:
      description: List the loan tapes for a given financial account.
      operationId: getLoanTapes
      parameters:
        - description: Date string in RFC 3339 format. Only entries created after the specified date will be included.
          in: query
          name: begin
          required: false
          schema:
            description: Date string in RFC 3339 format. Only entries created after the specified date will be included.
            format: date
            title: Begin
            type: string
        - description: Date string in RFC 3339 format. Only entries created before the specified date will be included.
          in: query
          name: end
          required: false
          schema:
            description: Date string in RFC 3339 format. Only entries created before the specified date will be included.
            format: date
            title: End
            type: string
        - description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
          in: query
          name: ending_before
          required: false
          schema:
            description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
            title: Ending Before
            type: string
        - description: Globally unique identifier for financial account.
          in: path
          name: financial_account_token
          required: true
          schema:
            description: Globally unique identifier for financial account.
            format: uuid
            title: Financial Account Token
            type: string
        - description: Page size (for pagination).
          in: query
          name: page_size
          required: false
          schema:
            default: 50
            description: Page size (for pagination).
            maximum: 100
            minimum: 1
            title: Page Size
            type: integer
        - description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
          in: query
          name: starting_after
          required: false
          schema:
            description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
            title: Starting After
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loan_tapes_response'
          description: OK
      summary: List loan tapes
      tags:
        - Statements
  /v1/financial_accounts/{financial_account_token}/loan_tapes/{loan_tape_token}:
    get:
      description: Get a specific loan tape for a given financial account.
      operationId: getLoanTape
      parameters:
        - description: Globally unique identifier for financial account.
          in: path
          name: financial_account_token
          required: true
          schema:
            description: Globally unique identifier for financial account.
            format: uuid
            title: Financial Account Token
            type: string
        - description: Globally unique identifier for loan tape.
          in: path
          name: loan_tape_token
          required: true
          schema:
            description: Globally unique identifier for loan tape.
            title: Loan Tape Token
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loan_tape_response'
          description: OK
      summary: Get loan tape by token
      tags:
        - Statements
  /v1/payments:
    get:
      description: List all the payments for the provided search criteria.
      operationId: searchPayments
      parameters:
        - in: query
          name: financial_account_token
          required: false
          schema:
            format: uuid
            title: Financial Account Token
            type: string
        - in: query
          name: business_account_token
          required: false
          schema:
            format: uuid
            title: Business Account Token
            type: string
        - in: query
          name: account_token
          required: false
          schema:
            format: uuid
            title: Account Token
            type: string
        - in: query
          name: result
          required: false
          schema:
            enum:
              - APPROVED
              - DECLINED
            title: Result
            type: string
        - in: query
          name: status
          required: false
          schema:
            enum:
              - DECLINED
              - PENDING
              - RETURNED
              - SETTLED
            title: Status
            type: string
        - in: query
          name: category
          required: false
          schema:
            enum:
              - ACH
            title: Category
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/PaymentResponse'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List payments
      tags:
        - Payment
    post:
      description: Initiates a payment between a financial account and an external bank account.
      operationId: createPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create payment
      tags:
        - Payment
  /v1/payments/{payment_token}:
    get:
      description: Get the payment by token.
      operationId: getPaymentByToken
      parameters:
        - in: path
          name: payment_token
          required: true
          schema:
            format: uuid
            title: Payment Token
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get payment by token
      tags:
        - Payment
  /v1/payments/{payment_token}/retry:
    post:
      description: Retry an origination which has been returned.
      operationId: retryPayment
      parameters:
        - in: path
          name: payment_token
          required: true
          schema:
            format: uuid
            title: Payment Token
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPaymentResponse'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retry payment
      tags:
        - Payment
  /v1/reports/settlement/details/{report_date}:
    get:
      description: List details.
      operationId: getSettlementDetails
      parameters:
        - description: Date of the settlement report to retrieve. Not available in sandbox.
          example: '2023-09-01'
          in: path
          name: report_date
          required: true
          schema:
            format: date
            type: string
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                  - account_token: 6c25d6a4-4ff3-46f0-8f9b-f2cbb7e20e09
                    card_program_token: 62135b36-324f-443a-a630-bab38fe86868
                    card_token: 047298ea-5789-46e4-95fa-154aeeab6af3
                    created: '2023-06-17T13:00:29.979106'
                    currency: USD
                    disputes_gross_amount: 0
                    event_tokens:
                      - 8fce9192-41ff-4a7a-8359-bd33b3e0a7c9
                    institution: '00001'
                    interchange_fee_extended_precision: -70000
                    interchange_gross_amount: -7
                    network: VISA
                    other_fees_details: {}
                    other_fees_gross_amount: 0
                    report_date: '2023-06-16'
                    settlement_date: '2023-06-16'
                    token: e34a817f-119d-4976-9fb3-8b020b8bbec3
                    transaction_token: 0e98152b-3753-4a17-bfe2-c6f575c83b85
                    transactions_gross_amount: 1900
                    type: CLEARING
                    updated: '2023-06-17T13:00:29.979106'
                has_more: false
                page_size: 1
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SettlementDetail'
                    type: array
                  has_more:
                    description: More data exists.
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List settlement details
      tags:
        - Settlement Report
  /v1/reports/settlement/summary/{report_date}:
    get:
      description: Get the settlement report for a specified report date. Not available in sandbox.
      operationId: getSummary
      parameters:
        - description: Date of the settlement report to retrieve.
          example: '2023-09-01'
          in: path
          name: report_date
          required: true
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettlementReport'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get settlement summary
      tags:
        - Settlement Report
  /v1/responder_endpoints:
    delete:
      operationId: deleteResponderEndpoint
      parameters:
        - description: The type of the endpoint.
          in: query
          name: type
          required: true
          schema:
            enum:
              - AUTH_STREAM_ACCESS
              - THREE_DS_DECISIONING
              - TOKENIZATION_DECISIONING
            type: string
      responses:
        '200':
          content: {}
          description: Endpoint disenrolled successfully
      summary: Disenroll a responder endpoint
      tags:
        - Responder Endpoints
    get:
      operationId: getResponderEndpoints
      parameters:
        - description: The type of the endpoint.
          in: query
          name: type
          required: true
          schema:
            enum:
              - AUTH_STREAM_ACCESS
              - THREE_DS_DECISIONING
              - TOKENIZATION_DECISIONING
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  enrolled:
                    description: True if the instance has an endpoint enrolled.
                    type: boolean
                  url:
                    description: The URL of the currently enrolled endpoint or null.
                    format: uri
                    type:
                      - string
                      - 'null'
                type: object
          description: Responder endpoint status
      summary: Check the status of a responder endpoint
      tags:
        - Responder Endpoints
    post:
      operationId: postResponderEndpoints
      requestBody:
        content:
          application/json:
            schema:
              properties:
                type:
                  description: The type of the endpoint.
                  enum:
                    - AUTH_STREAM_ACCESS
                    - THREE_DS_DECISIONING
                    - TOKENIZATION_DECISIONING
                  type: string
                url:
                  description: The URL for the responder endpoint (must be http(s)).
                  format: uri
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  enrolled:
                    description: True if the endpoint was enrolled successfully.
                    type: boolean
                type: object
          description: Endpoint enrolled successfully
      summary: Enroll a responder endpoint
      tags:
        - Responder Endpoints
  /v1/simulate/authorization_advice:
    post:
      description: |
        Simulates an authorization advice request from the payment network as if it came from a merchant acquirer. An authorization advice request changes the amount of the transaction.
      operationId: postSimulateAuthorizationAdvice
      requestBody:
        content:
          application/json:
            examples:
              simulateAuthorizationAdvice:
                summary: Simulate an authorization
                value:
                  amount: 3831
                  descriptor: COFFEE SHOP
                  pan: '4111111289144142'
                  token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
            schema:
              properties:
                amount:
                  description: Amount (in cents) to authorize. This amount will override the transaction's amount that was originally set by /v1/simulate/authorize.
                  minimum: 0
                  type: integer
                token:
                  description: The transaction token returned from the /v1/simulate/authorize response.
                  format: uuid
                  type: string
              required:
                - amount
                - token
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                  token:
                    description: A unique token to reference this transaction.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate authorization advice
      tags:
        - Transaction
  /v1/simulate/authorize:
    post:
      description: |
        Simulates an authorization request from the payment network as if it came from a merchant acquirer. If you're configured for ASA, simulating auths requires your ASA client to be set up properly (respond with a valid JSON to the ASA request). For users that are not configured for ASA, a daily transaction limit of $5000 USD is applied by default. This limit can be modified via the [update account](https://docs.lithic.com/reference/patchaccountbytoken) endpoint.
      operationId: postSimulateAuthorize
      requestBody:
        content:
          application/json:
            examples:
              simulateAuthorization:
                summary: Simulate an authorization
                value:
                  amount: 3831
                  descriptor: COFFEE SHOP
                  pan: '4111111289144142'
              simulateBalanceInquiry:
                summary: Simulate a balance inquiry
                value:
                  amount: 0
                  descriptor: NEIGHBORHOOD ATM
                  pan: '4111111289144142'
                  status: BALANCE_INQUIRY
              simulateFinancialCreditAuthorization:
                summary: Simulate a financial credit authorization
                value:
                  amount: 3831
                  descriptor: COFFEE SHOP
                  pan: '4111111289144142'
                  status: FINANCIAL_CREDIT_AUTHORIZATION
            schema:
              properties:
                amount:
                  description: Amount (in cents) to authorize. For credit authorizations and financial credit authorizations, any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction. For balance inquiries, this field must be set to 0.
                  minimum: 0
                  type: integer
                descriptor:
                  description: Merchant descriptor.
                  example: COFFEE SHOP
                  maxLength: 25
                  minLength: 1
                  type: string
                mcc:
                  description: |
                    Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.
                    Supported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).
                  example: '5812'
                  type: string
                merchant_acceptor_id:
                  description: Unique identifier to identify the payment card acceptor.
                  example: OODKZAPJVN4YS7O
                  maxLength: 15
                  minLength: 1
                  type: string
                merchant_amount:
                  description: Amount of the transaction to be simulated in currency specified in merchant_currency, including any acquirer fees.
                  type: integer
                merchant_currency:
                  description: '3-digit alphabetic ISO 4217 currency code. Note: Simulator only accepts USD, GBP, EUR and defaults to GBP if another ISO 4217 code is provided'
                  example: GBP
                  type: string
                pan:
                  description: Sixteen digit card number.
                  example: '4111111289144142'
                  maxLength: 16
                  minLength: 16
                  type: string
                partial_approval_capable:
                  description: |
                    Set to true if the terminal is capable of partial approval otherwise false.
                    Partial approval is when part of a transaction is approved and another
                    payment must be used for the remainder.
                  type: boolean
                status:
                  default: AUTHORIZATION
                  description: |
                    Type of event to simulate.
                    * `AUTHORIZATION` is a dual message purchase authorization, meaning a subsequent clearing step is required to settle the transaction.
                    * `BALANCE_INQUIRY` is a $0 authorization that includes a request for the balance held on the card, and is most typically seen when a cardholder requests to view a card's balance at an ATM.
                    * `CREDIT_AUTHORIZATION` is a dual message request from a merchant to authorize a refund or credit, meaning a subsequent clearing step is required to settle the transaction.
                    * `FINANCIAL_AUTHORIZATION` is a single message request from a merchant to debit funds immediately (such as an ATM withdrawal), and no subsequent clearing is required to settle the transaction.
                    * `FINANCIAL_CREDIT_AUTHORIZATION` is a single message request from a merchant to credit funds immediately, and no subsequent clearing is required to settle the transaction.
                  enum:
                    - AUTHORIZATION
                    - BALANCE_INQUIRY
                    - CREDIT_AUTHORIZATION
                    - FINANCIAL_AUTHORIZATION
                    - FINANCIAL_CREDIT_AUTHORIZATION
                  example: AUTHORIZATION
                  type: string
              required:
                - amount
                - descriptor
                - pan
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                  token:
                    description: A unique token to reference this transaction with later calls to void or clear the authorization.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate authorization
      tags:
        - Transaction
  /v1/simulate/clearing:
    post:
      description: |
        Clears an existing authorization. After this event, the transaction is no longer pending.

        If no `amount` is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.
      operationId: postSimulateClearing
      requestBody:
        content:
          application/json:
            examples:
              simulateClear:
                summary: Simulate settling a transaction
                value:
                  amount: 0
                  token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
            schema:
              properties:
                amount:
                  description: |
                    Amount (in cents) to complete. Typically this will match the original authorization, but may be more or less.

                    If no amount is supplied to this endpoint, the amount of the transaction will be captured. Any transaction that has any amount completed at all do not have access to this behavior.
                  type: integer
                token:
                  description: The transaction token returned from the /v1/simulate/authorize response.
                  format: uuid
                  type: string
              required:
                - token
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: 3ec51ef1-b68d-4243-be6c-2204229b09cf
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate clearing transaction
      tags:
        - Transaction
  /v1/simulate/credit_authorization_advice:
    post:
      description: |
        Simulates a credit authorization advice message from the payment network.
        This message indicates that a credit authorization was approved on your behalf by the network.
      operationId: postSimulateCreditAuthorizationAdvice
      requestBody:
        content:
          application/json:
            examples:
              simulateCreditAuthorizationAdvice:
                summary: Simulate a credit authorization advice message
                value:
                  amount: 3831
                  descriptor: COFFEE SHOP
                  merchant_acceptor_id: XRKGDPOWEWQRRWU
                  pan: '4111111289144142'
            schema:
              properties:
                amount:
                  description: Amount (in cents). Any value entered will be converted into a negative amount in the simulated transaction. For example, entering 100 in this field will appear as a -100 amount in the transaction.
                  minimum: 0
                  type: integer
                descriptor:
                  description: Merchant descriptor.
                  example: COFFEE SHOP
                  maxLength: 25
                  minLength: 1
                  type: string
                mcc:
                  description: |
                    Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.
                    Supported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).
                  example: '5812'
                  type: string
                merchant_acceptor_id:
                  description: Unique identifier to identify the payment card acceptor.
                  example: XRKGDPOWEWQRRWU
                  maxLength: 15
                  minLength: 1
                  type: string
                pan:
                  description: Sixteen digit card number.
                  example: '4111111289144142'
                  maxLength: 16
                  minLength: 16
                  type: string
              required:
                - amount
                - descriptor
                - pan
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                  token:
                    description: A unique token to reference this transaction.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/SimulateAuthorizationFailure'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate credit authorization advice
      tags:
        - Transaction
  /v1/simulate/event_subscriptions/{event_subscription_token}/send_example:
    post:
      description: Send an example message for event.
      operationId: sendEventSubscriptionExample
      parameters:
        - in: path
          name: event_subscription_token
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event_type:
                  description: Event type to send example message for.
                  enum:
                    - account_holder.created
                    - account_holder.updated
                    - account_holder.verification
                    - auth_rules.performance_report.created
                    - balance.updated
                    - book_transfer_transaction.created
                    - card.created
                    - card.renewed
                    - card.reissued
                    - card.shipped
                    - card_transaction.updated
                    - digital_wallet.tokenization_approval_request
                    - digital_wallet.tokenization_result
                    - digital_wallet.tokenization_two_factor_authentication_code
                    - digital_wallet.tokenization_two_factor_authentication_code_sent
                    - digital_wallet.tokenization_updated
                    - dispute.updated
                    - dispute_evidence.upload_failed
                    - external_bank_account.created
                    - external_bank_account.updated
                    - external_payment.created
                    - external_payment.updated
                    - financial_account.created
                    - financial_account.updated
                    - loan_tape.created
                    - loan_tape.updated
                    - management_operation.created
                    - management_operation.updated
                    - payment_transaction.created
                    - payment_transaction.updated
                    - settlement_report.updated
                    - statements.created
                    - three_ds_authentication.created
                    - tokenization.approval_request
                    - tokenization.result
                    - tokenization.two_factor_authentication_code
                    - tokenization.two_factor_authentication_code_sent
                    - tokenization.updated
                  type: string
              type: object
      responses:
        '202':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Send event type example message
      tags:
        - Event
  /v1/simulate/payments/receipt:
    post:
      description: Simulates a receipt of a Payment.
      operationId: simulatePaymentsReceipt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_receipt_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_payment_response'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate receipt
      tags:
        - Payment
  /v1/simulate/payments/release:
    post:
      description: Simulates a release of a Payment.
      operationId: simulatePaymentsRelease
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_origination_release_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_payment_response'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate release payment
      tags:
        - Payment
  /v1/simulate/payments/return:
    post:
      description: Simulates a return of a Payment.
      operationId: simulatePaymentsReturn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_origination_return_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_payment_response'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate return payment
      tags:
        - Payment
  /v1/simulate/payments/{payment_token}/action:
    post:
      description: Simulate payment lifecycle event
      operationId: simulatePaymentAction
      parameters:
        - in: path
          name: payment_token
          required: true
          schema:
            format: uuid
            title: Payment Token
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_action_request'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_payment_response'
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate payment lifecycle event
      tags:
        - Payment
  /v1/simulate/return:
    post:
      description: |
        Returns (aka refunds) an amount back to a card. Returns are cleared immediately and do not spend time in a `PENDING` state.
      operationId: postSimulateReturn
      requestBody:
        content:
          application/json:
            examples:
              simulateReturn:
                summary: Simulate a return
                value:
                  amount: 3831
                  descriptor: COFFEE SHOP
                  pan: '4111111289144142'
            schema:
              properties:
                amount:
                  description: Amount (in cents) to authorize.
                  minimum: 0
                  type: integer
                descriptor:
                  description: Merchant descriptor.
                  example: COFFEE SHOP
                  maxLength: 25
                  minLength: 1
                  type: string
                pan:
                  description: Sixteen digit card number.
                  example: '4111111289144142'
                  maxLength: 16
                  minLength: 16
                  type: string
              required:
                - amount
                - descriptor
                - pan
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                  token:
                    description: A unique token to reference this transaction.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate return
      tags:
        - Transaction
  /v1/simulate/return_reversal:
    post:
      description: |
        Voids a settled credit transaction – i.e., a transaction with a negative amount and `SETTLED` status. These can be credit authorizations that have already cleared or financial credit authorizations.
      operationId: postSimulateReturnReversal
      requestBody:
        content:
          application/json:
            examples:
              simulateReturnReversal:
                summary: Simulate a return reversal
                value:
                  token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
            schema:
              properties:
                token:
                  description: The transaction token returned from the /v1/simulate/authorize response.
                  format: uuid
                  type: string
              required:
                - token
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: d31645af-da9e-4952-b7dc-3ffb06618b39
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate return reversal
      tags:
        - Transaction
  /v1/simulate/tokenizations:
    post:
      description: |
        This endpoint is used to simulate a card's tokenization in the Digital Wallet and merchant tokenization ecosystem.
      operationId: postSimulateTokenizations
      requestBody:
        content:
          application/json:
            examples:
              simulateTokenizations:
                summary: Simulates a card's tokenization
                value:
                  account_score: 5
                  cvv: '776'
                  device_score: 5
                  expiration_date: 08/29
                  pan: '4111111289144142'
                  tokenization_source: APPLE_PAY
                  wallet_recommended_decision: APPROVED
            schema:
              properties:
                account_score:
                  default: 5
                  description: The account score (1-5) that represents how the Digital Wallet's view on how reputable an end user's account is.
                  type: integer
                cvv:
                  description: The three digit cvv for the card.
                  example: '776'
                  maxLength: 3
                  minLength: 3
                  type: string
                device_score:
                  default: 5
                  description: The device score (1-5) that represents how the Digital Wallet's view on how reputable an end user's device is.
                  type: integer
                entity:
                  description: Optional field to specify the token requestor name for a merchant token simulation. Ignored when tokenization_source is not MERCHANT.
                  type: string
                expiration_date:
                  description: The expiration date of the card in 'MM/YY' format.
                  maxLength: 5
                  minLength: 5
                  type: string
                pan:
                  description: The sixteen digit card number.
                  example: '4111111289144142'
                  maxLength: 16
                  minLength: 16
                  type: string
                tokenization_source:
                  description: The source of the tokenization request.
                  enum:
                    - APPLE_PAY
                    - GOOGLE
                    - SAMSUNG_PAY
                    - MERCHANT
                  type: string
                wallet_recommended_decision:
                  default: APPROVED
                  description: The decision that the Digital Wallet's recommend
                  enum:
                    - APPROVED
                    - DECLINED
                    - REQUIRE_ADDITIONAL_AUTHENTICATION
                  type: string
              required:
                - cvv
                - expiration_date
                - pan
                - tokenization_source
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                created_at: '2023-08-28T15:57:14.578051'
                events:
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: TOKEN_ACTIVATED
                    token: a690b617-d3d4-4976-82f6-901f817ad98a
                    type: TOKENIZATION_UPDATED
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: APPROVED
                    token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                    type: TOKENIZATION_AUTHORIZATION
                status: ACTIVE
                token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                tokenization_channel: DIGITAL_WALLET
                token_requestor_name: APPLE_PAY
                token_unique_reference: de25183f-6121-4ce5-8f2e-16b7fb07f252
                updated_at: '2023-08-28T15:57:14.578051'
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Tokenization'
                    type: array
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate a card's tokenization
      tags:
        - Tokenization
  /v1/simulate/void:
    post:
      description: |
        Voids an existing, uncleared (aka pending) authorization. If amount is not sent the full amount will be voided. Cannot be used on partially completed transactions, but can be used on partially voided transactions. _Note that simulating an authorization expiry on credit authorizations or credit authorization advice is not currently supported but will be added soon._
      operationId: postSimulateVoid
      requestBody:
        content:
          application/json:
            examples:
              simulateAuthorizationExpiry:
                summary: Simulate expiring a transaction
                value:
                  amount: 100
                  token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
                  type: AUTHORIZATION_EXPIRY
              simulateAuthorizationReversal:
                summary: Simulate reversing a transaction
                value:
                  amount: 100
                  token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
                  type: AUTHORIZATION_REVERSAL
            schema:
              properties:
                amount:
                  description: Amount (in cents) to void. Typically this will match the original authorization, but may be less.
                  minimum: 0
                  type: integer
                token:
                  description: The transaction token returned from the /v1/simulate/authorize response.
                  format: uuid
                  type: string
                type:
                  default: AUTHORIZATION_REVERSAL
                  description: |
                    Type of event to simulate. Defaults to `AUTHORIZATION_REVERSAL`.

                    * `AUTHORIZATION_EXPIRY` indicates authorization has expired and been reversed by Lithic.
                    * `AUTHORIZATION_REVERSAL` indicates authorization was reversed by the merchant.
                  enum:
                    - AUTHORIZATION_EXPIRY
                    - AUTHORIZATION_REVERSAL
                  example: AUTHORIZATION_EXPIRY
                  type: string
              required:
                - token
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                debugging_request_id: 3ec51ef1-b68d-4243-be6c-2204229b09cf
              schema:
                properties:
                  debugging_request_id:
                    description: Debugging request ID to share with Lithic Support team.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate void transaction
      tags:
        - Transaction
  /v1/simulate/account_holders/enrollment_review:
    post:
      summary: Simulate an account holder's enrollment review
      description: ' Simulates an enrollment review for an account holder. This endpoint is only applicable for workflows that may required intervention such as `KYB_BASIC` or `KYC_ADVANCED`. '
      operationId: simulateAccountHolderEnrollmentReview
      requestBody:
        content:
          application/json:
            examples:
              simulateAcceptedReviewRequest:
                summary: Simulate an accepted enrollment review request
                value:
                  account_holder_token: 1415964d-4400-4d79-9fb3-eee0faaee4e4
                  status: ACCEPTED
                  status_reasons: []
              simulateRejectedReviewRequest:
                summary: Simulate a rejected enrollment review request
                value:
                  account_holder_token: b8d0cdd2-182c-4623-b104-9f50808b8373
                  status: REJECTED
                  status_reasons:
                    - PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
            schema:
              $ref: '#/components/schemas/simulate-enrollment-review-request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account-holder-response'
          description: OK
        '400':
          $ref: '#/components/responses/exception-responses_responses-BadRequest'
        '401':
          $ref: '#/components/responses/responses-Unauthorized'
        '404':
          $ref: '#/components/responses/exception-responses_responses-NotFound'
        '409':
          $ref: '#/components/responses/responses-Conflict'
        '429':
          $ref: '#/components/responses/responses-TooManyRequests'
      tags:
        - Account Holder
  /v1/simulate/account_holders/enrollment_document_review:
    post:
      summary: Simulate an account holder document upload's review
      description: Simulates a review for an account holder document upload.
      operationId: simulateAccountHolderEnrollmentDocumentReview
      requestBody:
        content:
          application/json:
            examples:
              simulateUploadedReviewRequest:
                summary: Simulate an uploaded enrollment document upload review request
                value:
                  document_upload_token: b11cd67b-0a52-4180-8365-314f3def5426
                  status: UPLOADED
              simulateAcceptedReviewRequest:
                summary: Simulate an accepted enrollment document upload review request
                value:
                  document_upload_token: 70bde493-66a7-454b-8e79-51a0d976a7d2
                  status: ACCEPTED
              simulateRejectedReviewRequest:
                summary: Simulate a rejected enrollment document upload review request
                value:
                  document_upload_token: 30a8fff6-941f-4143-9b7b-e7ac4cbeb91f
                  status: REJECTED
                  status_reason: DOCUMENT_MISSING_REQUIRED_DATA
              simulatePartialApprovalReviewRequest:
                summary: Simulates a partial approval enrollment document upload review request
                value:
                  document_upload_token: 30a8fff6-941f-4143-9b7b-e7ac4cbeb91f
                  status: PARTIAL_APPROVAL
                  status_reason: DOCUMENT_MISSING_REQUIRED_DATA
                  accepted_entity_status_reasons:
                    - PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
            schema:
              $ref: '#/components/schemas/simulate-enrollment-document-review-request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: OK
        '400':
          $ref: '#/components/responses/exception-responses_responses-BadRequest'
        '401':
          $ref: '#/components/responses/responses-Unauthorized'
        '404':
          $ref: '#/components/responses/exception-responses_responses-NotFound'
        '409':
          $ref: '#/components/responses/responses-Conflict'
        '429':
          $ref: '#/components/responses/responses-TooManyRequests'
      tags:
        - Account Holder
  /v1/status:
    get:
      description: Status of api
      operationId: getStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                type: object
          description: Endpoint for users to check whether they can reach the api.
      security:
        - {}
      summary: API status check
      tags:
        - Status
  /v1/three_ds_authentication/simulate:
    post:
      description: |
        Simulates a 3DS authentication request from the payment network as if it came from an ACS. If you're configured for 3DS Customer Decisioning, simulating authentications requires your customer decisioning endpoint to be set up properly (respond with a valid JSON).
      operationId: postSimulateAuthentication
      requestBody:
        content:
          application/json:
            examples:
              simulateAuthentication:
                summary: Simulate an authentication
                value:
                  merchant:
                    country: USA
                    id: OODKZAPJVN4YS7O
                    mcc: '5812'
                    name: COFFEE SHOP
                  pan: '4111111289144142'
                  transaction:
                    amount: 100
                    currency: USD
                  card_expiry_check: MATCH
            schema:
              properties:
                merchant:
                  properties:
                    country:
                      description: Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)
                      example: USA
                      type: string
                    id:
                      description: Unique identifier to identify the payment card acceptor. Corresponds to `merchant_acceptor_id` in authorization.
                      example: OODKZAPJVN4YS7O
                      maxLength: 15
                      minLength: 1
                      type: string
                    mcc:
                      description: |
                        Merchant category code for the transaction to be simulated. A four-digit number listed in ISO 18245.
                        Supported merchant category codes can be found [here](https://docs.lithic.com/docs/transactions#merchant-category-codes-mccs).
                      example: '5812'
                      type: string
                    name:
                      description: Merchant descriptor, corresponds to `descriptor` in authorization.
                      example: COFFEE SHOP
                      maxLength: 25
                      minLength: 1
                      type: string
                  required:
                    - country
                    - id
                    - mcc
                    - name
                  type: object
                pan:
                  description: Sixteen digit card number.
                  example: '4111111289144142'
                  maxLength: 16
                  minLength: 16
                  type: string
                transaction:
                  properties:
                    amount:
                      description: Amount (in cents) to authenticate.
                      minimum: 0
                      type: integer
                    currency:
                      description: 3-digit alphabetic ISO 4217 currency code.
                      example: GBP
                      type: string
                  required:
                    - amount
                    - currency
                  type: object
                card_expiry_check:
                  description: |
                    When set will use the following values as part of the Simulated Authentication. When not set defaults to MATCH
                  enum:
                    - MATCH
                    - MISMATCH
                    - NOT_PRESENT
                  type: string
              required:
                - merchant
                - pan
                - transaction
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  token:
                    description: A unique token to reference this transaction with later calls to void or clear the authorization.
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate 3DS authentication
      tags:
        - 3DS
  /v1/three_ds_decisioning/simulate/challenge:
    post:
      description: "Simulates a 3DS authentication challenge request from the payment network as if it came from an ACS. Requires being configured for 3DS Customer Decisioning, and enrolled with Lithic's Challenge solution. "
      requestBody:
        content:
          application/json:
            example:
              token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
            schema:
              properties:
                token:
                  description: A unique token returned as part of a /v1/three_ds_authentication/simulate call that responded with a CHALLENGE_REQUESTED status.
                  format: uuid
                  type: string
                  required:
                    - token
      responses:
        '200':
          content:
            application/json:
              example:
                token: fabd829d-7f7b-4432-a8f2-07ea4889aaac
              schema:
                properties:
                  token:
                    description: A unique token to reference this transaction with later calls to void or clear the authorization. This token is used in /v1/three_ds_decisioning/simulate/challenge_response to Approve or Decline the authentication
                    format: uuid
                    type: string
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate 3DS authentication challenge
      tags:
        - 3DS
  /v1/three_ds_decisioning/simulate/challenge_response:
    post:
      description: Endpoint for responding to a 3DS Challenge initiated by a call to /v1/three_ds_decisioning/simulate/challenge
      operationId: postSimulateAuthenticationChallengeResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeResponse'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Simulate response to a 3DS authentication challenge
      tags:
        - 3DS
  /v1/three_ds_authentication/{three_ds_authentication_token}:
    get:
      description: Get 3DS Authentication by token
      operationId: getThreeDsAuthenticationByToken
      parameters:
        - description: 3DS Authentication Token
          in: path
          name: three_ds_authentication_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreeDSAuthentication'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get 3DS authentication
      tags:
        - 3DS
  /v1/three_ds_decisioning/secret:
    get:
      description: |
        Retrieve the 3DS Decisioning HMAC secret key. If one does not exist for your program yet, calling this endpoint will create one for you. The headers (which you can use to verify 3DS Decisioning requests) will begin appearing shortly after calling this endpoint for the first time. See [this page](https://docs.lithic.com/docs/3ds-decisioning#3ds-decisioning-hmac-secrets) for more detail about verifying 3DS Decisioning requests.
      operationId: getThreeDsDecisioningSecret
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  secret:
                    description: The 3DS Decisioning HMAC secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
                    type: string
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retrieve the 3DS Decisioning HMAC secret key
      tags:
        - 3DS
  /v1/three_ds_decisioning/secret/rotate:
    post:
      description: |
        Generate a new 3DS Decisioning HMAC secret key. The old secret key will be deactivated 24 hours after a successful request to this endpoint. Make a [`GET /three_ds_decisioning/secret`](https://docs.lithic.com/reference/getthreedsdecisioningsecret) request to retrieve the new secret key.
      operationId: rotateThreeDsDecisioningSecret
      responses:
        '204':
          description: We have successfully rotated the secret key.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Rotate the 3DS Decisioning HMAC secret key
      tags:
        - 3DS
  /v1/three_ds_decisioning/challenge_response:
    post:
      description: Card program's response to a 3DS Challenge Request (CReq)
      summary: Respond to a Challenge Request
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeResponse'
      responses:
        '200':
          description: Challenge Response was received and forwarded to the ACS
        '400':
          description: Invalid request body
        '404':
          description: The provided token was not found
        '500':
          description: Lithic Error
      tags:
        - 3DS
  /v1/tokenization_decisioning/secret:
    get:
      description: |
        Retrieve the Tokenization Decisioning secret key. If one does not exist your program yet, calling this endpoint will create one for you. The headers of the Tokenization Decisioning request will contain a hmac signature which you can use to verify requests originate from Lithic. See [this page](https://docs.lithic.com/docs/events-api#verifying-webhooks) for more detail about verifying Tokenization Decisioning requests.
      operationId: getTokenizationDecisioningSecret
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  secret:
                    description: The Tokenization Decisioning HMAC secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
                    type: string
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Retrieve the Tokenization Decisioning HMAC secret key
      tags:
        - Tokenization
  /v1/tokenization_decisioning/secret/rotate:
    post:
      description: |
        Generate a new Tokenization Decisioning secret key. The old Tokenization Decisioning secret key will be deactivated 24 hours after a successful request to this endpoint.
      operationId: rotateTokenizationDecisioningSecret
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  secret:
                    description: The new Tokenization Decisioning HMAC secret
                    example: whsec_1NDsYinMGr951KuDEaj78VtWzlyPaOnwUVagFiWIPJs=
                    type: string
                type: object
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Rotate the Tokenization Decisioning HMAC secret key
      tags:
        - Tokenization
  /v1/tokenizations:
    get:
      description: List card tokenizations
      operationId: getTokenizations
      parameters:
        - description: Filters for tokenizations associated with a specific account.
          in: query
          name: account_token
          schema:
            format: uuid
            type: string
        - description: Filter for tokenizations created after this date.
          in: query
          name: begin
          schema:
            format: date
            type: string
        - description: Filters for tokenizations associated with a specific card.
          in: query
          name: card_token
          schema:
            format: uuid
            type: string
        - description: Filter for tokenizations created before this date.
          in: query
          name: end
          schema:
            format: date
            type: string
        - description: Filter for tokenizations by tokenization channel. If this is not specified, only DIGITAL_WALLET tokenizations will be returned.
          in: query
          name: tokenization_channel
          schema:
            enum:
              - DIGITAL_WALLET
              - MERCHANT
              - ALL
            type: string
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              example:
                data:
                  - account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                    card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                    created_at: '2023-08-28T15:57:14.578051'
                    events:
                      - created_at: '2023-09-13T16:01:13.643241'
                        result: TOKEN_ACTIVATED
                        token: a690b617-d3d4-4976-82f6-901f817ad98a
                        type: TOKENIZATION_UPDATED
                      - created_at: '2023-09-13T16:01:13.643241'
                        result: APPROVED
                        token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                        type: TOKENIZATION_AUTHORIZATION
                    status: ACTIVE
                    token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                    token_requestor_name: APPLE_PAY
                    token_unique_reference: DM4MMC0000332872ef1029f38fa0184b5c9260383da192b22
                    updated_at: '2023-08-28T15:57:14.578051'
                has_more: false
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Tokenization'
                    type: array
                  has_more:
                    type: boolean
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get a card's tokenizations
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}:
    get:
      description: Get tokenization
      operationId: getTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                created_at: '2023-08-28T15:57:14.578051'
                events:
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: TOKEN_ACTIVATED
                    token: a690b617-d3d4-4976-82f6-901f817ad98a
                    type: TOKENIZATION_UPDATED
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: APPROVED
                    token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                    type: TOKENIZATION_AUTHORIZATION
                status: ACTIVE
                token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                token_requestor_name: APPLE_PAY
                token_unique_reference: DM4MMC0000332872ef1029f38fa0184b5c9260383da192b22
                updated_at: '2023-08-28T15:57:14.578051'
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Tokenization'
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get a single card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/pause:
    post:
      description: |-
        This endpoint is used to ask the card network to pause a tokenization. A successful response indicates that the request was successfully delivered to the card network. When the card network pauses the tokenization, the state will be updated and a tokenization.updated event will be sent. The endpoint may only be used on tokenizations with status `ACTIVE`.
        A paused token will prevent merchants from sending authorizations, and is a temporary status that can be changed.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: pauseTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content: {}
          description: Pause tokenization request successfully delivered to the card network.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Pause a card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/unpause:
    post:
      description: |-
        This endpoint is used to ask the card network to unpause a tokenization. A successful response indicates that the request was successfully delivered to the card network. When the card network unpauses the tokenization, the state will be updated and a tokenization.updated event will be sent. The endpoint may only be used on tokenizations with status `PAUSED`.
        This will put the tokenization in an active state, and transactions may resume.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: unpauseTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content: {}
          description: Unpause tokenization request successfully delivered to the card network.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Unpause a card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/deactivate:
    post:
      description: |-
        This endpoint is used to ask the card network to deactivate a tokenization. A successful response indicates that the request was successfully delivered to the card network. When the card network deactivates the tokenization, the state will be updated and a tokenization.updated event will be sent.
        Authorizations attempted with a deactivated tokenization will be blocked and will not be forwarded to Lithic from the network. Deactivating the token is a permanent operation. If the target is a digital wallet tokenization, it will be removed from its device.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: deactivateTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content: {}
          description: Deactivate tokenization request successfully delivered to the card network.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Deactivate a card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/activate:
    post:
      description: |-
        This endpoint is used to ask the card network to activate a tokenization. A successful response indicates that the request was successfully delivered to the card network. When the card network activates the tokenization, the state will be updated and a tokenization.updated event will be sent. The endpoint may only be used on digital wallet tokenizations with status `INACTIVE`, `PENDING_ACTIVATION`, or `PENDING_2FA`.
        This will put the tokenization in an active state, and transactions will be allowed.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: activateTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          content: {}
          description: Activate tokenization request successfully delivered to the card network.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Activate a card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/resend_activation_code:
    post:
      description: |-
        This endpoint is used to ask the card network to send another activation code to a cardholder that has already tried tokenizing a card. A successful response indicates that the request was successfully delivered to the card network.
        The endpoint may only be used on Mastercard digital wallet tokenizations with status `INACTIVE`, `PENDING_ACTIVATION`, or `PENDING_2FA`. The network will send a new activation code to the one of the contact methods provided in the initial tokenization flow. If a user fails to enter the code correctly 3 times, the contact method will not be eligible for resending the activation code, and the cardholder must restart the provision process.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: resendActivationCodeForTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            examples:
              resendActivationCodeSms:
                summary: Resend activation code to SMS contact method
                value:
                  activation_method_type: TEXT_TO_CARDHOLDER_NUMBER
            schema:
              properties:
                activation_method_type:
                  description: |-
                    The communication method that the user has selected to use to receive the authentication code.
                    Supported Values: Sms = "TEXT_TO_CARDHOLDER_NUMBER". Email = "EMAIL_TO_CARDHOLDER_ADDRESS"
                  enum:
                    - EMAIL_TO_CARDHOLDER_ADDRESS
                    - TEXT_TO_CARDHOLDER_NUMBER
                  type: string
      responses:
        '200':
          content: {}
          description: Resend activation code request successfully delivered to the card network.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Resend activation code for a card tokenization
      tags:
        - Tokenization
  /v1/tokenizations/{tokenization_token}/update_digital_card_art:
    post:
      description: |-
        This endpoint is used update the digital card art for a digital wallet tokenization. A successful response indicates that the card network has updated the tokenization's art, and the tokenization's `digital_cart_art_token` field was updated.
        The endpoint may not be used on tokenizations with status `DEACTIVATED`.
        Note that this updates the art for one specific tokenization, not all tokenizations for a card. New tokenizations for a card will be created with the art referenced in the card object's `digital_card_art_token` field.
        Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
      operationId: updateDigitalCardArtForTokenization
      parameters:
        - description: Tokenization token
          in: path
          name: tokenization_token
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                digital_card_art_token:
                  description: Specifies the digital card art to be displayed in the user’s digital wallet for a tokenization. This artwork must be approved by the network and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
                  example: 00000000-0000-0000-1000-000000000000
                  format: uuid
                  type: string
      responses:
        '200':
          content:
            application/json:
              example:
                account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                created_at: '2023-08-28T15:57:14.578051'
                digital_card_art_token: 0ca42d08-12ae-4bc6-bd00-787e6df53cff
                events:
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: TOKEN_ACTIVATED
                    token: a690b617-d3d4-4976-82f6-901f817ad98a
                    type: TOKENIZATION_UPDATED
                  - created_at: '2023-09-13T16:01:13.643241'
                    result: APPROVED
                    token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                    type: TOKENIZATION_AUTHORIZATION
                status: ACTIVE
                token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                token_requestor_name: APPLE_PAY
                token_unique_reference: DM4MMC0000332872ef1029f38fa0184b5c9260383da192b22
                updated_at: '2023-08-28T15:57:14.578051'
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Tokenization'
                type: object
          description: Card art successfully updated at the network and Lithic levels.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Update digital card art for a card tokenization
      tags:
        - Tokenization
  /v1/transactions:
    get:
      description: |
        List card transactions. All amounts are in the smallest unit of their respective currency (e.g., cents for USD) and inclusive of any acquirer fees.
      operationId: getTransactions
      parameters:
        - description: |
            Filters for transactions associated with a specific account.
          in: query
          name: account_token
          schema:
            format: uuid
            type: string
        - description: Filters for transactions associated with a specific card.
          in: query
          name: card_token
          schema:
            format: uuid
            type: string
        - description: Filters for transactions using transaction result field. Can filter by `APPROVED`, and `DECLINED`.
          in: query
          name: result
          schema:
            enum:
              - APPROVED
              - DECLINED
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_transactions_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List card transactions
      tags:
        - Transaction
  /v1/transactions/{transaction_token}:
    get:
      description: |
        Get a specific card transaction. All amounts are in the smallest unit of their respective currency (e.g., cents for USD).
      operationId: getTransactionByToken
      parameters:
        - $ref: '#/components/parameters/transactionToken'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_transaction'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get card transaction
      tags:
        - Transaction
  /v1/transfer:
    post:
      deprecated: true
      description: Transfer funds between two financial accounts or between a financial account and card
      operationId: postTransfer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: Amount to be transferred in the currency’s smallest unit (e.g., cents for USD). This should always be a positive value.
                  type: integer
                from:
                  description: Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.
                  format: uuid
                  type: string
                memo:
                  description: Optional descriptor for the transfer.
                  type: string
                to:
                  description: Globally unique identifier for the financial account or card that will receive the funds. Accepted type dependent on the program's use case.
                  format: uuid
                  type: string
                token:
                  description: Customer-provided token that will serve as an idempotency token. This token will become the transaction token.
                  format: uuid
                  type: string
              required:
                - amount
                - from
                - to
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Transfer funds within Lithic
      tags:
        - Book Transfer
  /v1/book_transfers:
    get:
      description: List book transfers
      parameters:
        - description: Book Transfer category to be returned.
          in: query
          name: category
          schema:
            enum:
              - BALANCE_OR_FUNDING
              - FEE
              - REWARD
              - ADJUSTMENT
              - DERECOGNITION
              - DISPUTE
              - INTERNAL
            type: string
        - description: Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.
          in: query
          name: financial_account_token
          schema:
            format: uuid
            type: string
        - in: query
          name: business_account_token
          required: false
          schema:
            format: uuid
            title: Business Account Token
            type: string
        - in: query
          name: account_token
          required: false
          schema:
            format: uuid
            title: Account Token
            type: string
        - description: Book transfer result to be returned.
          in: query
          name: result
          schema:
            enum:
              - APPROVED
              - DECLINED
            type: string
        - description: Book transfer status to be returned.
          in: query
          name: status
          schema:
            enum:
              - DECLINED
              - SETTLED
            type: string
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      operationId: getBookTransfers
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BookTransferResponse'
                    title: Data
                    type: array
                  has_more:
                    title: More data exists
                    type: boolean
                required:
                  - data
                  - has_more
                type: object
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List book transfers
      tags:
        - Book Transfer
    post:
      description: Book transfer funds between two financial accounts or between a financial account and card
      operationId: postBookTransfers
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: Amount to be transferred in the currency’s smallest unit (e.g., cents for USD). This should always be a positive value.
                  type: integer
                  minimum: 1
                category:
                  description: Category of the book transfer
                  enum:
                    - ADJUSTMENT
                    - BALANCE_OR_FUNDING
                    - DERECOGNITION
                    - DISPUTE
                    - FEE
                    - REWARD
                    - TRANSFER
                  type: string
                from_financial_account_token:
                  description: Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.
                  format: uuid
                  type: string
                memo:
                  description: Optional descriptor for the transfer.
                  type: string
                  maxLength: 512
                subtype:
                  description: The program specific subtype code for the specified category/type.
                  type: string
                to_financial_account_token:
                  description: Globally unique identifier for the financial account or card that will receive the funds. Accepted type dependent on the program's use case.
                  format: uuid
                  type: string
                token:
                  description: Customer-provided token that will serve as an idempotency token. This token will become the transaction token.
                  format: uuid
                  type: string
                type:
                  description: Type of book_transfer
                  enum:
                    - ATM_WITHDRAWAL
                    - ATM_DECLINE
                    - INTERNATIONAL_ATM_WITHDRAWAL
                    - INACTIVITY
                    - STATEMENT
                    - MONTHLY
                    - QUARTERLY
                    - ANNUAL
                    - CUSTOMER_SERVICE
                    - ACCOUNT_MAINTENANCE
                    - ACCOUNT_ACTIVATION
                    - ACCOUNT_CLOSURE
                    - CARD_REPLACEMENT
                    - CARD_DELIVERY
                    - CARD_CREATE
                    - CURRENCY_CONVERSION
                    - INTEREST
                    - LATE_PAYMENT
                    - BILL_PAYMENT
                    - CASH_BACK
                    - ACCOUNT_TO_ACCOUNT
                    - CARD_TO_CARD
                    - DISBURSE
                    - BILLING_ERROR
                    - LOSS_WRITE_OFF
                    - EXPIRED_CARD
                    - EARLY_DERECOGNITION
                    - ESCHEATMENT
                    - INACTIVITY_FEE_DOWN
                    - PROVISIONAL_CREDIT
                    - DISPUTE_WON
                    - TRANSFER
                  type: string
              required:
                - amount
                - category
                - from_financial_account_token
                - subtype
                - to_financial_account_token
                - type
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransferResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create book transfer
      tags:
        - Book Transfer
  /v1/book_transfers/{book_transfer_token}:
    get:
      description: Get book transfer by token
      parameters:
        - description: Id of the book transfer to retrieve
          in: path
          name: book_transfer_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: getBookTransfer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransferResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get book transfer by token
      tags:
        - Book Transfer
  /v1/book_transfers/{book_transfer_token}/reverse:
    post:
      description: Reverse a book transfer
      parameters:
        - description: Id of the book transfer to retrieve
          in: path
          name: book_transfer_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: reverseBookTransfer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                memo:
                  description: Optional descriptor for the reversal.
                  type: string
                  maxLength: 512
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransferResponse'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Reverse book transfer
      tags:
        - Book Transfer
  /v1/external_payments:
    get:
      description: List external payments
      parameters:
        - description: External Payment category to be returned.
          in: query
          name: category
          schema:
            $ref: '#/components/schemas/external_payment_category'
        - description: Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.
          in: query
          name: financial_account_token
          schema:
            format: uuid
            type: string
        - in: query
          name: business_account_token
          required: false
          schema:
            format: uuid
            title: Business Account Token
            type: string
        - description: External Payment result to be returned.
          in: query
          name: result
          schema:
            $ref: '#/components/schemas/transaction_result'
        - description: Book transfer status to be returned.
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/transaction_status'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      operationId: getExternalPayments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payments_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List external payments
      tags:
        - External Payments
    post:
      description: Create external payment
      operationId: postExternalPayments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_external_payment_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create external payment
      tags:
        - External Payments
  /v1/external_payments/{external_payment_token}:
    get:
      description: Get external payment
      parameters:
        - description: Globally unique identifier for the external payment
          in: path
          name: external_payment_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: getExternalPayment
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get external payment
      tags:
        - External Payments
  /v1/external_payments/{external_payment_token}/settle:
    post:
      description: Settle external payment
      parameters:
        - description: Globally unique identifier for the external payment
          in: path
          name: external_payment_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: settleExternalPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_payment_action_with_progress_to_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Settle external payment
      tags:
        - External Payments
  /v1/external_payments/{external_payment_token}/release:
    post:
      description: Release external payment
      parameters:
        - description: Globally unique identifier for the external payment
          in: path
          name: external_payment_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: releaseExternalPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_payment_action_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Release external payment
      tags:
        - External Payments
  /v1/external_payments/{external_payment_token}/cancel:
    post:
      description: Cancel external payment
      parameters:
        - description: Globally unique identifier for the external payment
          in: path
          name: external_payment_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: cancelExternalPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_payment_action_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Cancel external payment
      tags:
        - External Payments
  /v1/external_payments/{external_payment_token}/reverse:
    post:
      description: Reverse external payment
      parameters:
        - description: Globally unique identifier for the external payment
          in: path
          name: external_payment_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: reverseExternalPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_payment_action_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_payment_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Reverse external payment
      tags:
        - External Payments
  /v1/management_operations:
    get:
      description: List management operations
      parameters:
        - description: Management operation category to be returned.
          in: query
          name: category
          schema:
            $ref: '#/components/schemas/management_operation_category'
        - description: Globally unique identifier for the financial account. Accepted type dependent on the program's use case.
          in: query
          name: financial_account_token
          schema:
            format: uuid
            type: string
        - in: query
          name: business_account_token
          required: false
          schema:
            format: uuid
            title: Business Account Token
            type: string
        - description: Management operation status to be returned.
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/transaction_status'
        - $ref: '#/components/parameters/beginTime'
        - $ref: '#/components/parameters/endingBefore'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/startingAfter'
      operationId: getManagementOperations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/management_operation_transactions_response'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: List management operations
      tags:
        - Management Operations
    post:
      description: Create management operation
      operationId: postManagementOperations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_management_operation_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/management_operation_transaction'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Create management operation
      tags:
        - Management Operations
  /v1/management_operations/{management_operation_token}:
    get:
      description: Get management operation
      parameters:
        - description: Globally unique identifier for the management operation
          in: path
          name: management_operation_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: getManagementOperation
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/management_operation_transaction'
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Get management operation
      tags:
        - Management Operations
  /v1/management_operations/{management_operation_token}/reverse:
    post:
      description: Reverse a management operation
      parameters:
        - description: Globally unique identifier for the management operation
          in: path
          name: management_operation_token
          required: true
          schema:
            format: uuid
            type: string
      operationId: reverseManagementOperation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/management_operation_action_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/management_operation_transaction'
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      summary: Reverse management operation
      tags:
        - Management Operations
webhooks:
  account_holder.created:
    post:
      description: Occurs when a new account_holder is created.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000001
                  created: '2023-09-26 16:41:40.530987'
                  event_type: account_holder.created
                  status: ACCEPTED
                  status_reason: []
                  token: 00000000-0000-0000-0000-000000000001
                  required_documents: []
                - account_token: 00000000-0000-0000-0000-000000000001
                  created: '2023-09-26 16:41:40.530987'
                  event_type: account_holder.created
                  status: PENDING_REVIEW
                  status_reason:
                    - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                  token: 00000000-0000-0000-0000-000000000001
                  required_documents:
                    - entity_token: 83cf25ae-c14f-4d10-9fa2-0119f36c7286
                      status_reasons:
                        - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                      valid_documents:
                        - EIN_LETTER
                        - TAX_RETURN
                        - CERTIFICATE_OF_GOOD_STANDING
                        - ARTICLES_OF_INCORPORATION
                        - ARTICLES_OF_ORGANIZATION
                        - CERTIFICATE_OF_FORMATION
                        - BYLAWS
                        - GOVERNMENT_BUSINESS_LICENSE
                        - PARTNERSHIP_AGREEMENT
                        - BANK_STATEMENT
                        - UTILITY_BILL_STATEMENT
              properties:
                account_token:
                  description: The token of the account that was created.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                created:
                  description: When the account_holder was created
                  format: date-time
                  type: string
                event_type:
                  description: The name of the event
                  enum:
                    - account_holder.created
                  example: account_holder.created
                  type: string
                status:
                  description: The status of the account_holder that was created.
                  enum:
                    - ACCEPTED
                    - PENDING_REVIEW
                  example: ACCEPTED
                  type: string
                status_reason:
                  items:
                    description: If status is not ACCEPTED, status_reason provides the reasons an account_holder is REJECTED or PENDING_REVIEW.
                    type: string
                  type: array
                token:
                  description: The token of the account_holder that was created.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                required_documents:
                  type: array
                  items:
                    $ref: '#/components/schemas/required-document'
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: account_holder.created
      tags:
        - Event Types
  account_holder.updated:
    post:
      description: Occurs when a new account_holder is updated.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - business_account_token: null
                  created: '2023-09-26 16:41:40.530938'
                  email: john@lithic.com
                  event_type: account_holder.updated
                  external_id: null
                  first_name: John
                  last_name: Appleseed
                  phone_number: 15555555555
                  token: 00000000-0000-0000-0000-000000000001
              properties:
                business_account_token:
                  description: If applicable, represents the business account token associated with the account_holder.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                created:
                  description: When the account_holder updated event was created
                  format: date-time
                  type: string
                email:
                  description: If updated, the newly updated email associated with the account_holder otherwise the existing email is provided.
                  example: johnny@lithic.com
                  type: string
                event_type:
                  description: The name of the event
                  enum:
                    - account_holder.updated
                  example: account_holder.updated
                  type: string
                external_id:
                  description: If applicable, represents the external_id associated with the account_holder.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                first_name:
                  description: If applicable, represents the account_holder's first name.
                  example: Johnny
                  type: string
                last_name:
                  description: If applicable, represents the account_holder's last name.
                  example: Appleseed
                  type: string
                legal_business_name:
                  description: If applicable, represents the account_holder's business name.
                  example: Lithic
                  type: string
                phone_number:
                  description: If updated, the newly updated phone_number associated with the account_holder otherwise the existing phone_number is provided.
                  example: '15555555555'
                  type: string
                token:
                  description: The token of the account_holder that was created.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: account_holder.updated
      tags:
        - Event Types
  account_holder.verification:
    post:
      description: Occurs when an asynchronous account_holder's verification is completed.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000001
                  created: '2023-09-26 16:41:40.530938'
                  event_type: account_holder.verification
                  status: ACCEPTED
                  status_reasons: []
                  token: 00000000-0000-0000-0000-000000000001
              properties:
                account_token:
                  description: The token of the account being verified.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                created:
                  description: When the account_holder verification status was updated
                  format: date-time
                  type: string
                event_type:
                  description: The name of the event
                  enum:
                    - account_holder.verification
                  example: account_holder.verification
                  type: string
                status:
                  description: The status of the account_holder that was created
                  enum:
                    - ACCEPTED
                    - PENDING_REVIEW
                    - REJECTED
                  example: ACCEPTED
                  type: string
                status_reasons:
                  items:
                    description: If status is not ACCEPTED, status_reasons provides the reasons an account_holder was REJECTED or is PENDING_REVIEW.
                    type: string
                  type: array
                token:
                  description: The token of the account_holder being verified.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: account_holder.verification
      tags:
        - Event Types
  account_holder_document.updated:
    post:
      description: Occurs when an account holder's document upload status has been updated
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_holder_token: 2b52494a-ae73-4ab1-97e8-2dd1d51d18b0
                  created: '2023-09-26 16:41:40.530987'
                  event_type: account_holder_document.updated
                  document_type: EIN_LETTER
                  entity_token: c5f2d594-d957-4781-8877-fbea31f5944a
                  required_document_uploads:
                    - accepted_entity_status_reasons: []
                      created: '2024-08-05 20:48:51.746833'
                      image_type: FRONT
                      rejected_entity_status_reasons: []
                      status: UPLOADED
                      status_reasons: []
                      token: 9e1d69a1-377b-463a-b991-01b3c81519b6
                      updated: '2024-08-05 21:08:23.635573'
                    - accepted_entity_status_reasons: []
                      created: 2024-08-04 001:32:44.113765
                      image_type: FRONT
                      rejected_entity_status_reasons:
                        - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
                      status: REJECTED
                      status_reasons:
                        - DOCUMENT_MISSING_REQUIRED_DATA
                      token: 9e1d69a1-377b-463a-b991-01b3c81519b6
                      updated: '2024-08-04 02:18:47.113773'
                  token: 9175a05c-a9da-4082-8e14-9296427ebba7
              properties:
                account_holder_token:
                  description: The token of the account_holder that the document belongs to
                  example: 2b52494a-ae73-4ab1-97e8-2dd1d51d18b0
                  format: uuid
                  type: string
                created:
                  description: When the account_holder was created
                  format: date-time
                  type: string
                event_type:
                  description: The name of the event
                  enum:
                    - account_holder_document.updated
                  example: account_holder_document.updated
                  type: string
                document_type:
                  $ref: '#/components/schemas/document-type'
                entity_token:
                  description: The token of the entity that the document belongs to
                  example: c5f2d594-d957-4781-8877-fbea31f5944a
                  format: uuid
                  type: string
                required_doucment_uploads:
                  items:
                    description: A document upload that belongs to the overall account holder document
                    properties:
                      created:
                        description: When the document upload was created
                        format: date-time
                        type: string
                      image_type:
                        description: The type of image that was uploaded
                        enum:
                          - FRONT
                          - BACK
                        type: string
                      status:
                        description: The status of the document upload
                        $ref: '#/components/schemas/document-upload-status'
                      status_reasons:
                        items:
                          description: If status is REJECTED, status_reasons provides the reasons the document was rejected.
                          type: string
                        type: array
                      accepted_entity_status_reasons:
                        items:
                          description: A list of status reasons associated with a KYB account holder that have been satisfied by the document upload
                          type: string
                        type: array
                      rejected_entity_status_reasons:
                        items:
                          description: A list of status reasons associated with a KYB account holder that have not been satisfied by the document upload
                          type: string
                        type: array
                      token:
                        description: The token of the document upload
                        format: uuid
                        type: string
                      updated:
                        description: When the document upload was last updated
                        format: date-time
                        type: string
                  type: array
                token:
                  description: The token of the account holder document
                  example: 9175a05c-a9da-4082-8e14-9296427ebba7
                  format: uuid
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: account_holder_document.updated
      tags:
        - Event Types
  asa.request:
    post:
      description: Auth Stream Access Request
      parameters:
        - $ref: '#/components/parameters/webhookId'
        - $ref: '#/components/parameters/webhookTimestamp'
        - $ref: '#/components/parameters/webhookSignature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asa-request'
      responses:
        '200':
          description: Return a HTTP 200 status to indicate that the ASA responder was able to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asa-response'
        5XX:
          description: Return a HTTP 5XX response to indicate processing failure. This will cause Lithic to immediately retry the request once.
      summary: Auth Stream Access Request
      tags:
        - Auth Stream Access (ASA)
  tokenization-decisioning.request:
    post:
      description: Tokenization Customer Decisioning Request
      parameters:
        - $ref: '#/components/parameters/webhookId'
        - $ref: '#/components/parameters/webhookTimestamp'
        - $ref: '#/components/parameters/webhookSignature'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokenization-decisioning-request'
      responses:
        '200':
          description: Return a HTTP 200 status to indicate that the Tokenization Responder was able to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenization-decisioning-response'
      summary: Tokenization Decisioning Request
      tags:
        - Tokenization
  auth_rules.performance_report.created:
    post:
      description: Authorization Rules performance report created.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/performance-report'
      summary: auth_rules.performance_report.created
      tags:
        - Event Types
  balance.updated:
    post:
      description: Financial Account Balance Update
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - data:
                    - available_amount: 10000
                      created: '2023-09-14T12:52:44Z'
                      currency: USD
                      last_transaction_event_token: 10265fe1-7058-451a-bfdf-db6f0ece177c
                      last_transaction_token: 1e338050-295e-477b-884a-4f87d7d4b648
                      pending_amount: 0
                      token: 1e338050-295e-477b-884a-4f87d7d4b648
                      total_amount: 10000
                      type: ISSUING
                      updated: '2023-09-14T12:52:44Z'
                - event_type: balance.updated
              properties:
                data:
                  items:
                    $ref: '#/components/schemas/FinancialAccountBalance'
                  type: array
                event_type:
                  description: The type of event that occurred.
                  enum:
                    - balance.updated
                  example: balance.updated
                  type: string
              required:
                - data
                - event_type
              type: object
      summary: balance.updated
      tags:
        - Event Types
  book_transfer_transaction.created:
    post:
      description: Occurs when a book transfer transaction is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/BookTransferResponse'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - book_transfer_transaction.created
                      example: book_transfer_transaction.created
                      type: string
                  type: object
              examples:
                - category: BALANCE_OR_FUNDING
                  created: '2023-09-14T12:52:44Z'
                  currency: USD
                  event_type: book_transfer_transaction.created
                  events:
                    - amount: 4103
                      created: '2023-09-14T12:52:44Z'
                      result: APPROVED
                      token: f274f723-b156-5b15-a96d-5ba8d5241b09
                      type: ACCOUNT_TO_ACCOUNT
                      subtype: CUSTOM
                      detailed_results:
                        - APPROVED
                      memo: Fund account
                  from_financial_account_token: b05c313e-35db-4b47-a33b-7b268d72b1f5
                  to_financial_account_token: 39ec6bf0-c101-520e-965a-a4fffce1d755
                  pending_amount: 0
                  result: APPROVED
                  settled_amount: 4103
                  status: SETTLED
                  token: 147595d7-45f4-4c91-a950-3436d16847e5
                  updated: '2023-09-14T12:52:44Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: book_transfer_transaction.created
      tags:
        - Event Types
  book_transfer_transaction.updated:
    post:
      description: Occurs when a book transfer transaction is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/BookTransferResponse'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - book_transfer_transaction.updated
                      example: book_transfer_transaction.updated
                      type: string
                  type: object
              examples:
                - category: BALANCE_OR_FUNDING
                  created: '2023-09-14T12:52:44Z'
                  currency: USD
                  event_type: book_transfer_transaction.updated
                  events:
                    - amount: 4103
                      created: '2023-09-14T12:52:44Z'
                      result: APPROVED
                      token: f274f723-b156-5b15-a96d-5ba8d5241b09
                      type: ACCOUNT_TO_ACCOUNT
                      subtype: CUSTOM
                      detailed_results:
                        - APPROVED
                      memo: Fund account
                    - amount: -4103
                      created: '2023-09-14T12:52:44Z'
                      result: APPROVED
                      token: f274f723-b156-5b15-a96d-5ba8d5241b09
                      type: ACCOUNT_TO_ACCOUNT_REVERSAL
                      subtype: CUSTOM
                      detailed_results:
                        - APPROVED
                      memo: Fund account
                  from_financial_account_token: b05c313e-35db-4b47-a33b-7b268d72b1f5
                  to_financial_account_token: 39ec6bf0-c101-520e-965a-a4fffce1d755
                  pending_amount: 0
                  result: APPROVED
                  settled_amount: 0
                  status: REVERSED
                  token: 147595d7-45f4-4c91-a950-3436d16847e5
                  updated: '2023-09-14T12:52:44Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: book_transfer_transaction.updated
      tags:
        - Event Types
  card.created:
    post:
      description: Occurs when a new card is created.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - card_token: 00000000-0000-0000-0000-000000000001
                - event_type: card.created
                  replacement_for: 00000000-0000-0000-0000-000000000000
              properties:
                card_token:
                  description: The token of the card that was created.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                event_type:
                  description: The type of event that occurred.
                  enum:
                    - card.created
                  example: card.created
                  type: string
                replacement_for:
                  description: The token of the card that was replaced, if the new card is a replacement card.
                  example: 00000000-0000-0000-0000-000000000000
                  format: uuid
                  type: string
              required:
                - card_token
                - event_type
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card.created
      tags:
        - Event Types
  card.renewed:
    post:
      description: Occurs when a card is renewed.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - card_token: 00000000-0000-0000-0000-000000000001
                  event_type: card.renewed
                  exp_month: '01'
                  exp_year: '2030'
                  previous_exp_month: '01'
                  previous_exp_year: '2024'
              properties:
                card_token:
                  description: The token of the card that was renewed.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                event_type:
                  description: The type of event that occurred.
                  enum:
                    - card.renewed
                  example: card.renewed
                  type: string
                exp_month:
                  description: The new expiration month of the card.
                  example: '01'
                  type: string
                exp_year:
                  description: The new expiration year of the card.
                  example: '2030'
                  type: string
                previous_exp_month:
                  description: The previous expiration month of the card.
                  example: '01'
                  type: string
                previous_exp_year:
                  description: The previous expiration year of the card.
                  example: '2024'
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card.renewed
      tags:
        - Event Types
  card.reissued:
    post:
      description: Occurs when a card is reissued.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - card_token: 00000000-0000-0000-0000-000000000001
                  event_type: card.reissued
              properties:
                card_token:
                  description: The token of the card that was reissued.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                event_type:
                  description: The type of event that occurred.
                  enum:
                    - card.reissued
                  example: card.reissued
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card.reissued
      tags:
        - Event Types
  card.shipped:
    post:
      description: Occurs when a card is shipped.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - card_token: 00000000-0000-0000-0000-000000000001
                  event_type: card.shipped
                  shipping_method: USPS without tracking envelope
                  tracking_number: 1Z9999999999999999
              properties:
                card_token:
                  description: The token of the card that was shipped.
                  example: 00000000-0000-0000-0000-000000000001
                  format: uuid
                  type: string
                event_type:
                  description: The type of event that occurred.
                  enum:
                    - card.shipped
                  example: card.shipped
                  type: string
                shipping_method:
                  description: The specific shipping method used to ship the card.
                  enum:
                    - Ex-US expedited with tracking
                    - Ex-US standard with tracking
                    - Ex-US standard without tracking
                    - FedEx 2 days
                    - FedEx express
                    - FedEx overnight
                    - USPS priority
                    - USPS with tracking
                    - USPS without tracking envelope
                    - USPS without tracking envelope non-machine
                    - USPS without tracking flat
                  example: USPS without tracking envelope
                  type: string
                tracking_number:
                  description: The tracking number of the shipment.
                  example: 1Z9999999999999999
                  type: string
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card.shipped
      tags:
        - Event Types
  card_transaction.updated:
    post:
      description: Occurs when a card transaction happens.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_transaction_updated_event'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card_transaction.updated
      tags:
        - Event Types
  card_transaction.enhanced_data.created:
    post:
      description: Occurs when L2/L3 enhanced commercial data is processed for a transaction event.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/EnhancedData'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - card_transaction.enhanced_data.created
                      example: card_transaction.enhanced_data.created
                      type: string
                  type: object
              examples:
                - token: fda41769-2a3f-5532-898f-0d2034f2da85
                  transaction_token: 6b79924e-0f01-4bdf-9485-9f6da44b6be2
                  event_token: 49bbd49c-dfe1-56db-86ad-98c7c2bd75e4
                  event_type: card_transaction.enhanced_data.created
                  common:
                    customer_reference_number: null
                    merchant_reference_number: null
                    order_date: null
                    line_items: []
                    tax:
                      merchant_tax_id: '521236050'
                      amount: null
                      exempt: null
                  fleet:
                    - service_type: SELF_SERVICE
                      driver_number: null
                      vehicle_number: '012345'
                      odometer: 12345
                      amount_totals:
                        gross_sale: 104
                        discount: null
                        net_sale: 104
                      fuel:
                        quantity: '0.24300'
                        type: PREMIUM_SUPER
                        unit_of_measure: GALLONS
                        unit_price: 4300
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card_transaction.enhanced_transaction_data.created
      tags:
        - Event Types
  card_transaction.enhanced_data.updated:
    post:
      description: Occurs when L2/L3 enhanced commercial data is reprocessed for a transaction event.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/EnhancedData'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - card_transaction.enhanced_data.updated
                      example: card_transaction.enhanced_data.updated
                      type: string
                  type: object
              examples:
                - token: fda41769-2a3f-5532-898f-0d2034f2da85
                  transaction_token: 6b79924e-0f01-4bdf-9485-9f6da44b6be2
                  event_token: 49bbd49c-dfe1-56db-86ad-98c7c2bd75e4
                  event_type: card_transaction.enhanced_data.updated
                  common:
                    customer_reference_number: null
                    merchant_reference_number: null
                    order_date: null
                    line_items: []
                    tax:
                      merchant_tax_id: '521236050'
                      amount: null
                      exempt: null
                  fleet:
                    - service_type: SELF_SERVICE
                      driver_number: null
                      vehicle_number: '012345'
                      odometer: 12345
                      amount_totals:
                        gross_sale: 104
                        discount: null
                        net_sale: 104
                      fuel:
                        quantity: '0.24300'
                        type: PREMIUM_SUPER
                        unit_of_measure: GALLONS
                        unit_price: 4300
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: card_transaction.enhanced_transaction_data.updated
      tags:
        - Event Types
  digital_wallet.tokenization_approval_request:
    post:
      description: |
        Occurs when a tokenization approval request is made.  This event will be deprecated in the future. We recommend using `tokenization.approval_request` instead.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/digital-wallet-tokenization-approval-request'
      responses:
        '200':
          description: |
            Return a 200 status to indicate that the data was received successfully.
      summary: digital_wallet.tokenization_approval_request
      tags:
        - Event Types
  digital_wallet.tokenization_result:
    post:
      description: |
        Occurs when a tokenization request succeeded or failed.

        This event will be deprecated in the future. We recommend using `tokenization.result` instead.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: digital_wallet.tokenization_result
                  tokenization_result_details:
                    issuer_decision: APPROVED
                    tokenization_decline_reasons:
                      - ACCOUNT_SCORE_1
                      - DEVICE_SCORE_1
                    wallet_decision: APPROVED
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Account token
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                card_token:
                  description: Card token
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Created date
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - digital_wallet.tokenization_result
                  example: digital_wallet.tokenization_result
                  type: string
                tokenization_result_details:
                  additionalProperties: false
                  description: The result of the tokenization request.
                  properties:
                    customer_decision:
                      description: The customer's tokenization decision if applicable.
                      type: string
                    issuer_decision:
                      description: Lithic's tokenization decision.
                      type: string
                    token_activated_date_time:
                      description: An RFC 3339 timestamp indicating when the tokenization succeeded.
                      example: '2020-01-01T00:00:00Z'
                      format: date-time
                      type: string
                    tokenization_decline_reasons:
                      description: A list of reasons the tokenization failed.
                      example:
                        - ACCOUNT_SCORE_1
                        - DEVICE_SCORE_1
                      items:
                        enum:
                          - ACCOUNT_SCORE_1
                          - ALL_WALLET_DECLINE_REASONS_PRESENT
                          - CARD_EXPIRY_MONTH_MISMATCH
                          - CARD_EXPIRY_YEAR_MISMATCH
                          - CARD_INVALID_STATE
                          - CUSTOMER_RED_PATH
                          - CVC_MISMATCH
                          - DEVICE_SCORE_1
                          - INVALID_CUSTOMER_RESPONSE
                          - NETWORK_FAILURE
                          - WALLET_RECOMMENDED_DECISION_RED
                        type: string
                      type: array
                    wallet_decision:
                      description: The wallet's recommended decision.
                      example: APPROVED
                      type: string
                  required:
                    - issuer_decision
                    - tokenization_decline_reasons
                  type: object
                tokenization_token:
                  description: Tokenization token
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - card_token
                - created
                - event_type
                - tokenization_result_details
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: digital_wallet.tokenization_result
      tags:
        - Event Types
  digital_wallet.tokenization_two_factor_authentication_code:
    post:
      description: |
        Occurs when a tokenization request 2FA code is sent to the Lithic customer for self serve delivery.

        This event will be deprecated in the future. We recommend using `tokenization.two_factor_authentication_code` instead.
      requestBody:
        content:
          application/json:
            schema:
              description: Self Serve 2FA Code Schema
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  activation_method:
                    type: TEXT_TO_CARDHOLDER_NUMBER
                    value: 5555555555
                  authentication_code: 123456
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: digital_wallet.tokenization_two_factor_authentication_code
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Unique identifier for the user tokenizing a card
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                activation_method:
                  description: ''
                  properties:
                    type:
                      description: |-
                        The communication method that the user has selected to use to receive the authentication code.
                        Supported Values: Sms = "TEXT_TO_CARDHOLDER_NUMBER". Email = "EMAIL_TO_CARDHOLDER_ADDRESS"
                      enum:
                        - EMAIL_TO_CARDHOLDER_ADDRESS
                        - TEXT_TO_CARDHOLDER_NUMBER
                      example: TEXT_TO_CARDHOLDER_NUMBER
                      type: string
                    value:
                      description: |-
                        The location where the user wants to receive the authentication code.
                        The format depends on the ActivationMethod.Type field. If Type is Email, the Value will be the email address. If the Type is Sms, the Value will be the phone number.
                      example: '5555555555'
                      type: string
                  required:
                    - type
                    - value
                  type: object
                authentication_code:
                  description: Authentication code to provide to the user tokenizing a card.
                  example: '123456'
                  type: string
                card_token:
                  description: Unique identifier for the card being tokenized
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Indicate when the request was received from Mastercard or Visa
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  title: Created
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - digital_wallet.tokenization_two_factor_authentication_code
                  example: digital_wallet.tokenization_two_factor_authentication_code
                  type: string
                tokenization_token:
                  description: Unique identifier for the tokenization
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - activation_method
                - authentication_code
                - card_token
                - created
                - event_type
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: digital_wallet.tokenization_two_factor_authentication_code
      tags:
        - Event Types
  digital_wallet.tokenization_two_factor_authentication_code_sent:
    post:
      description: |
        Occurs when a tokenization request 2FA code is sent to our downstream messaging providers for delivery.

        This event will be deprecated in the future. We recommend using `tokenization.two_factor_authentication_code_sent` instead.
      requestBody:
        content:
          application/json:
            schema:
              description: 2FA Code Sent Schema
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  activation_method:
                    type: TEXT_TO_CARDHOLDER_NUMBER
                    value: 5555555555
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: digital_wallet.tokenization_two_factor_authentication_code_sent
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Unique identifier for the user tokenizing a card
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                activation_method:
                  description: ''
                  properties:
                    type:
                      description: |-
                        The communication method that the user has selected to use to receive the authentication code.
                        Supported Values: Sms = "TEXT_TO_CARDHOLDER_NUMBER". Email = "EMAIL_TO_CARDHOLDER_ADDRESS"
                      enum:
                        - EMAIL_TO_CARDHOLDER_ADDRESS
                        - TEXT_TO_CARDHOLDER_NUMBER
                      example: TEXT_TO_CARDHOLDER_NUMBER
                      type: string
                    value:
                      description: |-
                        The location to which the authentication code was sent.
                        The format depends on the ActivationMethod.Type field. If Type is Email, the Value will be the email address. If the Type is Sms, the Value will be the phone number.
                      example: '5555555555'
                      type: string
                  required:
                    - type
                    - value
                  type: object
                card_token:
                  description: Unique identifier for the card being tokenized
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Indicate when the request was received from Mastercard or Visa
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  title: Created
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - digital_wallet.tokenization_two_factor_authentication_code_sent
                  example: digital_wallet.tokenization_two_factor_authentication_code_sent
                  type: string
                tokenization_token:
                  description: Unique identifier for the tokenization
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - activation_method
                - card_token
                - created
                - event_type
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: digital_wallet.tokenization_two_factor_authentication_code_sent
      tags:
        - Event Types
  digital_wallet.tokenization_updated:
    post:
      description: |
        Occurs when a tokenization's status has changed.

        This event will be deprecated in the future. We recommend using `tokenization.updated` instead.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2023-09-13T16:05:09.893241'
                  event_type: digital_wallet.tokenization_updated
                  tokenization:
                    account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                    card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                    created_at: '2023-09-13T15:30:11.948371'
                    events:
                      - created_at: '2023-09-13T16:05:09.893241'
                        result: TOKEN_ACTIVATED
                        token: a690b617-d3d4-4976-82f6-901f817ad98a
                        type: TOKENIZATION_UPDATED
                      - created_at: '2023-09-13T16:01:13.643241'
                        result: APPROVED
                        token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                        type: TOKENIZATION_AUTHORIZATION
                    status: ACTIVE
                    token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                    token_requestor_name: APPLE_PAY
                    token_unique_reference: de25183f-6121-4ce5-8f2e-16b7fb07f252
                    updated_at: '2023-09-13T16:05:09.893241'
                  tokenization_token: 3e9a10da-11be-4a62-a510-d43548bfcec1
              properties:
                account_token:
                  description: Account token
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                card_token:
                  description: Card token
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Created date
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - digital_wallet.tokenization_updated
                  example: digital_wallet.tokenization_updated
                  type: string
                tokenization:
                  $ref: '#/components/schemas/Tokenization'
              required:
                - account_token
                - card_token
                - created
                - event_type
                - tokenization
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: digital_wallet.tokenization_updated
      tags:
        - Event Types
  dispute.updated:
    post:
      description: Occurs when a dispute is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Dispute'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - dispute.updated
                      example: dispute.updated
                      type: string
                  type: object
              examples:
                - amount: 200
                  arbitration_date: null
                  created: '2023-07-19T18:39:34.768Z'
                  customer_filed_date: '2023-07-20T09:00:00Z'
                  customer_note: I didn't receive the goods.
                  event_type: dispute.updated
                  network_claim_ids:
                    - CLAIM-001
                  network_filed_date: '2023-07-21T11:00:00Z'
                  network_reason_code: '4808'
                  prearbitration_date: null
                  primary_claim_id: CLAIM-001
                  reason: GOODS_SERVICES_NOT_RECEIVED
                  representment_date: null
                  resolution_amount: null
                  resolution_date: null
                  resolution_note: null
                  resolution_reason: null
                  status: SUBMITTED
                  token: b24230fa-181e-4b31-9a5c-276747e619a0
                  transaction_token: 12345624-aa69-4cbc-a946-30d90181b621
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: dispute.updated
      tags:
        - Event Types
  dispute_evidence.upload_failed:
    post:
      description: Occurs when a dispute evidence upload fails.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/DisputeEvidence'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - dispute_evidence.upload_failed
                      example: dispute_evidence.upload_failed
                      type: string
                  type: object
              examples:
                - created: '2023-07-19T18:39:34.768Z'
                  dispute_token: f7a74167-d6d5-4f7d-8501-36df11ba371b
                  event_type: dispute_evidence.upload_failed
                  token: 48b8e42c-a645-44f6-8604-20c3127e9008
                  upload_status: REJECTED
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: dispute_evidence.upload_failed
      tags:
        - Event Types
  external_bank_account.created:
    post:
      description: Occurs when an external bank account is created.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bank_account_api_response'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: external_bank_account.created
      tags:
        - Event Types
  external_bank_account.updated:
    post:
      description: Occurs when an external bank account is updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bank_account_api_response'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: external_bank_account.updated
      tags:
        - Event Types
  external_payment.created:
    post:
      description: Occurs when an external payment is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/external_payment_response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - external_payment.created
                      example: external_payment.created
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: external_payment.created
      tags:
        - Event Types
  external_payment.updated:
    post:
      description: Occurs when an external payment is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/external_payment_response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - external_payment.updated
                      example: external_payment.updated
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: external_payment.updated
      tags:
        - Event Types
  financial_account.created:
    post:
      description: Occurs when a financial account is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/financial-account-response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - financial_account.created
                      example: financial_account.created
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: financial_account.created
      tags:
        - Event Types
  financial_account.updated:
    post:
      description: Occurs when a financial account is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/financial-account-response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - financial_account.updated
                      example: financial_account.updated
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: financial_account.updated
      tags:
        - Event Types
  loan_tape.created:
    post:
      description: Occurs when a loan tape is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/loan_tape_response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - loan_tape.created
                      example: loan_tape.created
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: loan_tape.created
      tags:
        - Event Types
  loan_tape.updated:
    post:
      description: Occurs when a loan tape is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/loan_tape_response'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - loan_tape.updated
                      example: loan_tape.updated
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: loan_tape.updated
      tags:
        - Event Types
  management_operation.created:
    post:
      description: Occurs when an management operation is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/management_operation_transaction'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - management_operation.created
                      example: management_operation.created
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: management_operation.created
      tags:
        - Event Types
  management_operation.updated:
    post:
      description: Occurs when an management operation is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/management_operation_transaction'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - management_operation.updated
                      example: management_operation.updated
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: management_operation.updated
      tags:
        - Event Types
  payment_transaction.created:
    post:
      description: Occurs when a payment transaction is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PaymentResponse'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - payment_transaction.created
                      example: payment_transaction.created
                      type: string
                  type: object
              examples:
                - category: ACH
                  created: '2023-09-14T12:52:44Z'
                  currency: USD
                  descriptor: custom description
                  direction: DEBIT
                  event_type: payment_transaction.created
                  events:
                    - amount: 4103
                      created: '2023-09-14T12:52:44Z'
                      result: APPROVED
                      token: f274f723-b156-5b15-a96d-5ba8d5241b09
                      type: ACH_ORIGINATION_PENDING
                  external_bank_account_token: b05c313e-35db-4b47-a33b-7b268d72b1f5
                  financial_account_token: 39ec6bf0-c101-520e-965a-a4fffce1d755
                  method: ACH_NEXT_DAY
                  method_attributes:
                    retries: 0
                    return_reason_code: null
                    sec_code: CCD
                  pending_amount: 4103
                  result: APPROVED
                  settled_amount: 0
                  source: CUSTOMER
                  status: PENDING
                  token: 147595d7-45f4-4c91-a950-3436d16847e5
                  updated: '2023-09-14T12:52:44Z'
                  user_defined_id: null
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: payment_transaction.created
      tags:
        - Event Types
  payment_transaction.updated:
    post:
      description: Occurs when a payment transaction is updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PaymentResponse'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - payment_transaction.updated
                      example: payment_transaction.updated
                      type: string
                  type: object
              examples:
                - category: ACH
                  created: '2023-09-14T12:52:44Z'
                  currency: USD
                  descriptor: custom description
                  direction: DEBIT
                  event_type: payment_transaction.updated
                  events:
                    - amount: 4103
                      created: '2023-09-14T12:52:44Z'
                      result: APPROVED
                      token: f274f723-b156-5b15-a96d-5ba8d5241b09
                      type: ACH_ORIGINATION_PENDING
                    - amount: 4103
                      created: '2023-09-14T12:52:46Z'
                      result: APPROVED
                      token: 95719c03-7eb8-560b-9843-39da92df5231
                      type: ACH_ORIGINATION_PROCESSED
                    - amount: 4103
                      created: '2023-09-14T12:52:47Z'
                      result: APPROVED
                      token: 87fea0af-931f-5e80-a9cf-a243aa71b89d
                      type: ACH_ORIGINATION_RELEASED
                  external_bank_account_token: b05c313e-35db-4b47-a33b-7b268d72b1f5
                  financial_account_token: 39ec6bf0-c101-520e-965a-a4fffce1d755
                  method: ACH_NEXT_DAY
                  method_attributes:
                    retries: 0
                    return_reason_code: null
                    sec_code: CCD
                  pending_amount: 0
                  result: APPROVED
                  settled_amount: 4103
                  source: CUSTOMER
                  status: SETTLED
                  token: 147595d7-45f4-4c91-a950-3436d16847e5
                  updated: '2023-09-14T12:52:47Z'
                  user_defined_id: null
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: payment_transaction.updated
      tags:
        - Event Types
  settlement_report.updated:
    post:
      description: Occurs when a settlement report is created or updated.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SettlementReport'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: settlement_report.updated
      tags:
        - Event Types
  statements.created:
    post:
      description: Occurs when a statement has been created
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/statements_created_webhook'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: statements.created
      tags:
        - Event Types
  three_ds_authentication.created:
    post:
      description: Occurs when a 3DS authentication is created.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ThreeDSAuthentication'
                - properties:
                    event_type:
                      description: The type of event that occurred.
                      enum:
                        - three_ds_authentication.created
                      example: three_ds_authentication.created
                      type: string
                  type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: three_ds_authentication.created
      tags:
        - Event Types
  tokenization.approval_request:
    post:
      description: |
        Occurs when a tokenization approval request is made.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokenization-approval-request'
      responses:
        '200':
          description: |
            Return a 200 status to indicate that the data was received successfully.
      summary: tokenization.approval_request
      tags:
        - Event Types
  tokenization.result:
    post:
      description: Occurs when a tokenization request succeeded or failed.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: tokenization.result
                  tokenization_result_details:
                    issuer_decision: APPROVED
                    tokenization_decline_reasons:
                      - ACCOUNT_SCORE_1
                      - DEVICE_SCORE_1
                    wallet_decision: APPROVED
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Account token
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                card_token:
                  description: Card token
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Created date
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - tokenization.result
                  example: tokenization.result
                  type: string
                tokenization_result_details:
                  additionalProperties: false
                  description: The result of the tokenization request.
                  properties:
                    customer_decision:
                      description: The customer's tokenization decision if applicable.
                      type: string
                    issuer_decision:
                      description: Lithic's tokenization decision.
                      type: string
                    token_activated_date_time:
                      description: An RFC 3339 timestamp indicating when the tokenization succeeded.
                      example: '2020-01-01T00:00:00Z'
                      format: date-time
                      type: string
                    tokenization_decline_reasons:
                      description: A list of reasons the tokenization failed.
                      example:
                        - ACCOUNT_SCORE_1
                        - DEVICE_SCORE_1
                      items:
                        enum:
                          - ACCOUNT_SCORE_1
                          - ALL_WALLET_DECLINE_REASONS_PRESENT
                          - CARD_EXPIRY_MONTH_MISMATCH
                          - CARD_EXPIRY_YEAR_MISMATCH
                          - CARD_INVALID_STATE
                          - CUSTOMER_RED_PATH
                          - CVC_MISMATCH
                          - DEVICE_SCORE_1
                          - INVALID_CUSTOMER_RESPONSE
                          - NETWORK_FAILURE
                          - WALLET_RECOMMENDED_DECISION_RED
                        type: string
                      type: array
                    wallet_decision:
                      description: The wallet's recommended decision.
                      example: APPROVED
                      type: string
                  required:
                    - issuer_decision
                    - tokenization_decline_reasons
                  type: object
                tokenization_token:
                  description: Tokenization token
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - card_token
                - created
                - event_type
                - tokenization_result_details
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: tokenization.result
      tags:
        - Event Types
  tokenization.two_factor_authentication_code:
    post:
      description: Occurs when a tokenization request 2FA code is sent to the Lithic customer for self serve delivery.
      requestBody:
        content:
          application/json:
            schema:
              description: Self Serve 2FA Code Schema
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  activation_method:
                    type: TEXT_TO_CARDHOLDER_NUMBER
                    value: 5555555555
                  authentication_code: 123456
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: tokenization.two_factor_authentication_code
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Unique identifier for the user tokenizing a card
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                activation_method:
                  description: ''
                  properties:
                    type:
                      description: |-
                        The communication method that the user has selected to use to receive the authentication code.
                        Supported Values: Sms = "TEXT_TO_CARDHOLDER_NUMBER". Email = "EMAIL_TO_CARDHOLDER_ADDRESS"
                      enum:
                        - EMAIL_TO_CARDHOLDER_ADDRESS
                        - TEXT_TO_CARDHOLDER_NUMBER
                      example: TEXT_TO_CARDHOLDER_NUMBER
                      type: string
                    value:
                      description: |-
                        The location where the user wants to receive the authentication code.
                        The format depends on the ActivationMethod.Type field. If Type is Email, the Value will be the email address. If the Type is Sms, the Value will be the phone number.
                      example: '5555555555'
                      type: string
                  required:
                    - type
                    - value
                  type: object
                authentication_code:
                  description: Authentication code to provide to the user tokenizing a card.
                  example: '123456'
                  type: string
                card_token:
                  description: Unique identifier for the card being tokenized
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Indicate when the request was received from Mastercard or Visa
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  title: Created
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - tokenization.two_factor_authentication_code
                  example: tokenization.two_factor_authentication_code
                  type: string
                tokenization_token:
                  description: Unique identifier for the tokenization
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - activation_method
                - authentication_code
                - card_token
                - created
                - event_type
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: tokenization.two_factor_authentication_code
      tags:
        - Event Types
  tokenization.two_factor_authentication_code_sent:
    post:
      description: Occurs when a tokenization request 2FA code is sent to our downstream messaging providers for delivery.
      requestBody:
        content:
          application/json:
            schema:
              description: 2FA Code Sent Schema
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  activation_method:
                    type: TEXT_TO_CARDHOLDER_NUMBER
                    value: 5555555555
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2020-01-01T00:00:00Z'
                  event_type: tokenization.two_factor_authentication_code_sent
                  tokenization_token: 00000000-0000-0000-0000-000000000003
              properties:
                account_token:
                  description: Unique identifier for the user tokenizing a card
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                activation_method:
                  description: ''
                  properties:
                    type:
                      description: |-
                        The communication method that the user has selected to use to receive the authentication code.
                        Supported Values: Sms = "TEXT_TO_CARDHOLDER_NUMBER". Email = "EMAIL_TO_CARDHOLDER_ADDRESS"
                      enum:
                        - EMAIL_TO_CARDHOLDER_ADDRESS
                        - TEXT_TO_CARDHOLDER_NUMBER
                      example: TEXT_TO_CARDHOLDER_NUMBER
                      type: string
                    value:
                      description: |-
                        The location to which the authentication code was sent.
                        The format depends on the ActivationMethod.Type field. If Type is Email, the Value will be the email address. If the Type is Sms, the Value will be the phone number.
                      example: '5555555555'
                      type: string
                  required:
                    - type
                    - value
                  type: object
                card_token:
                  description: Unique identifier for the card being tokenized
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Indicate when the request was received from Mastercard or Visa
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  title: Created
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - tokenization.two_factor_authentication_code_sent
                  example: tokenization.two_factor_authentication_code_sent
                  type: string
                tokenization_token:
                  description: Unique identifier for the tokenization
                  example: 00000000-0000-0000-0000-000000000003
                  type: string
              required:
                - account_token
                - activation_method
                - card_token
                - created
                - event_type
                - tokenization_token
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: tokenization.two_factor_authentication_code_sent
      tags:
        - Event Types
  tokenization.updated:
    post:
      description: Occurs when a tokenization's status has changed.
      requestBody:
        content:
          application/json:
            schema:
              examples:
                - account_token: 00000000-0000-0000-0000-000000000002
                  card_token: 00000000-0000-0000-0000-000000000001
                  created: '2023-09-13T16:05:09.893241'
                  event_type: tokenization.updated
                  tokenization:
                    account_token: 61c3acef-3c2c-4d61-9352-941397b92ca3
                    card_token: 16a410c9-7f5c-43e9-8108-bb8a72c063f7
                    created_at: '2023-09-13T15:30:11.948371'
                    events:
                      - created_at: '2023-09-13T16:05:09.893241'
                        result: TOKEN_ACTIVATED
                        token: a690b617-d3d4-4976-82f6-901f817ad98a
                        type: TOKENIZATION_UPDATED
                      - created_at: '2023-09-13T16:01:13.643241'
                        result: APPROVED
                        token: 2b2a1038-45f3-42e4-98bb-e745be3f1de1
                        type: TOKENIZATION_AUTHORIZATION
                    status: ACTIVE
                    token: 3e9a10da-11be-4a62-a510-d43548bfcec1
                    token_requestor_name: APPLE_PAY
                    token_unique_reference: de25183f-6121-4ce5-8f2e-16b7fb07f252
                    updated_at: '2023-09-13T16:05:09.893241'
                  tokenization_token: 3e9a10da-11be-4a62-a510-d43548bfcec1
              properties:
                account_token:
                  description: Account token
                  example: 00000000-0000-0000-0000-000000000002
                  type: string
                card_token:
                  description: Card token
                  example: 00000000-0000-0000-0000-000000000001
                  type: string
                created:
                  description: Created date
                  example: '2020-01-01T00:00:00Z'
                  format: date-time
                  type: string
                event_type:
                  description: The name of this event
                  enum:
                    - tokenization.updated
                  example: tokenization.updated
                  type: string
                tokenization:
                  $ref: '#/components/schemas/Tokenization'
              required:
                - account_token
                - card_token
                - created
                - event_type
                - tokenization
              type: object
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
      summary: tokenization.updated
      tags:
        - Event Types
  three_ds_decisioning:
    post:
      description: Webhook for Card Programs to decision on 3DS Authentication Request. See https://docs.lithic.com/docs/3ds-decisioning for more details.
      summary: 3DS Decisioning Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDSAuthentication'
      responses:
        '200':
          description: Information on whether the Request was Approved/Declined and if a Challenge should be created
          content:
            application/json:
              schema:
                properties:
                  three_ds_authentication_decision:
                    enum:
                      - APPROVE
                      - DECLINE
                      - CHALLENGE_REQUESTED
                    type: string
                    description: |
                      * `APPROVE` - Approve the 3DS Transaction and proceed to Authorization
                      * `DECLINE` - Decline the 3DS Transaction ending the transaction
                      * `CHALLENGE_REQUESTED` - Conditional Approval for the 3DS Transaction where a follow-up Challenge will be triggered to further authenticate the Cardholder
                  oob_url:
                    type: string
                    description: URL which may be used in the presentation of a 3DS Challenge UI to the cardholder. This value will be used by the ACS as the OOB App URL. When applicable, this URL may be used for automatic app switching or rendered directly as an element in the Challenge UI. This value is only used with CHALLENGE_REQUESTED decision.
                required:
                  - three_ds_authentication_decision
      tags:
        - 3DS
  three_ds_authentication.challenge:
    post:
      description: The `three_ds_authentication.challenge` event. Upon receiving this request, the Card Program should issue the requested Challenge Method to the CardHolder
      summary: three_ds_authentication.challenge
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authentication_object:
                  $ref: '#/components/schemas/ThreeDSAuthentication'
                challenge:
                  $ref: '#/components/schemas/CustomerChallenge'
              required:
                - authentication_object
                - challenge
      responses:
        '200':
          description: Challenge has been issued to Customer
      tags:
        - Event Types
components:
  parameters:
    accountHolderTokenPath:
      description: Globally unique identifier for the account holder.
      examples:
        accountHolderTokenExample:
          summary: A sample account holder token
          value: 65db64b2-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: account_holder_token
      required: true
      schema:
        format: uuid
        type: string
    accountToken:
      description: Globally unique identifier for account.
      examples:
        accountTokenExample:
          summary: A sample account token
          value: d86a0a4d-7459-471a-83b4-431136320828
      in: path
      name: account_token
      required: true
      schema:
        format: uuid
        type: string
    authRuleToken:
      description: Globally unique identifier for the Auth Rule.
      examples:
        accountHolderTokenExample:
          summary: A sample authorization rule token
          value: 50ca12c3-ae11-513b-20e0-e55421f8b2ab
      in: path
      name: auth_rule_token
      required: true
      schema:
        format: uuid
        type: string
    beginTime:
      description: Date string in RFC 3339 format. Only entries created after the specified time will be included. UTC time zone.
      in: query
      name: begin
      schema:
        format: date-time
        type: string
    cardProgramTokenPath:
      description: Globally unique identifier for the card program.
      examples:
        cardProgramTokenExample:
          summary: A sample card program token
          value: 65db64b2-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: card_program_token
      required: true
      schema:
        format: uuid
        type: string
    cardToken:
      examples:
        cardTokenExample:
          summary: A sample card token
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: card_token
      required: true
      schema:
        format: uuid
        type: string
    cardTokenDigitalWallet:
      description: The unique token of the card to add to the device's digital wallet.
      examples:
        cardTokenExample:
          summary: A sample card token
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: card_token
      required: true
      schema:
        format: uuid
        type: string
    disputeEvidenceToken:
      examples:
        disputeEvidenceExample:
          summary: A sample dispute evidence token
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: evidence_token
      required: true
      schema:
        format: uuid
        type: string
    disputeToken:
      examples:
        disputeTokenExample:
          summary: A sample dispute token
          value: 73ca53a1-ae89-491a-97d9-f64788f8b2ab
      in: path
      name: dispute_token
      required: true
      schema:
        format: uuid
        type: string
    documentToken:
      description: Globally unique identifier for the document.
      examples:
        documentTokenExample:
          summary: A sample document token
          value: 76ca80c3-bf90-491a-97d9-f64788f8b2ab
      in: path
      name: document_token
      required: true
      schema:
        format: uuid
        type: string
    endTime:
      description: Date string in RFC 3339 format. Only entries created before the specified time will be included. UTC time zone.
      in: query
      name: end
      schema:
        format: date-time
        type: string
    endingBefore:
      description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
      in: query
      name: ending_before
      required: false
      schema:
        type: string
    eventSubscriptionToken:
      in: path
      name: event_subscription_token
      required: true
      schema:
        type: string
    eventToken:
      in: path
      name: event_token
      required: true
      schema:
        type: string
    financialAccountToken:
      description: Globally unique identifier for financial account.
      examples:
        financialAccountTokenExample:
          summary: A sample financial account token
          value: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      in: path
      name: financial_account_token
      required: true
      schema:
        format: uuid
        type: string
    financialTransactionToken:
      description: Globally unique identifier for financial transaction token.
      examples:
        financialTransactionTokenExample:
          summary: A sample financial transaction token
          value: 18394f8e-711b-4b3e-ae21-d35a9eafe7d1
      in: path
      name: financial_transaction_token
      required: true
      schema:
        format: uuid
        type: string
    pageSize:
      description: Page size (for pagination).
      in: query
      name: page_size
      schema:
        default: 50
        maximum: 100
        minimum: 1
        type: integer
    startingAfter:
      description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
      in: query
      name: starting_after
      required: false
      schema:
        type: string
    transactionToken:
      description: Globally unique identifier for the transaction.
      examples:
        transactionTokenExample:
          summary: A sample transaction token
          value: 84bc53a1-bf91-502b-97d9-f75888f8b2ab
      in: path
      name: transaction_token
      required: true
      schema:
        format: uuid
        type: string
    webhookId:
      in: header
      name: webhook-id
      description: Webhook ID
      schema:
        type: string
        format: uuid
      example: 65a9dad4-1b60-4686-83fd-65b25078a4b4
    webhookTimestamp:
      in: header
      name: webhook-timestamp
      description: Unix timestamp used for HMAC verification
      schema:
        type: integer
      example: 1698031907
    webhookSignature:
      in: header
      name: webhook-signature
      description: A list of HMAC signatures encoded in Base64 and separated by spaces. Can contain multiple HMAC signatures as a result of key rotation.
      schema:
        type: string
      example: v1,g0hM9SsE+OTPJTGt/tmIKtSyZlE3uFJELVlNIOLJ1OE= v1,bm9ldHUjKzFob2VudXRob2VodWUzMjRvdWVvdW9ldQo=
    InstanceToken:
      name: x-instance-uuid
      in: header
      schema:
        type: string
        format: uuid
      required: true
    EndingBefore:
      description: A cursor representing an item's token before which a page of results should end. Used to retrieve the previous page of results before this item.
      in: query
      name: ending_before
      required: false
      schema:
        type: string
        format: uuid
    PageSize:
      description: Page size (for pagination).
      in: query
      name: page_size
      schema:
        default: 50
        maximum: 100
        minimum: 1
        type: integer
    StartingAfter:
      description: A cursor representing an item's token after which a page of results should begin. Used to retrieve the next page of results after this item.
      in: query
      name: starting_after
      required: false
      schema:
        type: string
        format: uuid
    AuthRuleToken:
      name: auth_rule_token
      in: path
      required: true
      schema:
        type: string
        format: uuid
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: A parameter in the query given in the request does not match the valid queries for the endpoint.
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request could not be completed due to a conflict with the current state of the target resource.
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        Client is not authorized to call the endpoint
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified resource was not found.
    SimulateAuthorizationFailure:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - properties:
                  token:
                    description: A unique token to reference this transaction.
                    example: b68ba424-ab69-4cbc-a946-30d90181b621
                    format: uuid
                    type: string
                type: object
      description: Unprocessable Entity.
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        Client has exceeded the number of allowed requests in a given time period.

        |   |   |
        |---|---|
        | Rate limited, too many requests per second | User has exceeded their per second rate limit |
        | Rate limited, reached daily limit | User has exceeded their daily rate limit |
        | Rate limited, too many keys tried | One IP has queried too many different API keys |
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: |
        |   |   |
        |---|---|
        | User has not been authenticated | Invalid or missing API key |
        | API key is not active | The API key used is no longer active |
        | Could not find API key | The API key provided is not associated with any user |
        | Please provide API key in Authorization header | The Authorization header is not in the request |
        | Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |
        | Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |
        | Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |
    UnprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unprocessable entity.
    responses-BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schemas-Error'
    responses-NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/schemas-Error'
    AuthRule:
      description: Authorization Rule
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/auth-rule'
    exception-responses_responses-BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: A parameter in the query given in the request does not match the valid queries for the endpoint.
    responses-Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: |
        |   |   |
        |---|---|
        | User has not been authenticated | Invalid or missing API key |
        | API key is not active | The API key used is no longer active |
        | Could not find API key | The API key provided is not associated with any user |
        | Please provide API key in Authorization header | The Authorization header is not in the request |
        | Please provide API key in the form Authorization: [api-key] | The Authorization header is not formatted properly |
        | Insufficient privileges. Issuing API key required | Write access requires an Issuing API key. Reach out at [lithic.com/contact](https://lithic.com/contact) |
        | Insufficient privileges to create virtual cards. | Creating virtual cards requires an additional privilege | Reach out at [lithic.com/contact](https://lithic.com/contact) |
    exception-responses_responses-NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: The specified resource was not found.
    responses-Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: The request could not be completed due to a conflict with the current state of the target resource.
    responses-TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: |
        Client has exceeded the number of allowed requests in a given time period.

        |   |   |
        |---|---|
        | Rate limited, too many requests per second | User has exceeded their per second rate limit |
        | Rate limited, reached daily limit | User has exceeded their daily rate limit |
        | Rate limited, too many keys tried | One IP has queried too many different API keys |
  schemas:
    AccountConfiguration:
      properties:
        account_holder:
          properties:
            business_account_token:
              description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Account_token of the enrolled business associated with an enrolled AUTHORIZED_USER individual.
              example: e87db14a-4abf-4901-adad-5d5c9f46aff2
              type: string
            email:
              description: Email address.
              example: jack@lithic.com
              type: string
            phone_number:
              description: Phone number of the individual.
              example: '+12124007676'
              type: string
            token:
              description: Globally unique identifier for the account holder.
              example: 95e5f1b7-cfd5-4520-aa3c-2451bab8608d
              type: string
          required:
            - business_account_token
            - email
            - phone_number
            - token
          type: object
        auth_rule_tokens:
          description: |-
            List of identifiers for the Auth Rule(s) that are applied on the account.
            This field is deprecated and will no longer be populated in the `account_holder` object. The key will be removed from the schema in a future release. Use the `/auth_rules` endpoints to fetch Auth Rule information instead.
          items:
            type: string
          type: array
          deprecated: true
        cardholder_currency:
          description: 3-digit alphabetic ISO 4217 code for the currency of the cardholder.
          example: USD
          type: string
        spend_limit:
          description: |
            Spend limit information for the user containing the daily, monthly, and lifetime spend limit of the account. Any charges to a card owned by this account will be declined once their transaction volume has surpassed the value in the applicable time limit (rolling). A lifetime limit of 0 indicates that the lifetime limit feature is disabled.
          properties:
            daily:
              description: Daily spend limit (in cents).
              example: 10000
              minimum: 0
              type: integer
            lifetime:
              description: Total spend limit over account lifetime (in cents).
              example: 100000
              minimum: 0
              type: integer
            monthly:
              description: Monthly spend limit (in cents).
              example: 40000
              minimum: 0
              type: integer
          required:
            - daily
            - lifetime
            - monthly
          type: object
        state:
          description: |-
            Account state:
              * `ACTIVE` - Account is able to transact and create new cards.
              * `PAUSED` - Account will not be able to transact or create new cards. It can be set back to `ACTIVE`.
              * `CLOSED` - Account will not be able to transact or create new cards. `CLOSED` accounts are also unable to be transitioned to `ACTIVE` or `PAUSED` states. `CLOSED` accounts result from failing to pass KYB/KYC or Lithic closing for risk/compliance reasons. Please contact [support@lithic.com](mailto:support@lithic.com) if you believe this was in error.
          enum:
            - ACTIVE
            - PAUSED
            - CLOSED
          type: string
        token:
          description: |
            Globally unique identifier for the account. This is the same as the account_token returned by the enroll endpoint. If using this parameter, do not include pagination.
          example: b68b7424-aa69-4cbc-a946-30d90181b621
          format: uuid
          type: string
        verification_address:
          properties:
            address1:
              description: Valid deliverable address (no PO boxes).
              example: 124 Old Forest Way
              type: string
            address2:
              description: Unit or apartment number (if applicable).
              example: Apt 21
              type: string
            city:
              description: City name.
              example: Seattle
              type: string
            country:
              description: Country name. Only USA is currently supported.
              example: USA
              type: string
            postal_code:
              description: Valid postal code. Only USA postal codes (ZIP codes) are currently supported, entered as a five-digit postal code or nine-digit postal code (ZIP+4) using the format 12345-1234.
              example: '98109'
              type: string
            state:
              description: Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.
              example: WA
              type: string
          required:
            - address1
            - city
            - country
            - postal_code
            - state
          type: object
          deprecated: true
        created:
          description: Timestamp of when the account was created. For accounts created before 2023-05-11, this field will be null.
          format: date-time
          type:
            - string
            - 'null'
      required:
        - spend_limit
        - state
        - token
        - created
      type: object
    AccountHolder:
      properties:
        account_token:
          description: Globally unique identifier for the account.
          format: uuid
          type: string
        beneficial_owner_entities:
          description: |
            Only present when user_type == "BUSINESS". List of all entities with >25% ownership in the company.
          items:
            $ref: '#/components/schemas/AccountHolderBusinessResponse'
          minItems: 0
          type: array
        beneficial_owner_individuals:
          description: |
            Only present when user_type == "BUSINESS". List of all individuals with >25% ownership in the company.
          items:
            $ref: '#/components/schemas/AccountHolderIndividualResponse'
          minItems: 0
          type: array
        business_account_token:
          description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
          format: uuid
          type: string
        business_entity:
          $ref: '#/components/schemas/AccountHolderBusinessResponse'
          description: Only present when user_type == "BUSINESS". Information about the business for which the account is being opened and KYB is being run.
        control_person:
          $ref: '#/components/schemas/AccountHolderIndividualResponse'
          description: |
            Only present when user_type == "BUSINESS".
            An individual with significant responsibility for managing the legal entity (e.g., a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer,
            Managing Member, General Partner, President, Vice President, or Treasurer). This can be an executive, or someone who will have program-wide access
            to the cards that Lithic will provide. In some cases, this individual could also be a beneficial owner listed above.
        created:
          description: Timestamp of when the account holder was created.
          format: date-time
          type: string
        email:
          description: |
            <
              Deprecated.
              Use control_person.email when user_type == "BUSINESS".
              Use individual.phone_number when user_type == "INDIVIDUAL".
            >
            Primary email of Account Holder.
          example: '+12124007676'
          type: string
        exemption_type:
          description: The type of KYC exemption for a KYC-Exempt Account Holder.
          enum:
            - AUTHORIZED_USER
            - PREPAID_CARD_USER
          type: string
        external_id:
          description: Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.
          format: string
          type: string
        individual:
          $ref: '#/components/schemas/AccountHolderIndividualResponse'
          description: Only present when user_type == "INDIVIDUAL". Information about the individual for which the account is being opened and KYC is being run.
        nature_of_business:
          description: Only present when user_type == "BUSINESS". User-submitted description of the business.
          format: string
          type: string
        phone_number:
          description: |
            <
              Deprecated.
              Use control_person.phone_number when user_type == "BUSINESS".
              Use individual.phone_number when user_type == "INDIVIDUAL".
            >
            Primary phone of Account Holder, entered in E.164 format.
          example: '+12124007676'
          type: string
        status:
          description: |
            <Deprecated. Use verification_application.status instead>

            KYC and KYB evaluation states.

            Note:
            * `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `KYC_ADVANCED` workflow.
            * `PENDING_REVIEW` is only applicable for the `KYB_BASIC` workflow.
          enum:
            - ACCEPTED
            - PENDING_REVIEW
            - PENDING_DOCUMENT
            - PENDING_RESUBMIT
            - REJECTED
          type: string
        status_reasons:
          description: <Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.
          items:
            enum:
              - ADDRESS_VERIFICATION_FAILURE
              - AGE_THRESHOLD_FAILURE
              - COMPLETE_VERIFICATION_FAILURE
              - DOB_VERIFICATION_FAILURE
              - ID_VERIFICATION_FAILURE
              - MAX_DOCUMENT_ATTEMPTS
              - MAX_RESUBMISSION_ATTEMPTS
              - NAME_VERIFICATION_FAILURE
              - OTHER_VERIFICATION_FAILURE
              - RISK_THRESHOLD_FAILURE
              - WATCHLIST_ALERT_FAILURE
            type: string
          type: array
        token:
          description: Globally unique identifier for the account holder.
          format: uuid
          type: string
        user_type:
          description: |
            The type of Account Holder. If the type is "INDIVIDUAL", the "individual" attribute will be present.
            If the type is "BUSINESS" then the "business_entity", "control_person", "beneficial_owner_individuals", "beneficial_owner_entities",
            "nature_of_business", and "website_url" attributes will be present.
          enum:
            - BUSINESS
            - INDIVIDUAL
          type: string
        verification_application:
          $ref: '#/components/schemas/AccountHolderVerificationApplication'
          description: Information about the most recent identity verification attempt
        required_documents:
          description: Only present for "KYB_BASIC" and "KYC_ADVANCED" workflows. A list of documents required for the account holder to be approved.
          type: array
          items:
            $ref: '#/components/schemas/required-document'
        website_url:
          description: Only present when user_type == "BUSINESS". Business's primary website.
          format: string
          type: string
      required:
        - token
        - created
      type: object
    AccountHolderDocument:
      description: Describes the document and the required document image uploads required to re-run KYC.
      example:
        account_holder_token: aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149
        document_type: EIN_LETTER
        entity_token: b50a84c9-8e86-4016-b1c7-0b9f71d4bb84
        required_document_uploads:
          - image_type: front
            status: PENDING_UPLOAD
            status_reasons: []
            upload_url: https://lithic-document-verification-uploads.com
        token: 12345678-3630-4cd0-bbec-1a0fa5c7e149
      properties:
        account_holder_token:
          description: Globally unique identifier for the account holder.
          format: uuid
          type: string
        document_type:
          description: Type of documentation to be submitted for verification.
          enum:
            - EIN_LETTER
            - TAX_RETURN
            - OPERATING_AGREEMENT
            - CERTIFICATE_OF_FORMATION
            - DRIVERS_LICENSE
            - PASSPORT
            - PASSPORT_CARD
            - CERTIFICATE_OF_GOOD_STANDING
            - ARTICLES_OF_INCORPORATION
            - ARTICLES_OF_ORGANIZATION
            - BYLAWS
            - GOVERNMENT_BUSINESS_LICENSE
            - PARTNERSHIP_AGREEMENT
            - SS4_FORM
            - BANK_STATEMENT
            - UTILITY_BILL_STATEMENT
            - SSN_CARD
            - ITIN_LETTER
          type: string
        entity_token:
          description: Globally unique identifier for the entity.
          type: string
          format: uuid
        required_document_uploads:
          items:
            description: Represents a single image of the document to upload.
            properties:
              image_type:
                description: Type of image to upload.
                enum:
                  - back
                  - front
                type: string
              status:
                description: Status of document image upload.
                enum:
                  - COMPLETED
                  - FAILED
                  - PENDING_UPLOAD
                  - UPLOADED
                type: string
              status_reasons:
                items:
                  description: Reasons for document image upload status.
                  enum:
                    - BACK_IMAGE_BLURRY
                    - FILE_SIZE_TOO_LARGE
                    - FRONT_IMAGE_BLURRY
                    - FRONT_IMAGE_GLARE
                    - INVALID_FILE_TYPE
                    - UNKNOWN_ERROR
                  type: string
                type: array
              upload_url:
                description: |
                  URL to upload document image to.

                  Note that the upload URLs expire after 7 days. If an upload URL expires, you can
                  refresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.
                type: string
              token:
                description: Globally unique identifier for the document upload.
                format: uuid
                type: string
            type: object
          type: array
        token:
          description: Globally unique identifier for the document.
          format: uuid
          type: string
      type: object
    AccountHolderIndividualResponse:
      description: Information about an individual associated with an account holder. A subset of the information provided via KYC. For example, we do not return the government id.
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: Individual's current address
        dob:
          description: Individual's date of birth, as an RFC 3339 date.
          example: '1991-03-08 08:00:00'
          type: string
        email:
          description: Individual's email address.
          example: tom@middle-earth.com
          type: string
        first_name:
          description: Individual's first name, as it appears on government-issued identity documents.
          example: Tom
          type: string
        last_name:
          description: Individual's last name, as it appears on government-issued identity documents.
          example: Bombadil
          type: string
        phone_number:
          description: Individual's phone number, entered in E.164 format.
          example: '+12124007676'
          type: string
        entity_token:
          description: Globally unique identifier for the entity.
          type: string
          format: uuid
      type: object
      required:
        - address
        - dob
        - email
        - first_name
        - last_name
        - phone_number
        - entity_token
    AccountHolderBusinessResponse:
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: |
            Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.
        dba_business_name:
          description: Any name that the business operates under that is not its legal business name (if applicable).
          type: string
        government_id:
          description: |
            Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.
          example: 114-123-1513
          type: string
        legal_business_name:
          description: Legal (formal) business name.
          example: Acme, Inc.
          type: string
        parent_company:
          description: Parent company name (if applicable).
          type: string
        phone_numbers:
          description: One or more of the business's phone number(s), entered as a list in E.164 format.
          items:
            description: Business phone number, entered in E.164 format.
            example: '+12124007676'
            type: string
          minItems: 1
          type: array
        entity_token:
          description: Globally unique identifier for the entity.
          type: string
          format: uuid
      required:
        - address
        - government_id
        - dba_business_name
        - legal_business_name
        - phone_numbers
        - entity_token
      type: object
    AccountHolderVerificationApplication:
      description: Represents the status of an identity verification application for an account holder
      properties:
        created:
          description: Timestamp of when the application was created.
          format: date-time
          type: string
        status:
          description: |
            KYC and KYB evaluation states.

            Note:
            * `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `KYC_ADVANCED` workflow.
            * `PENDING_REVIEW` is only applicable for the `KYB_BASIC` workflow.
          enum:
            - ACCEPTED
            - PENDING_REVIEW
            - PENDING_DOCUMENT
            - PENDING_RESUBMIT
            - REJECTED
          type: string
        status_reasons:
          description: Reason for the evaluation status.
          items:
            enum:
              - ADDRESS_VERIFICATION_FAILURE
              - AGE_THRESHOLD_FAILURE
              - COMPLETE_VERIFICATION_FAILURE
              - DOB_VERIFICATION_FAILURE
              - ID_VERIFICATION_FAILURE
              - MAX_DOCUMENT_ATTEMPTS
              - MAX_RESUBMISSION_ATTEMPTS
              - NAME_VERIFICATION_FAILURE
              - OTHER_VERIFICATION_FAILURE
              - RISK_THRESHOLD_FAILURE
              - WATCHLIST_ALERT_FAILURE
            type: string
          type: array
        updated:
          description: Timestamp of when the application was last updated.
          format: date-time
          type: string
      type: object
    AccountSpendLimits:
      properties:
        available_spend_limit:
          properties:
            daily:
              description: The available spend limit (in cents) relative to the daily limit configured on the Account.
              example: 100000
              type: integer
            lifetime:
              description: The available spend limit (in cents) relative to the lifetime limit configured on the Account.
              example: 300000
              type: integer
            monthly:
              description: The available spend limit (in cents) relative to the monthly limit configured on the Account.
              example: 200000
              type: integer
          type: object
        spend_limit:
          properties:
            daily:
              description: The configured daily spend limit (in cents) on the Account.
              example: 500000
              type: integer
            lifetime:
              description: The configured lifetime spend limit (in cents) on the Account.
              example: 500000
              type: integer
            monthly:
              description: The configured monthly spend limit (in cents) on the Account.
              example: 500000
              type: integer
          type: object
        spend_velocity:
          properties:
            daily:
              description: Current daily spend velocity (in cents) on the Account. Present if daily spend limit is set.
              example: 40000
              type: integer
            lifetime:
              description: Current lifetime spend velocity (in cents) on the Account. Present if lifetime spend limit is set.
              example: 20000
              type: integer
            monthly:
              description: Current monthly spend velocity (in cents) on the Account. Present if monthly spend limit is set.
              example: 30000
              type: integer
          type: object
      required:
        - available_spend_limit
      type: object
    Address:
      properties:
        address1:
          description: Valid deliverable address (no PO boxes).
          example: 123 Old Forest Way
          type: string
        address2:
          description: Unit or apartment number (if applicable).
          type: string
        city:
          description: Name of city.
          example: Omaha
          type: string
        country:
          description: 'Valid country code, entered in uppercase ISO 3166-1 alpha-3 three-character format. Only USA is currently supported for all workflows. KYC_EXEMPT supports CAN additionally. '
          example: USA
          type: string
        postal_code:
          description: 'Valid postal code. USA postal codes (ZIP codes) are supported, entered as a five-digit postal code or nine-digit postal code (ZIP+4) using the format 12345-1234.  KYC_EXEMPT supports Canadian postal codes. '
          example: '68022'
          type: string
        state:
          description: Valid state code. USA state codes are supported, entered in uppercase ISO 3166-2 two-character format. KYC_EXEMPT supports Canadian province codes.
          example: NE
          type: string
      required:
        - address1
        - city
        - country
        - postal_code
        - state
      type: object
    AggregateBalance:
      description: Aggregate Balance across all end-user accounts
      properties:
        available_amount:
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
          type: integer
        created:
          description: Date and time for when the balance was first created.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
          type: string
        financial_account_type:
          description: Type of financial account
          enum:
            - ISSUING
            - OPERATING
            - RESERVE
          type: string
        last_financial_account_token:
          description: Globally unique identifier for the financial account that had its balance updated most recently
          format: uuid
          type: string
        last_transaction_event_token:
          description: Globally unique identifier for the last transaction event that impacted this balance
          format: uuid
          type: string
        last_transaction_token:
          description: Globally unique identifier for the last transaction that impacted this balance
          format: uuid
          type: string
        pending_amount:
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)
          type: integer
        total_amount:
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)
          type: integer
        updated:
          description: Date and time for when the balance was last updated.
          format: date-time
          type: string
      required:
        - available_amount
        - created
        - currency
        - financial_account_type
        - last_financial_account_token
        - last_transaction_event_token
        - last_transaction_token
        - pending_amount
        - total_amount
        - updated
      type: object
    AmountTotals:
      title: AmountTotals
      type: object
      properties:
        gross_sale:
          title: Gross Sale
          description: The gross sale amount.
          type: integer
        discount:
          title: Discount
          description: The discount applied to the gross sale amount.
          type: integer
        net_sale:
          title: Net Sale
          description: The amount after discount.
          type: integer
    AuthRule:
      allOf:
        - $ref: '#/components/schemas/AuthRuleRequest'
        - $ref: '#/components/schemas/AuthRuleResponseOnly'
    AuthRuleRequest:
      properties:
        account_tokens:
          description: Array of account_token(s) identifying the accounts that the Auth Rule applies to. Note that only this field or `card_tokens` can be provided for a given Auth Rule.
          example:
            - 3fa85f64-5717-4562-b3fc-2c963f66afa6
          items:
            type: string
          type: array
        allowed_countries:
          description: |
            Countries in which the Auth Rule permits transactions. Note that Lithic maintains a list of countries in which all transactions are blocked; "allowing" those countries in an Auth Rule does not override the Lithic-wide restrictions.
          example:
            - MEX
          items:
            type: string
          type: array
        allowed_mcc:
          description: Merchant category codes for which the Auth Rule permits transactions.
          example:
            - '3000'
          items:
            type: string
          type: array
        blocked_countries:
          description: Countries in which the Auth Rule automatically declines transactions.
          example:
            - CAN
            - USA
          items:
            type: string
          type: array
        blocked_mcc:
          description: Merchant category codes for which the Auth Rule automatically declines transactions.
          example:
            - '5811'
            - '5812'
          items:
            type: string
          type: array
        card_tokens:
          description: Array of card_token(s) identifying the cards that the Auth Rule applies to. Note that only this field or `account_tokens` can be provided for a given Auth Rule.
          example:
            - 3fa85f64-5717-4562-b3fc-2c963f66afa6
          items:
            type: string
          type: array
        program_level:
          description: Boolean indicating whether the Auth Rule is applied at the program level.
          example: false
          type: boolean
      type: object
    AuthRuleResponseOnly:
      properties:
        state:
          description: Indicates whether the Auth Rule is ACTIVE or INACTIVE
          enum:
            - ACTIVE
            - INACTIVE
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
      type: object
    Balance:
      description: Balance
      properties:
        available_amount:
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
          type: integer
        created:
          description: Date and time for when the balance was first created.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
          type: string
        financial_account_token:
          description: Globally unique identifier for the financial account that holds this balance.
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          format: uuid
          type: string
        financial_account_type:
          description: Type of financial account.
          enum:
            - ISSUING
            - OPERATING
            - RESERVE
          type: string
        last_transaction_event_token:
          description: Globally unique identifier for the last financial transaction event that impacted this balance.
          format: uuid
          type: string
        last_transaction_token:
          description: Globally unique identifier for the last financial transaction that impacted this balance.
          format: uuid
          type: string
        pending_amount:
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).
          type: integer
        total_amount:
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).
          type: integer
        updated:
          description: Date and time for when the balance was last updated.
          format: date-time
          type: string
      required:
        - available_amount
        - created
        - currency
        - financial_account_token
        - financial_account_type
        - last_transaction_event_token
        - last_transaction_token
        - pending_amount
        - total_amount
        - updated
      type: object
    FinancialAccountBalance:
      description: Balance of a Financial Account
      properties:
        available_amount:
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
          type: integer
        created:
          description: Date and time for when the balance was first created.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
          type: string
        token:
          description: Globally unique identifier for the financial account that holds this balance.
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          format: uuid
          type: string
        type:
          description: Type of financial account.
          enum:
            - ISSUING
            - OPERATING
            - RESERVE
          type: string
        last_transaction_event_token:
          description: Globally unique identifier for the last financial transaction event that impacted this balance.
          format: uuid
          type: string
        last_transaction_token:
          description: Globally unique identifier for the last financial transaction that impacted this balance.
          format: uuid
          type: string
        pending_amount:
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD).
          type: integer
        total_amount:
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD).
          type: integer
        updated:
          description: Date and time for when the balance was last updated.
          format: date-time
          type: string
      required:
        - available_amount
        - created
        - currency
        - token
        - type
        - last_transaction_event_token
        - last_transaction_token
        - pending_amount
        - total_amount
        - updated
      type: object
    BusinessEntity:
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: |
            Business's physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.
        dba_business_name:
          description: Any name that the business operates under that is not its legal business name (if applicable).
          type: string
        government_id:
          description: |
            Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.
          example: 114-123-1513
          type: string
        legal_business_name:
          description: Legal (formal) business name.
          example: Acme, Inc.
          type: string
        parent_company:
          description: Parent company name (if applicable).
          type: string
        phone_numbers:
          description: One or more of the business's phone number(s), entered as a list in E.164 format.
          items:
            description: Business phone number, entered in E.164 format.
            example: '+12124007676'
            type: string
          minItems: 1
          type: array
      required:
        - address
        - government_id
        - legal_business_name
        - phone_numbers
      type: object
    Card:
      properties:
        account_token:
          description: Globally unique identifier for the account to which the card belongs.
          example: f3f4918c-dee9-464d-a819-4aa42901d624
          format: uuid
          type: string
        auth_rule_tokens:
          description: |-
            List of identifiers for the Auth Rule(s) that are applied on the card.
            This field is deprecated and will no longer be populated in the `Card` object. The key will be removed from the schema in a future release. Use the `/auth_rules` endpoints to fetch Auth Rule information instead.
          items:
            type: string
          type: array
          deprecated: true
        card_program_token:
          description: Globally unique identifier for the card program on which the card exists.
          example: 5e9483eb-8103-4e16-9794-2106111b2eca
          format: uuid
          type: string
        cardholder_currency:
          description: 3-digit alphabetic ISO 4217 code for the currency of the cardholder.
          example: USD
          type: string
        created:
          description: An RFC 3339 timestamp for when the card was created. UTC time zone.
          example: '2021-06-28T22:53:15Z'
          format: date-time
          type: string
        cvv:
          description: Three digit cvv printed on the back of the card.
          example: '776'
          maxLength: 3
          minLength: 3
          type: string
          x-lithic-tag: Enterprise
        digital_card_art_token:
          description: Specifies the digital card art to be displayed in the user’s digital wallet after tokenization. This artwork must be approved by Mastercard and configured by Lithic to use. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
          example: 00000000-0000-0000-1000-000000000000
          format: uuid
          type: string
        exp_month:
          description: Two digit (MM) expiry month.
          example: '06'
          maxLength: 2
          minLength: 2
          type: string
          x-lithic-tag: Enterprise
        exp_year:
          description: Four digit (yyyy) expiry year.
          example: '2027'
          maxLength: 4
          minLength: 4
          type: string
          x-lithic-tag: Enterprise
        funding:
          description: 'Deprecated: Funding account for the card.'
          $ref: '#/components/schemas/FundingAccount'
        hostname:
          description: Hostname of card’s locked merchant (will be empty if not applicable).
          type: string
        last_four:
          description: Last four digits of the card number.
          maxLength: 4
          minLength: 4
          type: string
        memo:
          description: Friendly name to identify the card.
          example: New Card
          type: string
        pan:
          description: |
            Primary Account Number (PAN) (i.e. the card number). Customers must be PCI compliant to have PAN returned as a field in production. Please contact [support@lithic.com](mailto:support@lithic.com) for questions.
          example: '4111111289144142'
          maxLength: 16
          minLength: 16
          type: string
          x-lithic-tag: Enterprise
        pending_commands:
          description: 'Indicates if there are offline PIN changes pending card interaction with an offline PIN terminal. Possible commands are: CHANGE_PIN, UNBLOCK_PIN. Applicable only to cards issued in markets supporting offline PINs.'
          items:
            type: string
          type: array
        pin_status:
          description: Indicates if a card is blocked due a PIN status issue (e.g. excessive incorrect attempts).
          enum:
            - OK
            - BLOCKED
            - NOT_SET
          type: string
        product_id:
          description: Only applicable to cards of type `PHYSICAL`. This must be configured with Lithic before use. Specifies the configuration (i.e., physical card art) that the card should be manufactured with.
          example: '1'
          type: string
        spend_limit:
          description: Amount (in cents) to limit approved authorizations. Transaction requests above the spend limit will be declined.
          example: 1000
          type: integer
        spend_limit_duration:
          description: |-
            Spend limit duration values:
            * `ANNUALLY` - Card will authorize transactions up to spend limit for the trailing year.
            * `FOREVER` - Card will authorize only up to spend limit for the entire lifetime of the card.
            * `MONTHLY` - Card will authorize transactions up to spend limit for the trailing month. To support recurring monthly payments, which can occur on different day every month, the time window we consider for monthly velocity starts 6 days after the current calendar date one month prior.
            * `TRANSACTION` - Card will authorize multiple transactions if each individual transaction is under the spend limit.
          enum:
            - ANNUALLY
            - FOREVER
            - MONTHLY
            - TRANSACTION
          type: string
        state:
          description: |
            Card state values:
            * `CLOSED` - Card will no longer approve authorizations. Closing a card cannot be undone.
            * `OPEN` - Card will approve authorizations (if they match card and account parameters).
            * `PAUSED` - Card will decline authorizations, but can be resumed at a later time.
            * `PENDING_FULFILLMENT` - The initial state for cards of type `PHYSICAL`. The card is provisioned pending manufacturing and fulfillment. Cards in this state can accept authorizations for e-commerce purchases, but not for "Card Present" purchases where the physical card itself is present.
            * `PENDING_ACTIVATION` - At regular intervals, cards of type `PHYSICAL` in state `PENDING_FULFILLMENT` are sent to the card production warehouse and updated to state `PENDING_ACTIVATION` . Similar to `PENDING_FULFILLMENT`, cards in this state can be used for e-commerce transactions. API clients should update the card's state to `OPEN` only after the cardholder confirms receipt of the card.

            In sandbox, the same daily batch fulfillment occurs, but no cards are actually manufactured.
          enum:
            - CLOSED
            - OPEN
            - PAUSED
            - PENDING_ACTIVATION
            - PENDING_FULFILLMENT
          type: string
        token:
          description: Globally unique identifier.
          example: 7ef7d65c-9023-4da3-b113-3b8583fd7951
          format: uuid
          type: string
        type:
          description: |
            Card types:
            * `VIRTUAL` - Card will authorize at any merchant and can be added to a digital wallet like Apple Pay or Google Pay (if the card program is digital wallet-enabled).
            * `PHYSICAL` - Manufactured and sent to the cardholder. We offer white label branding, credit, ATM, PIN debit, chip/EMV, NFC and magstripe functionality. Reach out at [lithic.com/contact](https://lithic.com/contact) for more information.
            * `SINGLE_USE` - Card is closed upon first successful authorization.
            * `MERCHANT_LOCKED` - *[Deprecated]* Card is locked to the first merchant that successfully authorizes the card.
          enum:
            - MERCHANT_LOCKED
            - PHYSICAL
            - SINGLE_USE
            - VIRTUAL
          type: string
      required:
        - account_token
        - card_program_token
        - created
        - funding
        - last_four
        - pin_status
        - spend_limit
        - spend_limit_duration
        - state
        - token
        - type
      type: object
    CardAggregateBalance:
      description: Card Aggregate Balance across all end-user accounts
      properties:
        available_amount:
          description: Funds available for spend in the currency's smallest unit (e.g., cents for USD)
          type: integer
        created:
          description: Date and time for when the balance was first created.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the local currency of the balance.
          type: string
        last_card_token:
          description: Globally unique identifier for the card that had its balance updated most recently
          format: uuid
          type: string
        last_transaction_event_token:
          description: Globally unique identifier for the last transaction event that impacted this balance
          format: uuid
          type: string
        last_transaction_token:
          description: Globally unique identifier for the last transaction that impacted this balance
          format: uuid
          type: string
        pending_amount:
          description: Funds not available for spend due to card authorizations or pending ACH release. Shown in the currency's smallest unit (e.g., cents for USD)
          type: integer
        total_amount:
          description: The sum of available and pending balance in the currency's smallest unit (e.g., cents for USD)
          type: integer
        updated:
          description: Date and time for when the balance was last updated.
          format: date-time
          type: string
      required:
        - available_amount
        - created
        - currency
        - last_card_token
        - last_transaction_event_token
        - last_transaction_token
        - pending_amount
        - total_amount
        - updated
      type: object
    CardProgram:
      properties:
        cardholder_currency:
          description: 3-digit alphabetic ISO 4217 code for the currency of the cardholder.
          example: USD
          type: string
        created:
          description: Timestamp of when the card program was created.
          format: date-time
          type: string
        name:
          description: The name of the card program.
          example: My Prepaid Program
          type: string
        pan_range_end:
          description: The first digits of the card number that this card program ends with.
          example: '52304803'
          type: string
        pan_range_start:
          description: The first digits of the card number that this card program starts with.
          example: '52304803'
          type: string
        settlement_currencies:
          description: List of 3-digit alphabetic ISO 4217 codes for the currencies that the card program supports for settlement.
          example:
            - USD
            - CAD
          items:
            type: string
          type: array
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
      required:
        - created
        - name
        - pan_range_end
        - pan_range_start
        - token
      type: object
    CardSpendLimits:
      properties:
        available_spend_limit:
          properties:
            annually:
              description: The available spend limit (in cents) relative to the annual limit configured on the Card.
              example: 200000
              type: integer
            forever:
              description: The available spend limit (in cents) relative to the forever limit configured on the Card.
              example: 300000
              type: integer
            monthly:
              description: The available spend limit (in cents) relative to the monthly limit configured on the Card.
              example: 200000
              type: integer
          type: object
        spend_limit:
          properties:
            annually:
              description: The configured annual spend limit (in cents) on the Card.
              example: 500000
              type: integer
            forever:
              description: The configured forever spend limit (in cents) on the Card.
              example: 500000
              type: integer
            monthly:
              description: The configured monthly spend limit (in cents) on the Card.
              example: 500000
              type: integer
          type: object
        spend_velocity:
          properties:
            annually:
              description: Current annual spend velocity (in cents) on the Card. Present if annual spend limit is set.
              example: 300000
              type: integer
            forever:
              description: Current forever spend velocity (in cents) on the Card. Present if forever spend limit is set.
              example: 200000
              type: integer
            monthly:
              description: Current monthly spend velocity (in cents) on the Card. Present if monthly spend limit is set.
              example: 300000
              type: integer
          type: object
      required:
        - available_spend_limit
      type: object
    Carrier:
      properties:
        qr_code_url:
          description: QR code url to display on the card carrier
          type: string
      type: object
    CommonData:
      title: CommonData
      required:
        - tax
        - line_items
      type: object
      properties:
        customer_reference_number:
          title: Customer Reference Number
          description: A customer identifier.
          type: string
        merchant_reference_number:
          title: Merchant Reference Number
          description: A merchant identifier.
          type: string
        order_date:
          title: Order Date
          description: The date of the order.
          type: string
          format: date
        tax:
          $ref: '#/components/schemas/TaxData'
        line_items:
          title: Line Items
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
    CreateFinancialAccountRequest:
      properties:
        account_token:
          format: uuid
          title: Account token to create the new account under
          type: string
        nickname:
          maxLength: 256
          title: Nickname of the financial account
          type: string
        type:
          enum:
            - OPERATING
          title: Account Type
          type: string
        is_for_benefit_of:
          title: Is For Benefit Of
          type: boolean
      required:
        - nickname
        - type
      title: CreateFinancialAccountRequest
      type: object
    CreatePaymentRequest:
      properties:
        amount:
          minimum: 1
          title: Amount
          type: integer
        external_bank_account_token:
          format: uuid
          title: External Bank Account Token
          type: string
        financial_account_token:
          format: uuid
          title: Financial Account Token
          type: string
        memo:
          maxLength: 512
          title: Memo
          type: string
        method:
          enum:
            - ACH_NEXT_DAY
            - ACH_SAME_DAY
          title: Payment Method
          type: string
        method_attributes:
          $ref: '#/components/schemas/PaymentMethodRequestAttributes'
        token:
          description: Customer-provided token that will serve as an idempotency token. This token will become the transaction token.
          format: uuid
          title: Token
          type: string
        type:
          enum:
            - COLLECTION
            - PAYMENT
          title: Payment Type
          type: string
        user_defined_id:
          maxLength: 512
          title: User Defined Id
          type: string
      required:
        - amount
        - external_bank_account_token
        - financial_account_token
        - method
        - method_attributes
        - type
      title: CreatePaymentRequest
      type: object
    DigitalCardArt:
      properties:
        card_program_token:
          description: Globally unique identifier for the card program.
          format: uuid
          type: string
        created:
          description: Timestamp of when card art was created.
          format: date-time
          type: string
        description:
          description: Description of the card art.
          type: string
        is_card_program_default:
          description: Whether the card art is the default card art to be added upon tokenization.
          type: boolean
        is_enabled:
          description: Whether the card art is enabled.
          type: boolean
        network:
          description: Card network.
          enum:
            - MASTERCARD
            - VISA
          type: string
        token:
          description: Globally unique identifier for the card art.
          format: uuid
          type: string
      required:
        - card_program_token
        - created
        - description
        - is_enabled
        - network
        - token
      type: object
    Dispute:
      description: Dispute.
      properties:
        amount:
          description: Amount under dispute. May be different from the original transaction amount.
          type: integer
        arbitration_date:
          description: Date dispute entered arbitration.
          format: date-time
          type:
            - string
            - 'null'
        created:
          description: Timestamp of when first Dispute was reported.
          format: date-time
          type: string
        customer_filed_date:
          description: Date that the dispute was filed by the customer making the dispute.
          format: date-time
          type:
            - string
            - 'null'
        customer_note:
          description: End customer description of the reason for the dispute.
          maxLength: 10000
          type:
            - string
            - 'null'
        network_claim_ids:
          description: Unique identifiers for the dispute from the network.
          oneOf:
            - type: array
              items:
                type: string
            - type: 'null'
        network_filed_date:
          description: Date that the dispute was submitted to the network.
          format: date-time
          type:
            - string
            - 'null'
        network_reason_code:
          description: Network reason code used to file the dispute.
          type:
            - string
            - 'null'
        prearbitration_date:
          description: Date dispute entered pre-arbitration.
          format: date-time
          type:
            - string
            - 'null'
        primary_claim_id:
          description: Unique identifier for the dispute from the network. If there are multiple, this will be the first claim id set by the network
          type:
            - string
            - 'null'
        reason:
          description: |
            Dispute reason:
            * `ATM_CASH_MISDISPENSE`: ATM cash misdispense.
            * `CANCELLED`: Transaction was cancelled by the customer.
            * `DUPLICATED`: The transaction was a duplicate.
            * `FRAUD_CARD_NOT_PRESENT`: Fraudulent transaction, card not present.
            * `FRAUD_CARD_PRESENT`: Fraudulent transaction, card present.
            * `FRAUD_OTHER`: Fraudulent transaction, other types such as questionable merchant activity.
            * `GOODS_SERVICES_NOT_AS_DESCRIBED`: The goods or services were not as described.
            * `GOODS_SERVICES_NOT_RECEIVED`: The goods or services were not received.
            * `INCORRECT_AMOUNT`: The transaction amount was incorrect.
            * `MISSING_AUTH`: The transaction was missing authorization.
            * `OTHER`: Other reason.
            * `PROCESSING_ERROR`: Processing error.
            * `REFUND_NOT_PROCESSED`: The refund was not processed.
            * `RECURRING_TRANSACTION_NOT_CANCELLED`: The recurring transaction was not cancelled.
          enum:
            - ATM_CASH_MISDISPENSE
            - CANCELLED
            - DUPLICATED
            - FRAUD_CARD_NOT_PRESENT
            - FRAUD_CARD_PRESENT
            - FRAUD_OTHER
            - GOODS_SERVICES_NOT_AS_DESCRIBED
            - GOODS_SERVICES_NOT_RECEIVED
            - INCORRECT_AMOUNT
            - MISSING_AUTH
            - OTHER
            - PROCESSING_ERROR
            - RECURRING_TRANSACTION_NOT_CANCELLED
            - REFUND_NOT_PROCESSED
          type: string
        representment_date:
          description: Date the representment was received.
          format: date-time
          type:
            - string
            - 'null'
        resolution_amount:
          description: Resolution amount net of network fees.
          type:
            - integer
            - 'null'
        resolution_date:
          description: Date that the dispute was resolved.
          format: date-time
          type:
            - string
            - 'null'
        resolution_note:
          description: Note by Dispute team on the case resolution.
          maxLength: 10000
          type:
            - string
            - 'null'
        resolution_reason:
          description: |
            Reason for the dispute resolution:
            * `CASE_LOST`: This case was lost at final arbitration.
            * `NETWORK_REJECTED`: Network rejected.
            * `NO_DISPUTE_RIGHTS_3DS`: No dispute rights, 3DS.
            * `NO_DISPUTE_RIGHTS_BELOW_THRESHOLD`: No dispute rights, below threshold.
            * `NO_DISPUTE_RIGHTS_CONTACTLESS`: No dispute rights, contactless.
            * `NO_DISPUTE_RIGHTS_HYBRID`: No dispute rights, hybrid.
            * `NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS`: No dispute rights, max chargebacks.
            * `NO_DISPUTE_RIGHTS_OTHER`: No dispute rights, other.
            * `PAST_FILING_DATE`: Past filing date.
            * `PREARBITRATION_REJECTED`: Prearbitration rejected.
            * `PROCESSOR_REJECTED_OTHER`: Processor rejected, other.
            * `REFUNDED`: Refunded.
            * `REFUNDED_AFTER_CHARGEBACK`: Refunded after chargeback.
            * `WITHDRAWN`: Withdrawn.
            * `WON_ARBITRATION`: Won arbitration.
            * `WON_FIRST_CHARGEBACK`: Won first chargeback.
            * `WON_PREARBITRATION`: Won prearbitration.
          enum:
            - CASE_LOST
            - NETWORK_REJECTED
            - NO_DISPUTE_RIGHTS_3DS
            - NO_DISPUTE_RIGHTS_BELOW_THRESHOLD
            - NO_DISPUTE_RIGHTS_CONTACTLESS
            - NO_DISPUTE_RIGHTS_HYBRID
            - NO_DISPUTE_RIGHTS_MAX_CHARGEBACKS
            - NO_DISPUTE_RIGHTS_OTHER
            - PAST_FILING_DATE
            - PREARBITRATION_REJECTED
            - PROCESSOR_REJECTED_OTHER
            - REFUNDED
            - REFUNDED_AFTER_CHARGEBACK
            - WITHDRAWN
            - WON_ARBITRATION
            - WON_FIRST_CHARGEBACK
            - WON_PREARBITRATION
          type:
            - string
            - 'null'
        status:
          description: |
            Status types:
            * `NEW` - New dispute case is opened.
            * `PENDING_CUSTOMER` - Lithic is waiting for customer to provide more information.
            * `SUBMITTED` - Dispute is submitted to the card network.
            * `REPRESENTMENT` - Case has entered second presentment.
            * `PREARBITRATION` - Case has entered prearbitration.
            * `ARBITRATION` - Case has entered arbitration.
            * `CASE_WON` - Case was won and credit will be issued.
            * `CASE_CLOSED` - Case was lost or withdrawn.
          enum:
            - ARBITRATION
            - CASE_CLOSED
            - CASE_WON
            - NEW
            - PENDING_CUSTOMER
            - PREARBITRATION
            - REPRESENTMENT
            - SUBMITTED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        transaction_token:
          description: The transaction that is being disputed. A transaction can only be disputed once but may have multiple dispute cases.
          format: uuid
          type: string
      required:
        - amount
        - arbitration_date
        - created
        - customer_filed_date
        - customer_note
        - network_claim_ids
        - network_filed_date
        - network_reason_code
        - prearbitration_date
        - primary_claim_id
        - reason
        - representment_date
        - resolution_amount
        - resolution_date
        - resolution_note
        - resolution_reason
        - status
        - token
        - transaction_token
      type: object
    DisputeEvidence:
      description: Dispute evidence.
      properties:
        created:
          description: Timestamp of when dispute evidence was created.
          format: date-time
          type: string
        dispute_token:
          description: Dispute token evidence is attached to.
          format: uuid
          type: string
        download_url:
          description: URL to download evidence. Only shown when `upload_status` is `UPLOADED`.
          type: string
        filename:
          description: File name of evidence. Recommended to give the dispute evidence a human-readable identifier.
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        upload_status:
          description: |
            Upload status types:
            * `DELETED` - Evidence was deleted.
            * `ERROR` - Evidence upload failed.
            * `PENDING` - Evidence is pending upload.
            * `REJECTED` - Evidence was rejected.
            * `UPLOADED` - Evidence was uploaded.
          enum:
            - DELETED
            - ERROR
            - PENDING
            - REJECTED
            - UPLOADED
          type: string
        upload_url:
          description: URL to upload evidence. Only shown when `upload_status` is `PENDING`.
          type: string
      required:
        - created
        - dispute_token
        - token
        - upload_status
      type: object
    EnhancedData:
      title: EnhancedData
      required:
        - token
        - transaction_token
        - event_token
        - common
        - fleet
      type: object
      properties:
        token:
          title: Token
          description: A unique identifier for the enhanced commercial data.
          type: string
          format: uuid
        transaction_token:
          title: Transaction Token
          description: The token of the transaction that the enhanced data is associated with.
          type: string
          format: uuid
        event_token:
          title: Event Token
          description: The token of the event that the enhanced data is associated with.
          type: string
          format: uuid
        common:
          $ref: '#/components/schemas/CommonData'
        fleet:
          title: Fleet
          type: array
          items:
            $ref: '#/components/schemas/Fleet'
    EnhancedDataListResponse:
      title: EnhancedDataListResponse
      required:
        - data
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/EnhancedData'
    Error:
      properties:
        debugging_request_id:
          description: Identifier to help debug an error.
          format: uuid
          type: string
        message:
          description: Explanation of error response.
          type: string
      required:
        - debugging_request_id
        - message
      type: object
    Event:
      description: A single event that affects the transaction state and lifecycle.
      properties:
        created:
          description: |
            An RFC 3339 timestamp for when the event was created. UTC time zone.

            If no timezone is specified, UTC will be used.
          format: date-time
          type: string
        event_type:
          description: |
            Event types:
            * `account_holder.created` - Notification that a new account holder has been created and was not rejected.
            * `account_holder.updated` - Notification that an account holder was updated.
            * `account_holder.verification` - Notification than an account holder's identity verification is complete.
            * `card.created` - Notification that a card has been created.
            * `card.renewed` - Notification that a card has been renewed.
            * `card.reissued` - Notification that a card has been reissued.
            * `card.shipped` - Physical card shipment notification. See https://docs.lithic.com/docs/cards#physical-card-shipped-webhook.
            * `card_transaction.updated` - Transaction Lifecycle webhook. See https://docs.lithic.com/docs/transaction-webhooks.
            * `dispute.updated` - A dispute has been updated.
            * `digital_wallet.tokenization_approval_request` - Card network's request to Lithic to activate a digital wallet token.
            * `digital_wallet.tokenization_result` - Notification of the end result of a tokenization, whether successful or failed.
            * `digital_wallet.tokenization_two_factor_authentication_code` - A code to be passed to an end user to complete digital wallet authentication. See https://docs.lithic.com/docs/tokenization-control#digital-wallet-tokenization-auth-code.
            * `digital_wallet.tokenization_two_factor_authentication_code_sent` - Notification that a two factor authentication code for activating a digital wallet has been sent to the end user.
            * `digital_wallet.tokenization_updated` - Notification that a digital wallet tokenization's status has changed.
          enum:
            - account_holder.created
            - account_holder.updated
            - account_holder.verification
            - auth_rules.performance_report.created
            - balance.updated
            - book_transfer_transaction.created
            - card.created
            - card.renewed
            - card.reissued
            - card.shipped
            - card_transaction.updated
            - digital_wallet.tokenization_approval_request
            - digital_wallet.tokenization_result
            - digital_wallet.tokenization_two_factor_authentication_code
            - digital_wallet.tokenization_two_factor_authentication_code_sent
            - digital_wallet.tokenization_updated
            - dispute.updated
            - dispute_evidence.upload_failed
            - external_bank_account.created
            - external_bank_account.updated
            - external_payment.created
            - external_payment.updated
            - financial_account.created
            - financial_account.updated
            - loan_tape.created
            - loan_tape.updated
            - management_operation.created
            - management_operation.updated
            - payment_transaction.created
            - payment_transaction.updated
            - settlement_report.updated
            - statements.created
            - three_ds_authentication.created
            - tokenization.approval_request
            - tokenization.result
            - tokenization.two_factor_authentication_code
            - tokenization.two_factor_authentication_code_sent
            - tokenization.updated
          type: string
        payload:
          type: object
        token:
          description: Globally unique identifier.
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga1
          type: string
      required:
        - created
        - event_type
        - payload
        - token
      type: object
    EventSubscription:
      description: A subscription to specific event types.
      properties:
        description:
          description: A description of the subscription.
          type: string
        disabled:
          description: Whether the subscription is disabled.
          type: boolean
        event_types:
          items:
            enum:
              - account_holder.created
              - account_holder.updated
              - account_holder.verification
              - auth_rules.performance_report.created
              - balance.updated
              - book_transfer_transaction.created
              - card.created
              - card.renewed
              - card.reissued
              - card.shipped
              - card_transaction.updated
              - digital_wallet.tokenization_approval_request
              - digital_wallet.tokenization_result
              - digital_wallet.tokenization_two_factor_authentication_code
              - digital_wallet.tokenization_two_factor_authentication_code_sent
              - digital_wallet.tokenization_updated
              - dispute.updated
              - dispute_evidence.upload_failed
              - external_bank_account.created
              - external_bank_account.updated
              - external_payment.created
              - external_payment.updated
              - financial_account.created
              - financial_account.updated
              - loan_tape.created
              - loan_tape.updated
              - management_operation.created
              - management_operation.updated
              - payment_transaction.created
              - payment_transaction.updated
              - settlement_report.updated
              - statements.created
              - three_ds_authentication.created
              - tokenization.approval_request
              - tokenization.result
              - tokenization.two_factor_authentication_code
              - tokenization.two_factor_authentication_code_sent
              - tokenization.updated
            type: string
          type: array
        token:
          description: Globally unique identifier.
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
          type: string
        url:
          format: uri
          type: string
      required:
        - description
        - disabled
        - token
        - url
      type: object
    FinancialEvent:
      properties:
        amount:
          description: Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        created:
          description: Date and time when the financial event occurred. UTC time zone.
          format: date-time
          type: string
        result:
          description: APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/financial_event_type'
      type: object
    Fleet:
      title: Fleet
      required:
        - fuel
        - amount_totals
      type: object
      properties:
        service_type:
          description: The type of fuel service.
          $ref: '#/components/schemas/ServiceType'
        odometer:
          title: Odometer
          description: The odometer reading entered into the terminal at the time of sale.
          type: integer
        vehicle_number:
          title: Vehicle Number
          description: The vehicle number entered into the terminal at the time of sale, with leading zeros stripped.
          type: string
        driver_number:
          title: Driver Number
          description: The driver number entered into the terminal at the time of sale, with leading zeros stripped.
          type: string
        fuel:
          $ref: '#/components/schemas/FuelData'
        amount_totals:
          $ref: '#/components/schemas/AmountTotals'
    FuelData:
      title: FuelData
      type: object
      properties:
        type:
          $ref: '#/components/schemas/FuelType'
        quantity:
          title: Quantity
          description: The quantity of fuel purchased.
          type: number
        unit_price:
          title: Unit Price
          description: The price per unit of fuel.
          type: integer
        unit_of_measure:
          $ref: '#/components/schemas/FuelUnitOfMeasure'
    FuelUnitOfMeasure:
      title: FuelUnitOfMeasure
      description: Unit of measure for fuel disbursement.
      enum:
        - GALLONS
        - LITERS
        - POUNDS
        - KILOGRAMS
        - IMPERIAL_GALLONS
        - NOT_APPLICABLE
        - UNKNOWN
    FuelType:
      title: FuelType
      description: The type of fuel purchased.
      enum:
        - UNKNOWN
        - REGULAR
        - MID_PLUS
        - PREMIUM_SUPER
        - MID_PLUS_2
        - PREMIUM_SUPER_2
        - ETHANOL_5_7_BLEND
        - MID_PLUS_ETHANOL_5_7_PERCENT_BLEND
        - PREMIUM_SUPER_ETHANOL_5_7_PERCENT_BLEND
        - ETHANOL_7_7_PERCENT_BLEND
        - MID_PLUS_ETHANOL_7_7_PERCENT_BLEND
        - GREEN_GASOLINE_REGULAR
        - GREEN_GASOLINE_MID_PLUS
        - GREEN_GASOLINE_PREMIUM_SUPER
        - REGULAR_DIESEL_2
        - PREMIUM_DIESEL_2
        - REGULAR_DIESEL_1
        - COMPRESSED_NATURAL_GAS
        - LIQUID_PROPANE_GAS
        - LIQUID_NATURAL_GAS
        - E_85
        - REFORMULATED_1
        - REFORMULATED_2
        - REFORMULATED_3
        - REFORMULATED_4
        - REFORMULATED_5
        - DIESEL_OFF_ROAD_1_AND_2_NON_TAXABLE
        - DIESEL_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_OFF_ROAD_NON_TAXABLE
        - UNDEFINED_FUEL
        - RACING_FUEL
        - MID_PLUS_2_10_PERCENT_BLEND
        - PREMIUM_SUPER_2_10_PERCENT_BLEND
        - MID_PLUS_ETHANOL_2_15_PERCENT_BLEND
        - PREMIUM_SUPER_ETHANOL_2_15_PERCENT_BLEND
        - PREMIUM_SUPER_ETHANOL_7_7_PERCENT_BLEND
        - REGULAR_ETHANOL_10_PERCENT_BLEND
        - MID_PLUS_ETHANOL_10_PERCENT_BLEND
        - PREMIUM_SUPER_ETHANOL_10_PERCENT_BLEND
        - B2_DIESEL_BLEND_2_PERCENT_BIODIESEL
        - B5_DIESEL_BLEND_5_PERCENT_BIODIESEL
        - B10_DIESEL_BLEND_10_PERCENT_BIODIESEL
        - B11_DIESEL_BLEND_11_PERCENT_BIODIESEL
        - B15_DIESEL_BLEND_15_PERCENT_BIODIESEL
        - B20_DIESEL_BLEND_20_PERCENT_BIODIESEL
        - B100_DIESEL_BLEND_100_PERCENT_BIODIESEL
        - B1_DIESEL_BLEND_1_PERCENT_BIODIESEL
        - ADDITIZED_DIESEL_2
        - ADDITIZED_DIESEL_3
        - RENEWABLE_DIESEL_R95
        - RENEWABLE_DIESEL_BIODIESEL_6_20_PERCENT
        - DIESEL_EXHAUST_FLUID
        - PREMIUM_DIESEL_1
        - REGULAR_ETHANOL_15_PERCENT_BLEND
        - MID_PLUS_ETHANOL_15_PERCENT_BLEND
        - PREMIUM_SUPER_ETHANOL_15_PERCENT_BLEND
        - PREMIUM_DIESEL_BLEND_LESS_THAN_20_PERCENT_BIODIESEL
        - PREMIUM_DIESEL_BLEND_GREATER_THAN_20_PERCENT_BIODIESEL
        - B75_DIESEL_BLEND_75_PERCENT_BIODIESEL
        - B99_DIESEL_BLEND_99_PERCENT_BIODIESEL
        - MISCELLANEOUS_FUEL
        - JET_FUEL
        - AVIATION_FUEL_REGULAR
        - AVIATION_FUEL_PREMIUM
        - AVIATION_FUEL_JP8
        - AVIATION_FUEL_4
        - AVIATION_FUEL_5
        - BIOJET_DIESEL
        - AVIATION_BIOFUEL_GASOLINE
        - MISCELLANEOUS_AVIATION_FUEL
        - MARINE_FUEL_1
        - MARINE_FUEL_2
        - MARINE_FUEL_3
        - MARINE_FUEL_4
        - MARINE_FUEL_5
        - MARINE_OTHER
        - MARINE_DIESEL
        - MISCELLANEOUS_MARINE_FUEL
        - KEROSENE_LOW_SULFUR
        - WHITE_GAS
        - HEATING_OIL
        - OTHER_FUEL_NON_TAXABLE
        - KEROSENE_ULTRA_LOW_SULFUR
        - KEROSENE_LOW_SULFUR_NON_TAXABLE
        - KEROSENE_ULTRA_LOW_SULFUR_NON_TAXABLE
        - EVC_1_LEVEL_1_CHARGE_110V_15_AMP
        - EVC_2_LEVEL_2_CHARGE_240V_15_40_AMP
        - EVC_3_LEVEL_3_CHARGE_480V_3_PHASE_CHARGE
        - BIODIESEL_BLEND_2_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_5_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_10_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_11_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_15_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_20_PERCENT_OFF_ROAD_NON_TAXABLE
        - DIESEL_1_OFF_ROAD_NON_TAXABLE
        - DIESEL_2_OFF_ROAD_NON_TAXABLE
        - DIESEL_1_PREMIUM_OFF_ROAD_NON_TAXABLE
        - DIESEL_2_PREMIUM_OFF_ROAD_NON_TAXABLE
        - ADDITIVE_DOSAGE
        - ETHANOL_BLENDS_E16_E84
        - LOW_OCTANE_UNL
        - BLENDED_DIESEL_1_AND_2
        - OFF_ROAD_REGULAR_NON_TAXABLE
        - OFF_ROAD_MID_PLUS_NON_TAXABLE
        - OFF_ROAD_PREMIUM_SUPER_NON_TAXABLE
        - OFF_ROAD_MID_PLUS_2_NON_TAXABLE
        - OFF_ROAD_PREMIUM_SUPER_2_NON_TAXABLE
        - RECREATIONAL_FUEL_90_OCTANE
        - HYDROGEN_H35
        - HYDROGEN_H70
        - RENEWABLE_DIESEL_R95_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_1_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_75_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_99_PERCENT_OFF_ROAD_NON_TAXABLE
        - BIODIESEL_BLEND_100_PERCENT_OFF_ROAD_NON_TAXABLE
        - RENEWABLE_DIESEL_BIODIESEL_6_20_PERCENT_OFF_ROAD_NON_TAXABLE
        - MISCELLANEOUS_OTHER_FUEL
    PaymentEvent:
      properties:
        amount:
          description: Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        created:
          description: Date and time when the financial event occurred. UTC time zone.
          format: date-time
          type: string
        detailed_results:
          description: More detailed reasons for the event
          items:
            enum:
              - APPROVED
              - FUNDS_INSUFFICIENT
              - ACCOUNT_INVALID
              - PROGRAM_TRANSACTION_LIMIT_EXCEEDED
              - PROGRAM_DAILY_LIMIT_EXCEEDED
              - PROGRAM_MONTHLY_LIMIT_EXCEEDED
            type: string
          type: array
        result:
          description: APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/PaymentEventType'
      required:
        - amount
        - created
        - result
        - token
        - type
      type: object
    TransferEvent:
      allOf:
        - $ref: '#/components/schemas/FinancialEvent'
        - properties:
            subtype:
              description: The program specific subtype code for the specified category/type.
              type: string
            memo:
              description: Memo for the transfer.
              type: string
            detailed_results:
              description: Detailed Results
              type: array
              items:
                enum:
                  - APPROVED
                  - FUNDS_INSUFFICIENT
                type: string
        - required:
            - amount
            - type
            - result
            - created
            - token
            - subtype
            - memo
    BookTransferEvent:
      properties:
        amount:
          description: Amount of the financial event that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        type:
          description: Type of the book transfer
          type: string
        result:
          description: APPROVED financial events were successful while DECLINED financial events were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        created:
          description: Date and time when the financial event occurred. UTC time zone.
          format: date-time
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        subtype:
          description: The program specific subtype code for the specified category/type.
          type: string
        memo:
          description: Memo for the transfer.
          type: string
        detailed_results:
          description: Detailed Results
          type: array
          items:
            enum:
              - APPROVED
              - FUNDS_INSUFFICIENT
            type: string
      required:
        - amount
        - type
        - result
        - created
        - token
        - subtype
        - memo
        - detailed_results
    PaymentEventType:
      description: |-
        Event types:
        * `ACH_ORIGINATION_INITIATED` - ACH origination received and pending approval/release from an ACH hold.
        * `ACH_ORIGINATION_REVIEWED` - ACH origination has completed the review process.
        * `ACH_ORIGINATION_CANCELLED` - ACH origination has been cancelled.
        * `ACH_ORIGINATION_PROCESSED` - ACH origination has been processed and sent to the fed.
        * `ACH_ORIGINATION_SETTLED` - ACH origination has settled.
        * `ACH_ORIGINATION_RELEASED` - ACH origination released from pending to available balance.
        * `ACH_RETURN_PROCESSED` - ACH origination returned by the Receiving Depository Financial Institution.
        * `ACH_RECEIPT_PROCESSED` - ACH receipt pending release from an ACH holder.
        * `ACH_RETURN_INITIATED` - ACH initiated return for a ACH receipt.
        * `ACH_RECEIPT_SETTLED` - ACH receipt funds have settled.
        * `ACH_RECEIPT_RELEASED` - ACH receipt released from pending to available balance.
      enum:
        - ACH_ORIGINATION_CANCELLED
        - ACH_ORIGINATION_INITIATED
        - ACH_ORIGINATION_PROCESSED
        - ACH_ORIGINATION_SETTLED
        - ACH_ORIGINATION_RELEASED
        - ACH_ORIGINATION_REVIEWED
        - ACH_RECEIPT_PROCESSED
        - ACH_RECEIPT_SETTLED
        - ACH_RETURN_INITIATED
        - ACH_RETURN_PROCESSED
      type: string
    FinancialTransaction:
      properties:
        category:
          description: |
            Status types:
            * `CARD` - Issuing card transaction.
            * `ACH` - Transaction over ACH.
            * `TRANSFER` - Internal transfer of funds between financial accounts in your program.
          enum:
            - ACH
            - CARD
            - TRANSFER
          type: string
        created:
          description: Date and time when the financial transaction first occurred. UTC time zone.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction.
          type: string
        descriptor:
          description: A string that provides a description of the financial transaction; may be useful to display to users.
          type: string
        events:
          description: A list of all financial events that have modified this financial transaction.
          items:
            $ref: '#/components/schemas/FinancialEvent'
          type: array
        pending_amount:
          description: |
            Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.
            The value of this field will go to zero over time once the financial transaction is settled.
          type: integer
        result:
          description: APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        settled_amount:
          description: Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents), including any acquirer fees. This may change over time.
          type: integer
        status:
          description: |
            Status types:
            * `DECLINED` - The transaction was declined.
            * `EXPIRED` - The authorization as it has passed its expiration time. Card transaction only.
            * `PENDING` - The transaction is expected to settle.
            * `RETURNED` - The transaction has been returned.
            * `SETTLED` - The transaction is completed.
            * `VOIDED` - The transaction was voided. Card transaction only.
          enum:
            - DECLINED
            - EXPIRED
            - PENDING
            - RETURNED
            - SETTLED
            - VOIDED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        updated:
          description: Date and time when the financial transaction was last updated. UTC time zone.
          format: date-time
          type: string
      required:
        - category
        - created
        - currency
        - descriptor
        - events
        - pending_amount
        - result
        - settled_amount
        - status
        - token
        - updated
      type: object
    FundingAccount:
      properties:
        account_name:
          description: Account name identifying the funding source. This may be `null`.
          type: string
        created:
          description: An RFC 3339 string representing when this funding source was added to the Lithic account. This may be `null`. UTC time zone.
          format: date-time
          type: string
        last_four:
          description: The last 4 digits of the account (e.g. bank account, debit card) associated with this FundingAccount. This may be null.
          maxLength: 4
          minLength: 4
          type: string
        nickname:
          description: The nickname given to the `FundingAccount` or `null` if it has no nickname.
          maxLength: 255
          minLength: 1
          type: string
        state:
          description: |
            State of funding source.

            Funding source states:
            * `ENABLED` - The funding account is available to use for card creation and transactions.
            * `PENDING` - The funding account is still being verified e.g. bank micro-deposits verification.
            * `DELETED` - The founding account has been deleted.
          enum:
            - DELETED
            - ENABLED
            - PENDING
          type: string
        token:
          description: A globally unique identifier for this FundingAccount.
          format: uuid
          type: string
        type:
          description: |
            Types of funding source:
            * `DEPOSITORY_CHECKING` - Bank checking account.
            * `DEPOSITORY_SAVINGS` - Bank savings account.
          enum:
            - DEPOSITORY_CHECKING
            - DEPOSITORY_SAVINGS
          type: string
      required:
        - created
        - last_four
        - state
        - token
        - type
      type: object
    Individual:
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: |
            Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.
        dob:
          description: Individual's date of birth, as an RFC 3339 date.
          example: '1991-03-08 08:00:00'
          type: string
        email:
          description: |
            Individual's email address.
            If utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.
          example: tom@middle-earth.com
          type: string
        first_name:
          description: Individual's first name, as it appears on government-issued identity documents.
          example: Tom
          type: string
        government_id:
          description: |
            Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens
          example: 111-23-1412
          type: string
        last_name:
          description: Individual's last name, as it appears on government-issued identity documents.
          example: Bombadil
          type: string
        phone_number:
          description: |
            Individual's phone number, entered in E.164 format.
          example: '+12124007676'
          type: string
      type: object
    LineItem:
      title: LineItem
      description: An L2/L3 enhanced commercial data line item.
      type: object
      properties:
        product_code:
          title: Product Code
          description: An identifier for the item purchased.
          type: string
        description:
          title: Description
          description: A human-readable description of the item.
          type: string
        quantity:
          title: Quantity
          description: The quantity of the item purchased.
          type: number
        amount:
          title: Amount
          description: The price of the item purchased in merchant currency.
          type: number
    Kyb:
      properties:
        beneficial_owner_entities:
          description: |
            List of all entities with >25% ownership in the company. If no entity or individual owns >25% of the company, and the largest shareholder is an entity, please identify them in this field. See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background. If no business owner is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_individuals` must be populated. on entities that should be included.
          items:
            $ref: '#/components/schemas/BusinessEntity'
          minItems: 0
          type: array
        beneficial_owner_individuals:
          description: |
            List of all direct and indirect individuals with >25% ownership in the company. If no entity or individual owns >25% of the company,
            and the largest shareholder is an individual, please identify them in this field.
            See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section I) for more background on individuals that should be included. If no individual is an entity, pass in an empty list. However, either this parameter or `beneficial_owner_entities` must be populated.
          items:
            $ref: '#/components/schemas/KybIndividual'
          minItems: 0
          type: array
        business_entity:
          $ref: '#/components/schemas/BusinessEntity'
          description: Information for business for which the account is being opened and KYB is being run.
        control_person:
          $ref: '#/components/schemas/KybIndividual'
          description: |
            An individual with significant responsibility for managing the legal entity (e.g., a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer,
            Managing Member, General Partner, President, Vice President, or Treasurer). This can be an executive, or someone who will have program-wide access
            to the cards that Lithic will provide. In some cases, this individual could also be a beneficial owner listed above.
            See [FinCEN requirements](https://www.fincen.gov/sites/default/files/shared/CDD_Rev6.7_Sept_2017_Certificate.pdf) (Section II) for more background.
        external_id:
          description: A user provided id that can be used to link an account holder with an external system
          type: string
        kyb_passed_timestamp:
          description: |
            An RFC 3339 timestamp indicating when precomputed KYC was completed on the business with a pass result.

            This field is required only if workflow type is `KYB_BYO`.
          example: '2022-03-08 08:00:00'
          type: string
        nature_of_business:
          description: Short description of the company's line of business (i.e., what does the company do?).
          example: Software company selling solutions to the restaurant industry
          type: string
        tos_timestamp:
          description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
          example: '2022-03-08 08:00:00'
          type: string
        website_url:
          description: Company website URL.
          example: www.mybusiness.com
          type: string
        workflow:
          description: Specifies the type of KYB workflow to run.
          enum:
            - KYB_BASIC
            - KYB_BYO
          type: string
      required:
        - beneficial_owner_entities
        - beneficial_owner_individuals
        - business_entity
        - control_person
        - nature_of_business
        - tos_timestamp
        - workflow
      type: object
    KybIndividual:
      allOf:
        - $ref: '#/components/schemas/Individual'
        - required:
            - address
            - dob
            - email
            - first_name
            - government_id
            - last_name
          type: object
      description: Individuals associated with a KYB application. Phone number is optional.
    Kyc:
      properties:
        external_id:
          description: A user provided id that can be used to link an account holder with an external system
          type: string
        individual:
          $ref: '#/components/schemas/KycIndividual'
          description: Information on individual for whom the account is being opened and KYC is being run.
        kyc_passed_timestamp:
          description: |
            An RFC 3339 timestamp indicating when precomputed KYC was completed on the individual with a pass result.

            This field is required only if workflow type is `KYC_BYO`.
          type: string
        tos_timestamp:
          description: An RFC 3339 timestamp indicating when the account holder accepted the applicable legal agreements (e.g., cardholder terms) as agreed upon during API customer's implementation with Lithic.
          type: string
        workflow:
          description: Specifies the type of KYC workflow to run.
          enum:
            - KYC_ADVANCED
            - KYC_BASIC
            - KYC_BYO
          type: string
      required:
        - individual
        - tos_timestamp
        - workflow
      type: object
    KycExempt:
      properties:
        address:
          $ref: '#/components/schemas/Address'
          description: |
            KYC Exempt user's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.
        business_account_token:
          description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
          type: string
        email:
          description: The KYC Exempt user's email
          type: string
        external_id:
          description: A user provided id that can be used to link an account holder with an external system
          type: string
        first_name:
          description: The KYC Exempt user's first name
          type: string
        kyc_exemption_type:
          description: Specifies the type of KYC Exempt user
          enum:
            - AUTHORIZED_USER
            - PREPAID_CARD_USER
          type: string
        last_name:
          description: The KYC Exempt user's last name
          type: string
        phone_number:
          description: The KYC Exempt user's phone number
          type: string
        workflow:
          description: Specifies the workflow type. This must be 'KYC_EXEMPT'
          enum:
            - KYC_EXEMPT
          type: string
      required:
        - address
        - email
        - first_name
        - kyc_exemption_type
        - last_name
        - phone_number
        - workflow
      type: object
    KycIndividual:
      allOf:
        - $ref: '#/components/schemas/Individual'
        - required:
            - address
            - dob
            - email
            - first_name
            - government_id
            - last_name
            - phone_number
          type: object
      description: Individuals associated with a KYC application.
    MessageAttempt:
      description: A subscription to specific event types.
      properties:
        created:
          description: |
            An RFC 3339 timestamp for when the event was created. UTC time zone.

            If no timezone is specified, UTC will be used.
          format: date-time
          type: string
        event_subscription_token:
          description: Globally unique identifier.
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga1
          type: string
        event_token:
          description: Globally unique identifier.
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga1
          type: string
        response:
          description: The response body from the event subscription's URL.
          type: string
        response_status_code:
          description: The response status code from the event subscription's URL.
          type: integer
        status:
          description: The status of the event attempt.
          enum:
            - FAILED
            - PENDING
            - SENDING
            - SUCCESS
          type: string
        token:
          description: Globally unique identifier.
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        url:
          format: uri
          type: string
      required:
        - created
        - event_subscription_token
        - event_token
        - response
        - response_status_code
        - status
        - token
        - url
      type: object
    PaymentMethodAttributes:
      properties:
        company_id:
          title: Company ID
          type:
            - string
            - 'null'
        receipt_routing_number:
          title: Company ID
          type:
            - string
            - 'null'
        retries:
          title: Retries
          type:
            - integer
            - 'null'
        return_reason_code:
          title: Return Reason Code
          type:
            - string
            - 'null'
        sec_code:
          enum:
            - CCD
            - PPD
            - WEB
          title: SEC Code
          type: string
        trace_numbers:
          title: Trace Numbers associated with payment
          items:
            type:
              - string
              - 'null'
          type: array
      required:
        - company_id
        - receipt_routing_number
        - retries
        - return_reason_code
        - sec_code
        - trace_numbers
      title: PaymentMethodAttributes
      type: object
    PaymentMethodRequestAttributes:
      properties:
        sec_code:
          enum:
            - CCD
            - PPD
            - WEB
          title: SEC Code
          type: string
      required:
        - sec_code
      title: PaymentMethodRequestAttributes
      type: object
    PaymentResponse:
      properties:
        category:
          description: Payment category
          enum:
            - ACH
          type: string
        created:
          description: Date and time when the payment first occurred. UTC time zone.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the payment.
          type: string
        descriptor:
          description: A string that provides a description of the payment; may be useful to display to users.
          type: string
        events:
          description: A list of all payment events that have modified this payment.
          items:
            $ref: '#/components/schemas/PaymentEvent'
          type: array
        pending_amount:
          description: |
            Pending amount of the payment in the currency's smallest unit (e.g., cents).
            The value of this field will go to zero over time once the payment is settled.
          type: integer
        result:
          description: APPROVED payments were successful while DECLINED payments were declined by Lithic or returned.
          enum:
            - APPROVED
            - DECLINED
          type: string
        settled_amount:
          description: Amount of the payment that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        status:
          description: |
            Status types:
            * `DECLINED` - The payment was declined.
            * `PENDING` - The payment is being processed and has yet to settle or release (origination debit).
            * `RETURNED` - The payment has been returned.
            * `SETTLED` - The payment is completed.
          enum:
            - DECLINED
            - PENDING
            - RETURNED
            - SETTLED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        updated:
          description: Date and time when the financial transaction was last updated. UTC time zone.
          format: date-time
          type: string
        direction:
          enum:
            - CREDIT
            - DEBIT
          title: ACH Direction
          type: string
        financial_account_token:
          format: uuid
          title: Financial Account Token
          type: string
        external_bank_account_token:
          format: uuid
          title: External Bank Account Token
          type:
            - string
            - 'null'
        method:
          enum:
            - ACH_NEXT_DAY
            - ACH_SAME_DAY
          title: Payment Method
          type: string
        method_attributes:
          $ref: '#/components/schemas/PaymentMethodAttributes'
        source:
          enum:
            - CUSTOMER
            - LITHIC
          title: Payment Message Source
          type: string
        user_defined_id:
          maxLength: 512
          title: User Defined Id
          type:
            - string
            - 'null'
      required:
        - direction
        - external_bank_account_token
        - financial_account_token
        - method
        - method_attributes
        - source
        - user_defined_id
        - category
        - created
        - currency
        - descriptor
        - events
        - pending_amount
        - result
        - settled_amount
        - status
        - token
        - updated
      type: object
      title: PaymentResponse
    PostPaymentResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentResponse'
        - properties:
            balance:
              $ref: '#/components/schemas/Balance'
          type: object
      title: PostPaymentResponse
    SettlementDetail:
      properties:
        account_token:
          description: The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).
          example: e34a817f-119d-4976-9fb3-8b020b8bbec3
          format: uuid
          type: string
        card_program_token:
          description: Globally unique identifier denoting the card program that the associated Transaction occurred on.
          example: e34a817f-119d-4976-9fb3-8b020b8bbec3
          format: uuid
          type: string
        card_token:
          description: Globally unique identifier denoting the card that the associated Transaction occurred on.
          example: e34a817f-119d-4976-9fb3-8b020b8bbec3
          format: uuid
          type: string
        created:
          description: Date and time when the transaction first occurred. UTC time zone.
          example: '2023-06-01T00:00:00'
          format: date-time
          type: string
        currency:
          description: Three-digit alphabetic ISO 4217 code.
          example: '840'
          maxLength: 3
          minLength: 3
          type: string
        disputes_gross_amount:
          description: The total gross amount of disputes settlements.
          example: 0
          type: integer
        event_tokens:
          description: Globally unique identifiers denoting the Events associated with this settlement.
          example:
            - e34a817f-119d-4976-9fb3-8b020b8bbec3
          items:
            type: string
          type: array
        institution:
          description: The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).
          example: '00001'
          type: string
        interchange_fee_extended_precision:
          description: The total amount of interchange in six-digit extended precision.
          example: -70000
          type: integer
        interchange_gross_amount:
          description: The total amount of interchange.
          example: -7
          type: integer
        network:
          description: Card network where the transaction took place.
          enum:
            - INTERLINK
            - MAESTRO
            - MASTERCARD
            - UNKNOWN
            - VISA
          example: MASTERCARD
          type: string
        other_fees_details:
          description: The total gross amount of other fees by type.
          properties:
            ISA:
              title: ISA
              type: integer
          type: object
        other_fees_gross_amount:
          description: Total amount of gross other fees outside of interchange.
          example: 0
          type: integer
        report_date:
          description: Date of when the report was first generated.
          example: '2023-06-01'
          type: string
        settlement_date:
          description: Date of when money movement is triggered for the transaction.
          example: '2023-06-01'
          type: string
        token:
          description: Globally unique identifier denoting the Settlement Detail.
          example: e34a817f-119d-4976-9fb3-8b020b8bbec3
          format: uuid
          type: string
        transaction_token:
          description: Globally unique identifier denoting the associated Transaction object.
          example: e34a817f-119d-4976-9fb3-8b020b8bbec3
          format: uuid
          type: string
        transactions_gross_amount:
          description: The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).
          example: 1900
          type: integer
        type:
          description: The type of settlement record.
          enum:
            - ADJUSTMENT
            - ARBITRATION
            - CHARGEBACK
            - CLEARING
            - FEE
            - FINANCIAL
            - NON-FINANCIAL
            - PREARBITRATION
            - REPRESENTMENT
          example: CLEARING
          type: string
        updated:
          description: Date and time when the transaction first occurred. UTC time zone.
          example: '2023-06-01T00:00:00'
          format: date-time
          type: string
      required:
        - account_token
        - card_program_token
        - card_token
        - created
        - currency
        - disputes_gross_amount
        - event_tokens
        - institution
        - interchange_fee_extended_precision
        - interchange_gross_amount
        - network
        - other_fees_details
        - other_fees_gross_amount
        - report_date
        - settlement_date
        - token
        - transaction_token
        - transactions_gross_amount
        - type
        - updated
      type: object
    SettlementReport:
      properties:
        created:
          description: Date and time when the transaction first occurred. UTC time zone.
          example: '2023-06-01T00:00:00'
          format: date-time
          type: string
        currency:
          description: Three-digit alphabetic ISO 4217 code. (This field is deprecated and will be removed in a future version of the API.)
          example: USD
          maxLength: 3
          minLength: 3
          type: string
          deprecated: true
        details:
          items:
            $ref: '#/components/schemas/settlementSummaryDetails'
          type: array
        disputes_gross_amount:
          description: The total gross amount of disputes settlements. (This field is deprecated and will be removed in a future version of the API. To compute total amounts, Lithic recommends that customers sum the relevant settlement amounts found within `details`.)
          example: 0
          type: integer
          deprecated: true
        interchange_gross_amount:
          description: The total amount of interchange. (This field is deprecated and will be removed in a future version of the API. To compute total amounts, Lithic recommends that customers sum the relevant settlement amounts found within `details`.)
          example: -7
          type: integer
          deprecated: true
        is_complete:
          description: Indicates that all data expected on the given report date is available.
          type: boolean
        other_fees_gross_amount:
          description: Total amount of gross other fees outside of interchange. (This field is deprecated and will be removed in a future version of the API. To compute total amounts, Lithic recommends that customers sum the relevant settlement amounts found within `details`.)
          example: 0
          type: integer
          deprecated: true
        report_date:
          description: Date of when the report was first generated.
          example: '2023-06-01'
          type: string
        settled_net_amount:
          description: The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees). (This field is deprecated and will be removed in a future version of the API. To compute total amounts, Lithic recommends that customers sum the relevant settlement amounts found within `details`.)
          example: 1893
          type: integer
          deprecated: true
        transactions_gross_amount:
          description: The total amount of settlement impacting transactions (excluding interchange, fees, and disputes). (This field is deprecated and will be removed in a future version of the API. To compute total amounts, Lithic recommends that customers sum the relevant settlement amounts found within `details`.)
          example: 1900
          type: integer
          deprecated: true
        updated:
          description: Date and time when the transaction first occurred. UTC time zone.
          example: '2023-06-01T00:00:00'
          format: date-time
          type: string
      required:
        - created
        - currency
        - details
        - disputes_gross_amount
        - interchange_gross_amount
        - is_complete
        - other_fees_gross_amount
        - report_date
        - settled_net_amount
        - transactions_gross_amount
        - updated
      type: object
    ServiceType:
      title: FuelServiceType
      description: The type of fuel service procured in a fleet transaction.
      enum:
        - UNKNOWN
        - UNDEFINED
        - SELF_SERVICE
        - FULL_SERVICE
        - NON_FUEL_ONLY
    ShippingAddress:
      properties:
        address1:
          description: Valid USPS routable address.
          example: 5 Broad Street
          maxLength: 40
          minLength: 1
          type: string
        address2:
          description: Unit number (if applicable).
          example: Unit 25A
          maxLength: 40
          minLength: 1
          type: string
        city:
          description: City
          example: NEW YORK
          maxLength: 30
          minLength: 1
          type: string
        country:
          description: Uppercase ISO 3166-1 alpha-3 three character abbreviation.
          example: USA
          maxLength: 3
          minLength: 3
          type: string
        email:
          description: Email address to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.
          example: johnny@appleseed.com
          maxLength: 50
          minLength: 5
          type: string
        first_name:
          description: Customer's first name. This will be the first name printed on the physical card. The combined length of `first_name` and `last_name` may not exceed 25 characters.
          example: Michael
          maxLength: 24
          minLength: 1
          type: string
        last_name:
          description: Customer's surname (family name). This will be the last name printed on the physical card. The combined length of `first_name` and `last_name` may not exceed 25 characters.
          example: Bluth
          maxLength: 24
          minLength: 1
          type: string
        line2_text:
          description: Text to be printed on line two of the physical card. Use of this field requires additional permissions.
          example: The Bluth Company
          maxLength: 26
          minLength: 0
          type: string
        phone_number:
          description: Cardholder's phone number in E.164 format to be contacted for expedited shipping process purposes. Required if `shipping_method` is `EXPEDITED`.
          example: '+12124007676'
          maxLength: 16
          minLength: 8
          type: string
        postal_code:
          description: Postal code (formerly zipcode). For US addresses, either five-digit postal code or nine-digit postal code (ZIP+4) using the format 12345-1234.
          example: 10001-1809
          maxLength: 12
          minLength: 1
          type: string
        state:
          description: Uppercase ISO 3166-2 two character abbreviation for US and CA. Optional with a limit of 24 characters for other countries.
          example: NY
          maxLength: 24
          minLength: 0
          type: string
      required:
        - address1
        - city
        - country
        - first_name
        - last_name
        - postal_code
        - state
      type: object
    TaxData:
      title: TaxData
      type: object
      properties:
        amount:
          title: Amount
          description: The amount of tax collected.
          type: integer
        exempt:
          title: Exempt
          $ref: '#/components/schemas/TaxExemptIndicator'
        merchant_tax_id:
          title: Merchant Tax ID
          description: The tax ID of the merchant.
          type: string
    TaxExemptIndicator:
      title: TaxExemptIndicator
      description: A flag indicating whether the transaction is tax exempt or not.
      enum:
        - TAX_INCLUDED
        - TAX_NOT_INCLUDED
        - NOT_SUPPORTED
    ChallengeResponse:
      properties:
        token:
          description: Globally unique identifier for the 3DS authentication. This token is sent as part of the initial 3DS Decisioning Request and as part of the 3DS Challenge Event in the [ThreeDSAuthentication](#/components/schemas/ThreeDSAuthentication) object
          format: uuid
          type: string
        challenge_response:
          description: Whether the Cardholder has Approved or Declined the issued Challenge
          enum:
            - APPROVE
            - DECLINE_BY_CUSTOMER
          type: string
      required:
        - token
        - challenge_response
    CustomerChallenge:
      properties:
        challenge_method_type:
          description: Type of Challenge that should be issued to the CardHolder
          enum:
            - OUT_OF_BAND
          type: string
        start_time:
          description: ISO-8601 time at which the challenge has started
          type: string
          format: date-time
        expiry_time:
          description: ISO-8601 time at which the challenge expires
          type: string
          format: date-time
      required:
        - challenge_method_type
        - start_time
        - expiry_time
    ThreeDSAddress:
      properties:
        address1:
          description: First line of the street address provided by the cardholder.
          type:
            - string
            - 'null'
        address2:
          description: Second line of the street address provided by the cardholder.
          type:
            - string
            - 'null'
        address3:
          description: Third line of the street address provided by the cardholder.
          type:
            - string
            - 'null'
        city:
          description: City of the address provided by the cardholder.
          type:
            - string
            - 'null'
        country:
          description: Country of the address provided by the cardholder in ISO 3166-1 alpha-3 format (e.g. USA)
          maxLength: 3
          minLength: 3
          type:
            - string
            - 'null'
        postal_code:
          description: Postal code (e.g., ZIP code) of the address provided by the cardholder
          type:
            - string
            - 'null'
      type: object
    ThreeDSAuthentication:
      properties:
        account_type:
          description: |
            Type of account/card that is being used for the transaction. Maps to EMV 3DS field `acctType`.
          enum:
            - CREDIT
            - DEBIT
            - NOT_APPLICABLE
          type:
            - string
            - 'null'
        additional_data:
          description: |
            Object containing additional data about the 3DS request that is beyond the EMV 3DS standard spec (e.g., specific fields that only certain card networks send but are not required across all 3DS requests).
          oneOf:
            - type: object
              properties:
                network_decision:
                  description: |
                    Mastercard only: Indicates whether the network would have considered the authentication request to be low risk or not.
                  enum:
                    - LOW_RISK
                    - NOT_LOW_RISK
                  type:
                    - string
                    - 'null'
                network_risk_score:
                  description: |
                    Mastercard only: Assessment by the network of the authentication risk level, with a higher value indicating a higher amount of risk.
                  type:
                    - number
                    - 'null'
            - type: 'null'
        app:
          description: |
            Object containing data about the app used in the e-commerce transaction. Present if the channel is 'APP_BASED'.
          properties:
            device_info:
              description: |
                Device information gathered from the cardholder's device - JSON name/value pairs that is Base64url encoded. Maps to EMV 3DS field deviceInfo.
              type:
                - string
                - 'null'
            ip:
              anyOf:
                - format: ipv4
                  type: string
                - format: ipv6
                  type: string
              description: |
                External IP address used by the app generating the 3DS authentication request. Maps to EMV 3DS field appIp.
        authentication_request_type:
          description: |
            Type of authentication request - i.e., the type of transaction or interaction is causing the merchant to request an authentication. Maps to EMV 3DS field threeDSRequestorAuthenticationInd.
          enum:
            - ADD_CARD
            - BILLING_AGREEMENT
            - DELAYED_SHIPMENT
            - EMV_TOKEN_CARDHOLDER_VERIFICATION
            - INSTALLMENT_TRANSACTION
            - MAINTAIN_CARD
            - PAYMENT_TRANSACTION
            - RECURRING_TRANSACTION
            - SPLIT_PAYMENT
            - SPLIT_SHIPMENT
          type:
            - string
            - 'null'
        authentication_result:
          description: Indicates the outcome of the 3DS authentication process.
          enum:
            - DECLINE
            - SUCCESS
          type:
            - string
            - 'null'
        browser:
          description: |
            Object containing data about the browser used in the e-commerce transaction. Present if the channel is 'BROWSER'.
          properties:
            ip:
              anyOf:
                - format: ipv4
                  type: string
                - format: ipv6
                  type: string
                - type: 'null'
              description: |
                IP address of the browser as returned by the HTTP headers to the 3DS requestor (e.g., merchant or digital wallet). Maps to EMV 3DS field browserIP.
            java_enabled:
              description: |
                Indicates whether the cardholder's browser has the ability to execute Java. Maps to EMV 3DS field browserJavaEnabled.
              type:
                - boolean
                - 'null'
            javascript_enabled:
              description: |
                Indicates whether the cardholder's browser has the ability to execute JavaScript. Maps to EMV 3DS field browserJavascriptEnabled.
              type:
                - boolean
                - 'null'
            language:
              description: |
                Language of the cardholder's browser as defined in IETF BCP47. Maps to EMV 3DS field browserLanguage.
              type:
                - string
                - 'null'
            time_zone:
              description: |
                Time zone of the cardholder's browser offset in minutes between UTC and the cardholder browser's local time. The offset is positive if the local time is behind UTC and negative if it is ahead. Maps to EMV 3DS field browserTz.
              type:
                - string
                - 'null'
            user_agent:
              description: |
                Content of the HTTP user-agent header. Maps to EMV 3DS field browserUserAgent.
              type:
                - string
                - 'null'
        card_expiry_check:
          description: |
            Indicates whether the expiration date provided by the cardholder during checkout matches Lithic's record of the card's expiration date.
          enum:
            - MATCH
            - MISMATCH
            - NOT_PRESENT
          type: string
        card_token:
          description: Globally unique identifier for the card on which the 3DS authentication has occurred.
          format: uuid
          type: string
        cardholder:
          description: Object containing data about the cardholder provided during the transaction.
          properties:
            address_match:
              description: |
                Indicates whether the shipping address and billing address provided by the cardholder are the same. This value - and assessment of whether the addresses match - is provided directly in the 3DS request and is not determined by Lithic. Maps to EMV 3DS field addrMatch.
              type:
                - boolean
                - 'null'
            billing_address:
              $ref: '#/components/schemas/ThreeDSAddress'
              description: Object containing data on the billing address provided during the transaction.
              type: object
            email:
              description: |
                Email address that is either provided by the cardholder or is on file with the merchant in a 3RI request. Maps to EMV 3DS field email.
              maxLength: 254
              minLength: 1
              type:
                - string
                - 'null'
            name:
              description: Name of the cardholder. Maps to EMV 3DS field cardholderName.
              maxLength: 36
              minLength: 1
              type:
                - string
                - 'null'
            phone_number_home:
              description: |
                Home phone number provided by the cardholder. Maps to EMV 3DS fields homePhone.cc and homePhone.subscriber.
              maxLength: 18
              minLength: 1
              type:
                - string
                - 'null'
            phone_number_mobile:
              description: |
                Mobile/cell phone number provided by the cardholder. Maps to EMV 3DS fields mobilePhone.cc and mobilePhone.subscriber.
              maxLength: 18
              minLength: 1
              type:
                - string
                - 'null'
            phone_number_work:
              description: |
                Work phone number provided by the cardholder. Maps to EMV 3DS fields workPhone.cc and workPhone.subscriber.
              maxLength: 18
              minLength: 1
              type:
                - string
                - 'null'
            shipping_address:
              $ref: '#/components/schemas/ThreeDSAddress'
              description: Object containing data on the shipping address provided during the transaction.
              type: object
          type: object
        channel:
          description: Channel in which the authentication occurs. Maps to EMV 3DS field deviceChannel.
          enum:
            - APP_BASED
            - BROWSER
            - THREE_DS_REQUESTOR_INITIATED
          type: string
        created:
          description: |
            Date and time when the authentication was created in Lithic's system.
          format: date-time
          type: string
        decision_made_by:
          description: Entity that made the authentication decision.
          enum:
            - CUSTOMER_ENDPOINT
            - LITHIC_DEFAULT
            - LITHIC_RULES
            - NETWORK
            - UNKNOWN
          type:
            - string
            - 'null'
        merchant:
          description: Object containing data about the merchant involved in the e-commerce transaction.
          properties:
            country:
              description: |
                Country code of the merchant requesting 3DS authentication. Maps to EMV 3DS field merchantCountryCode.
              maxLength: 3
              minLength: 3
              type: string
            id:
              description: |
                Merchant identifier as assigned by the acquirer. Maps to EMV 3DS field acquirerMerchantId.
              type: string
            mcc:
              description: |
                Merchant category code assigned to the merchant that describes its business activity type. Maps to EMV 3DS field mcc.
              maxLength: 4
              minLength: 4
              type: string
            name:
              description: Name of the merchant. Maps to EMV 3DS field merchantName.
              type: string
            risk_indicator:
              description: |
                Object containing additional data indicating additional risk factors related to the e-commerce transaction.
              properties:
                delivery_email_address:
                  description: |
                    In transactions with electronic delivery, email address to which merchandise is delivered. Maps to EMV 3DS field deliveryEmailAddress.
                  type:
                    - string
                    - 'null'
                delivery_time_frame:
                  description: |
                    The delivery time frame for the merchandise. Maps to EMV 3DS field deliveryTimeframe.
                  enum:
                    - ELECTRONIC_DELIVERY
                    - OVERNIGHT_SHIPPING
                    - SAME_DAY_SHIPPING
                    - TWO_DAY_OR_MORE_SHIPPING
                  type:
                    - string
                    - 'null'
                gift_card_amount:
                  description: |
                    In prepaid or gift card purchase transactions, purchase amount total in major units (e.g., a purchase of USD $205.10 would be 205). Maps to EMV 3DS field giftCardAmount.
                  type:
                    - number
                    - 'null'
                gift_card_count:
                  description: |
                    In prepaid or gift card purchase transactions, count of individual prepaid or gift cards/codes purchased. Maps to EMV 3DS field giftCardCount.
                  type:
                    - number
                    - 'null'
                gift_card_currency:
                  description: |
                    In prepaid or gift card purchase transactions, currency code of the gift card. Maps to EMV 3DS field giftCardCurr.
                  maxLength: 3
                  minLength: 3
                  type:
                    - string
                    - 'null'
                order_availability:
                  description: |
                    Indicates whether the purchase is for merchandise that is available now or at a future date. Maps to EMV 3DS field preOrderPurchaseInd.
                  enum:
                    - FUTURE_AVAILABILITY
                    - MERCHANDISE_AVAILABLE
                  type:
                    - string
                    - 'null'
                pre_order_available_date:
                  description: |
                    In pre-order purchase transactions, the expected date that the merchandise will be available. Maps to EMV 3DS field preOrderDate.
                  format: date-time
                  type:
                    - string
                    - 'null'
                reorder_items:
                  description: Indicates whether the cardholder is reordering previously purchased merchandise. Maps to EMV 3DS field reorderItemsInd.
                  enum:
                    - FIRST_TIME_ORDERED
                    - REORDERED
                  type:
                    - string
                    - 'null'
                shipping_method:
                  description: |
                    Shipping method that the cardholder chose for the transaction. If purchase includes one or more item, this indicator is used for the physical goods; if the purchase only includes digital goods, this indicator is used to describe the most expensive item purchased. Maps to EMV 3DS field shipIndicator.
                  enum:
                    - DIGITAL_GOODS
                    - LOCKER_DELIVERY
                    - OTHER
                    - PICK_UP_AND_GO_DELIVERY
                    - SHIP_TO_BILLING_ADDRESS
                    - SHIP_TO_NON_BILLING_ADDRESS
                    - SHIP_TO_OTHER_VERIFIED_ADDRESS
                    - SHIP_TO_STORE
                    - TRAVEL_AND_EVENT_TICKETS
                  type:
                    - string
                    - 'null'
              type: object
          required:
            - country
            - id
            - mcc
            - name
            - risk_indicator
          type: object
        message_category:
          description: |
            Either PAYMENT_AUTHENTICATION or NON_PAYMENT_AUTHENTICATION.  For NON_PAYMENT_AUTHENTICATION, additional_data and transaction fields are not populated.
          enum:
            - NON_PAYMENT_AUTHENTICATION
            - PAYMENT_AUTHENTICATION
          type: string
        three_ri_request_type:
          description: |
            Type of 3DS Requestor Initiated (3RI) request i.e., a 3DS authentication that takes place at the initiation of the merchant rather than the cardholder. The most common example of this is where a merchant is authenticating before billing for a recurring transaction such as a pay TV subscription or a utility bill. Maps to EMV 3DS field threeRIInd.
          enum:
            - ACCOUNT_VERIFICATION
            - ADD_CARD
            - BILLING_AGREEMENT
            - CARD_SECURITY_CODE_STATUS_CHECK
            - DELAYED_SHIPMENT
            - DEVICE_BINDING_STATUS_CHECK
            - INSTALLMENT_TRANSACTION
            - MAIL_ORDER
            - MAINTAIN_CARD_INFO
            - OTHER_PAYMENT
            - RECURRING_TRANSACTION
            - SPLIT_PAYMENT
            - SPLIT_SHIPMENT
            - TELEPHONE_ORDER
            - TOP_UP
            - TRUST_LIST_STATUS_CHECK
          type:
            - string
            - 'null'
        token:
          description: |
            Globally unique identifier for the 3DS authentication.
          format: uuid
          type: string
        transaction:
          description: Object containing data about the e-commerce transaction for which the merchant is requesting authentication.
          oneOf:
            - type: 'null'
            - type: object
              properties:
                amount:
                  description: |
                    Amount of the purchase in minor units of currency with all punctuation removed. Maps to EMV 3DS field purchaseAmount.
                  type: number
                currency:
                  description: |
                    Currency of the purchase. Maps to EMV 3DS field purchaseCurrency.
                  maxLength: 3
                  minLength: 3
                  type: string
                currency_exponent:
                  description: |
                    Minor units of currency, as specified in ISO 4217 currency exponent. Maps to EMV 3DS field purchaseExponent.
                  type: number
                date_time:
                  description: |
                    Date and time when the authentication was generated by the merchant/acquirer's 3DS server. Maps to EMV 3DS field purchaseDate.
                  format: date-time
                  type: string
                type:
                  description: |
                    Type of the transaction for which a 3DS authentication request is occurring. Maps to EMV 3DS field transType.
                  enum:
                    - ACCOUNT_FUNDING
                    - CHECK_ACCEPTANCE
                    - GOODS_SERVICE_PURCHASE
                    - PREPAID_ACTIVATION_AND_LOAD
                    - QUASI_CASH_TRANSACTION
                  type:
                    - 'null'
                    - string
              required:
                - amount
                - currency
                - currency_exponent
                - date_time
                - type
      required:
        - account_type
        - authentication_result
        - card_expiry_check
        - card_token
        - cardholder
        - channel
        - created
        - decision_made_by
        - merchant
        - message_category
        - token
      type: object
    Tokenization:
      properties:
        account_token:
          description: The account token associated with the card being tokenized.
          format: uuid
          type: string
        card_token:
          description: The card token associated with the card being tokenized.
          format: uuid
          type: string
        created_at:
          description: Date and time when the tokenization first occurred. UTC time zone.
          format: date-time
          type: string
        digital_card_art_token:
          description: Specifies the digital card art displayed in the user’s digital wallet after tokenization. This will be null if the tokenization was created without an associated digital card art. See [Flexible Card Art Guide](https://docs.lithic.com/docs/about-digital-wallets#flexible-card-art).
          format: uuid
          type: string
        events:
          description: A list of events related to the tokenization.
          items:
            $ref: '#/components/schemas/TokenizationEvent'
          type: array
        status:
          description: The status of the tokenization request
          enum:
            - ACTIVE
            - DEACTIVATED
            - INACTIVE
            - PAUSED
            - PENDING_2FA
            - PENDING_ACTIVATION
            - UNKNOWN
          type: string
        token:
          description: Globally unique identifier for a Tokenization
          format: uuid
          type: string
        token_requestor_name:
          description: The entity that requested the tokenization. Represents a Digital Wallet or merchant.
          enum:
            - AMAZON_ONE
            - ANDROID_PAY
            - APPLE_PAY
            - FACEBOOK
            - FITBIT_PAY
            - GARMIN_PAY
            - MICROSOFT_PAY
            - NETFLIX
            - SAMSUNG_PAY
            - UNKNOWN
            - VISA_CHECKOUT
          type: string
        token_unique_reference:
          description: The network's unique reference for the tokenization.
          type: string
        tokenization_channel:
          description: The channel through which the tokenization was made.
          enum:
            - DIGITAL_WALLET
            - MERCHANT
          type: string
        updated_at:
          description: Latest date and time when the tokenization was updated. UTC time zone.
          format: date-time
          type: string
      required:
        - account_token
        - card_token
        - created_at
        - status
        - token
        - token_requestor_name
        - token_unique_reference
        - tokenization_channel
        - updated_at
      type: object
    TokenizationEvent:
      properties:
        created_at:
          description: Date and time when the tokenization event first occurred. UTC time zone.
          format: date-time
          type: string
        result:
          description: Enum representing the result of the tokenization event
          enum:
            - APPROVED
            - DECLINED
            - NOTIFICATION_DELIVERED
            - REQUIRE_ADDITIONAL_AUTHENTICATION
            - TOKEN_ACTIVATED
            - TOKEN_CREATED
            - TOKEN_DEACTIVATED
            - TOKEN_INACTIVE
            - TOKEN_STATE_UNKNOWN
            - TOKEN_SUSPENDED
            - TOKEN_UPDATED
          type: string
        token:
          description: Globally unique identifier for a Tokenization Event
          format: uuid
          type: string
        type:
          description: Enum representing the type of tokenization event that occurred
          enum:
            - TOKENIZATION_2FA
            - TOKENIZATION_AUTHORIZATION
            - TOKENIZATION_DECISIONING
            - TOKENIZATION_ELIGIBILITY_CHECK
            - TOKENIZATION_UPDATED
          type: string
    Transfer:
      properties:
        category:
          description: |
            Status types:
            * `TRANSFER` - Internal transfer of funds between financial accounts in your program.
          enum:
            - TRANSFER
          type: string
        created:
          description: Date and time when the transfer occurred. UTC time zone.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction.
          type: string
        descriptor:
          description: A string that provides a description of the transfer; may be useful to display to users.
          type: string
        events:
          description: A list of all financial events that have modified this trasnfer.
          items:
            $ref: '#/components/schemas/FinancialEvent'
          type: array
        from_balance:
          description: The updated balance of the sending financial account.
          items:
            $ref: '#/components/schemas/Balance'
          type: array
        pending_amount:
          description: |
            Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.
            The value of this field will go to zero over time once the financial transaction is settled.
          type: integer
        result:
          description: APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        settled_amount:
          description: Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        status:
          description: |
            Status types:
            * `DECLINED` - The transfer was declined.
            * `EXPIRED` - The transfer was held in pending for too long and expired.
            * `PENDING` - The transfer is pending release from a hold.
            * `SETTLED` - The transfer is completed.
            * `VOIDED` - The transfer was reversed before it settled.
          enum:
            - DECLINED
            - EXPIRED
            - PENDING
            - SETTLED
            - VOIDED
          type: string
        to_balance:
          description: The updated balance of the receiving financial account.
          items:
            $ref: '#/components/schemas/Balance'
          type: array
        token:
          description: Globally unique identifier for the transfer event.
          format: uuid
          type: string
        updated:
          description: Date and time when the financial transaction was last updated. UTC time zone.
          format: date-time
          type: string
      type: object
    BookTransferResponse:
      properties:
        category:
          description: Category of the book transfer
          enum:
            - ADJUSTMENT
            - BALANCE_OR_FUNDING
            - DERECOGNITION
            - DISPUTE
            - FEE
            - REWARD
            - TRANSFER
          type: string
        created:
          description: Date and time when the transfer occurred. UTC time zone.
          format: date-time
          type: string
        currency:
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction.
          type: string
        events:
          description: A list of all financial events that have modified this transfer.
          items:
            $ref: '#/components/schemas/BookTransferEvent'
          type: array
        from_financial_account_token:
          description: Globally unique identifier for the financial account or card that will send the funds. Accepted type dependent on the program's use case.
          format: uuid
          type: string
        pending_amount:
          description: |
            Pending amount of the transaction in the currency's smallest unit (e.g., cents), including any acquirer fees.
            The value of this field will go to zero over time once the financial transaction is settled.
          type: integer
        result:
          description: APPROVED transactions were successful while DECLINED transactions were declined by user, Lithic, or the network.
          enum:
            - APPROVED
            - DECLINED
          type: string
        settled_amount:
          description: Amount of the transaction that has been settled in the currency's smallest unit (e.g., cents).
          type: integer
        status:
          description: 'Status types: * `DECLINED` - The transfer was declined. * `REVERSED` - The transfer was reversed * `SETTLED` - The transfer is completed. '
          enum:
            - DECLINED
            - REVERSED
            - SETTLED
          type: string
        to_financial_account_token:
          description: Globally unique identifier for the financial account or card that will receive the funds. Accepted type dependent on the program's use case.
        token:
          description: Customer-provided token that will serve as an idempotency token. This token will become the transaction token.
          format: uuid
          type: string
        updated:
          description: Date and time when the financial transaction was last updated. UTC time zone.
          format: date-time
          type: string
      type: object
      required:
        - category
        - created
        - currency
        - events
        - from_financial_account_token
        - pending_amount
        - result
        - settled_amount
        - status
        - to_financial_account_token
        - token
        - updated
    UpdateFinancialAccountRequest:
      properties:
        nickname:
          maxLength: 256
          title: Nickname
          type: string
      title: UpdateFinancialAccountRequest
      type: object
    settlementSummaryDetails:
      properties:
        currency:
          description: ISO 4217 alpha 3 code.
          example: USD
          maxLength: 3
          minLength: 3
          type: string
        disputes_gross_amount:
          description: The total gross amount of disputes settlements.
          example: 0
          type: integer
        institution:
          description: The most granular ID the network settles with (e.g., ICA for Mastercard, FTSRE for Visa).
          example: '00001'
          type: string
        interchange_gross_amount:
          description: The total amount of interchange.
          example: -7
          type: integer
        network:
          description: Card network where the transaction took place
          enum:
            - INTERLINK
            - MAESTRO
            - MASTERCARD
            - UNKNOWN
            - VISA
          example: MASTERCARD
          type: string
        other_fees_gross_amount:
          description: Total amount of gross other fees outside of interchange.
          example: 0
          type: integer
        settled_net_amount:
          description: The total net amount of cash moved. (net value of settled_gross_amount, interchange, fees).
          example: 1893
          type: integer
        transactions_gross_amount:
          description: The total amount of settlement impacting transactions (excluding interchange, fees, and disputes).
          example: 1900
          type: integer
      type: object
    required-document:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/required-document.json
      title: Account Holder Required Document
      type: object
      properties:
        entity_token:
          type: string
          format: uuid
          description: Globally unique identifier for an entity.
        valid_documents:
          type: array
          description: A list of valid documents that will satisfy the KYC requirements for the specified entity.
          items:
            type: string
            description: The name of a required document.
        status_reasons:
          type: array
          description: rovides the status reasons that will be satisfied by providing one of the valid documents.
          items:
            type: string
            description: An account holder's status reason
      required:
        - entity_token
        - valid_documents
        - status_reasons
    status-reasons:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/status-reasons.json
      title: KYC/KYB Status Reasons
      description: Status Reasons for KYC/KYB enrollment states
      type: string
      enum:
        - ADDRESS_VERIFICATION_FAILURE
        - AGE_THRESHOLD_FAILURE
        - COMPLETE_VERIFICATION_FAILURE
        - DOB_VERIFICATION_FAILURE
        - ID_VERIFICATION_FAILURE
        - MAX_DOCUMENT_ATTEMPTS
        - MAX_RESUBMISSION_ATTEMPTS
        - NAME_VERIFICATION_FAILURE
        - OTHER_VERIFICATION_FAILURE
        - RISK_THRESHOLD_FAILURE
        - WATCHLIST_ALERT_FAILURE
        - PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
        - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
        - PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
        - PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
        - PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
        - PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
        - PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
        - PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
        - PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
        - CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
        - CONTROL_PERSON_ID_VERIFICATION_FAILURE
        - CONTROL_PERSON_DOB_VERIFICATION_FAILURE
        - CONTROL_PERSON_NAME_VERIFICATION_FAILURE
    document-type:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/documentation/document-type.json
      title: Account Holder document types
      description: Type of documentation to be submitted for verification of an account holder
      type: string
      enum:
        - DRIVERS_LICENSE
        - PASSPORT
        - PASSPORT_CARD
        - EIN_LETTER
        - TAX_RETURN
        - OPERATING_AGREEMENT
        - CERTIFICATE_OF_FORMATION
        - CERTIFICATE_OF_GOOD_STANDING
        - ARTICLES_OF_INCORPORATION
        - ARTICLES_OF_ORGANIZATION
        - BYLAWS
        - GOVERNMENT_BUSINESS_LICENSE
        - PARTNERSHIP_AGREEMENT
        - SS4_FORM
        - BANK_STATEMENT
        - UTILITY_BILL_STATEMENT
        - SSN_CARD
        - ITIN_LETTER
    document-upload-status:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/documentation/document-upload-status.json
      title: Account holder document upload status
      description: Status of an account holder's document upload.
      type: string
      enum:
        - ACCEPTED
        - REJECTED
        - PENDING_UPLOAD
        - UPLOADED
        - PARTIAL_APPROVAL
    document-upload-status-reasons:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/documentation/document-upload-status-reasons.json
      title: Account holder document upload status reasons
      description: The status reasons for an account holder document upload that is not ACCEPTED
      type: string
      enum:
        - DOCUMENT_MISSING_REQUIRED_DATA
        - DOCUMENT_UPLOAD_TOO_BLURRY
        - FILE_SIZE_TOO_LARGE
        - INVALID_DOCUMENT_TYPE
        - INVALID_DOCUMENT_UPLOAD
        - INVALID_ENTITY
        - DOCUMENT_EXPIRED
        - DOCUMENT_ISSUED_GREATER_THAN_30_DAYS
        - DOCUMENT_TYPE_NOT_SUPPORTED
        - UNKNOWN_FAILURE_REASON
        - UNKNOWN_ERROR
    document:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/documentation/document.json
      title: Account Holder KYC Document
      type: object
      description: |-
        Describes the document and the required document image uploads
        required to re-run KYC
      examples:
        - account_holder_token: aab6ad9a-3630-4cd0-bbec-1a0fa5c7e149
          token: f41c975e-cad8-4e4f-a5cb-cef92ed91083
          document_type: EIN_LETTER
          entity_token: b50a84c9-8e86-4016-b1c7-0b9f71d4bb84
          required_document_uploads:
            - image_type: FRONT
              status: PENDING_UPLOAD
              status_reasons: []
              upload_url: https://lithic-document-verification-uploads.com
              token: e254beee-67db-4d8c-b610-306ee07de886
              accepted_entity_status_reasons: []
              rejected_entity_status_reasons: []
              created: '2024-09-18T12:34:56Z'
              updated: '2024-09-18T12:34:56Z'
      properties:
        token:
          type: string
          format: uuid
          description: Globally unique identifier for the document.
        account_holder_token:
          type: string
          format: uuid
          description: Globally unique identifier for the account holder.
        document_type:
          $ref: '#/components/schemas/document-type'
        entity_token:
          type: string
          format: uuid
          description: Globally unique identifier for an entity.
        required_document_uploads:
          type: array
          description: Represents a single image of the document to upload.
          items:
            type: object
            description: Represents a single image of the document to upload.
            properties:
              image_type:
                type: string
                enum:
                  - FRONT
                  - BACK
                description: Type of image to upload.
              status:
                $ref: '#/components/schemas/document-upload-status'
              status_reasons:
                description: Reasons for document image upload status.
                type: array
                items:
                  $ref: '#/components/schemas/document-upload-status-reasons'
              upload_url:
                type: string
                description: |-
                  URL to upload document image to.

                  Note that the upload URLs expire after 7 days. If an upload URL expires, you can
                  refresh the URLs by retrieving the document upload from `GET /account_holders/{account_holder_token}/documents`.
              token:
                type: string
                format: uuid
                description: Globally unique identifier for the document upload.
              accepted_entity_status_reasons:
                description: A list of status reasons associated with a KYB account holder that have been satisfied by the document upload
                type: array
                items:
                  type: string
              rejected_entity_status_reasons:
                description: A list of status reasons associated with a KYB account holder that have not been satisfied by the document upload
                type: array
                items:
                  type: string
              created:
                type: string
                format: date-time
                description: When the document upload was created
              updated:
                type: string
                format: date-time
                description: When the document upload was last updated
            required:
              - image_type
              - status
              - status_reasons
              - upload_url
              - token
              - created
              - updated
              - accepted_entity_status_reasons
              - rejected_entity_status_reasons
      required:
        - account_holder_token
        - document_type
        - entity_token
        - required_document_uploads
        - token
    auth-rule-token:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule-token.json
      title: Auth Rule Token
      type: string
      format: uuid
      readOnly: true
    auth-rule-state:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule-state.json
      title: Auth Rule Version 2 State
      type: string
      description: The state of the Auth Rule
      enum:
        - ACTIVE
        - INACTIVE
    program-level:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/program-level.json
      title: Auth Rule Program Level Parameter
      type: boolean
      description: Whether the Auth Rule applies to all authorizations on the card program.
    card-tokens:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/card-tokens.json
      title: Auth Rule Card Tokens
      description: Card tokens to which the Auth Rule applies.
      type: array
      items:
        type: string
        format: uuid
    account-tokens:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/account-tokens.json
      title: Auth Rule Account Tokens
      description: Account tokens to which the Auth Rule applies.
      type: array
      items:
        type: string
        format: uuid
    auth-rule-type:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule-type.json
      title: Auth Rule Version 2 Types
      type: string
      enum:
        - CONDITIONAL_BLOCK
        - VELOCITY_LIMIT
      description: The type of Auth Rule
    conditional-block-parameters:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/templated-rules/conditional-block-parameters.json
      title: Conditional Block Rule Parameters
      type: object
      properties:
        conditions:
          type: array
          items:
            type: object
            properties:
              attribute:
                type: string
                description: |-
                  The attribute to target.

                  The following attributes may be targeted:
                  * `MCC`: A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.
                  * `COUNTRY`: Country of entity of card acceptor. Possible values are: (1) all ISO 3166-1 alpha-3 country codes, (2) QZZ for Kosovo, and (3) ANT for Netherlands Antilles.
                  * `CURRENCY`: 3-digit alphabetic ISO 4217 code for the merchant currency of the transaction.
                  * `MERCHANT_ID`: Unique alphanumeric identifier for the payment card acceptor (merchant).
                  * `DESCRIPTOR`: Short description of card acceptor.
                  * `LIABILITY_SHIFT`: Indicates whether chargeback liability shift to the issuer applies to the transaction. Valid values are `NONE`, `3DS_AUTHENTICATED`, or `TOKEN_AUTHENTICATED`.
                  * `PAN_ENTRY_MODE`: The method by which the cardholder's primary account number (PAN) was entered. Valid values are `AUTO_ENTRY`, `BAR_CODE`, `CONTACTLESS`, `ECOMMERCE`, `ERROR_KEYED`, `ERROR_MAGNETIC_STRIPE`, `ICC`, `KEY_ENTERED`, `MAGNETIC_STRIPE`, `MANUAL`, `OCR`, `SECURE_CARDLESS`, `UNSPECIFIED`, `UNKNOWN`, `CREDENTIAL_ON_FILE`, or `ECOMMERCE`.
                  * `TRANSACTION_AMOUNT`: The base transaction amount (in cents) plus the acquirer fee field in the settlement/cardholder billing currency. This is the amount the issuer should authorize against unless the issuer is paying the acquirer fee on behalf of the cardholder.
                  * `RISK_SCORE`: Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.
                enum:
                  - MCC
                  - COUNTRY
                  - CURRENCY
                  - MERCHANT_ID
                  - DESCRIPTOR
                  - LIABILITY_SHIFT
                  - PAN_ENTRY_MODE
                  - TRANSACTION_AMOUNT
                  - RISK_SCORE
              operation:
                type: string
                description: The operation to apply to the attribute
                enum:
                  - IS_ONE_OF
                  - IS_NOT_ONE_OF
                  - MATCHES
                  - DOES_NOT_MATCH
                  - IS_GREATER_THAN
                  - IS_LESS_THAN
              value:
                anyOf:
                  - type: string
                    description: A regex string, to be used with `MATCHES` or `DOES_NOT_MATCH`
                  - type: number
                    description: A number, to be used with `IS_GREATER_THAN` or `IS_LESS_THAN`
                  - type: array
                    items:
                      type: string
                    description: An array of strings, to be used with `IS_ONE_OF` or `IS_NOT_ONE_OF`
      required:
        - conditions
    velocity-limit-parameters:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/templated-rules/velocity-limit-parameters.json
      title: Velocity Limit Rule Parameters
      type: object
      properties:
        scope:
          type: string
          enum:
            - CARD
            - ACCOUNT
        period:
          anyOf:
            - type: number
              description: The size of the trailing window to calculate Spend Velocity over in seconds. The minimum value is 10 seconds, and the maximum value is 2678400 seconds.
              minimum: 10
              maximum: 2678400
            - type: string
              enum:
                - DAY
                - MONTH
              description: |-
                The window of time to calculate Spend Velocity over.

                * `DAY`: Velocity over the current day since midnight Eastern Time.
                * `MONTH`: Velocity over the current month since 00:00 / 12 AM on the first of the month in Eastern Time.
        filters:
          type: object
          properties:
            include_mccs:
              anyOf:
                - type: 'null'
                  description: Include all MCCs into the velocity computation.
                - type: array
                  items:
                    type: string
                    pattern: ^[0-9]{4}$
                    example: '5542'
                  description: Merchant Category Codes to include in the velocity calculation. Transactions not matching this MCC will not be included in the calculated velocity.
            include_countries:
              anyOf:
                - type: 'null'
                  description: Include all countries into the velocity computation.
                - type: array
                  items:
                    type: string
                    pattern: ^[A-Z]{3}$
                    example: USA
                  description: ISO-3166-1 alpha-3 Country Codes to include in the velocity calculation. Transactions not matching any of the provided will not be included in the calculated velocity.
        limit_amount:
          anyOf:
            - type: 'null'
              description: No velocity limit on amount is applied to the transaction.
            - type: number
              description: The maximum amount of spend velocity allowed in the period in minor units (the smallest unit of a currency, e.g. cents for USD). Transactions exceeding this limit will be declined.
              example: 10000
        limit_count:
          anyOf:
            - type: 'null'
              description: No limit on the number of velocity impacting events is applied.
            - type: number
              description: |-
                The number of spend velocity impacting transactions may not exceed this limit in the period. Transactions exceeding this limit will be declined.
                A spend velocity impacting transaction is a transaction that has been authorized, and optionally settled, or a force post (a transaction that settled without prior authorization).
      required:
        - scope
        - period
        - filters
    auth-rule-parameters:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule-parameters.json
      title: Auth Rule Version 2 Parameters
      description: Parameters for the current version of the Auth Rule
      anyOf:
        - $ref: '#/components/schemas/conditional-block-parameters'
        - $ref: '#/components/schemas/velocity-limit-parameters'
    auth-rule-version:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule-version.json
      title: Auth Rule Version
      type: integer
      description: The version of the rule, this is incremented whenever the rule's parameters change.
      readOnly: true
    current-version:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/current-version.json
      title: Auth Rule Current Version
      anyOf:
        - type: 'null'
          description: No current version.
        - type: object
          properties:
            parameters:
              $ref: '#/components/schemas/auth-rule-parameters'
            version:
              $ref: '#/components/schemas/auth-rule-version'
          required:
            - parameters
            - version
    draft-version:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/draft-version.json
      title: Auth Rule Draft Version
      anyOf:
        - type: 'null'
          description: No draft version.
        - type: object
          properties:
            parameters:
              $ref: '#/components/schemas/auth-rule-parameters'
            version:
              $ref: '#/components/schemas/auth-rule-version'
          required:
            - parameters
            - version
    auth-rule:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/auth-rule.json
      title: Auth Rule Version 2
      type: object
      properties:
        token:
          $ref: '#/components/schemas/auth-rule-token'
        state:
          $ref: '#/components/schemas/auth-rule-state'
        program_level:
          $ref: '#/components/schemas/program-level'
        card_tokens:
          $ref: '#/components/schemas/card-tokens'
        account_tokens:
          $ref: '#/components/schemas/account-tokens'
        type:
          $ref: '#/components/schemas/auth-rule-type'
        current_version:
          $ref: '#/components/schemas/current-version'
        draft_version:
          $ref: '#/components/schemas/draft-version'
      required:
        - token
        - state
        - program_level
        - card_tokens
        - account_tokens
        - type
        - current_version
        - draft_version
    schemas-Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid input
    create-auth-rule-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/create-auth-rule-request.json
      title: Auth Rule Version 2 Parameters
      type: object
      oneOf:
        - properties:
            account_tokens:
              $ref: '#/components/schemas/account-tokens'
            type:
              $ref: '#/components/schemas/auth-rule-type'
            parameters:
              $ref: '#/components/schemas/auth-rule-parameters'
          required:
            - account_tokens
        - properties:
            card_tokens:
              $ref: '#/components/schemas/card-tokens'
            type:
              $ref: '#/components/schemas/auth-rule-type'
            parameters:
              $ref: '#/components/schemas/auth-rule-parameters'
          required:
            - card_tokens
        - properties:
            program_level:
              $ref: '#/components/schemas/program-level'
            type:
              $ref: '#/components/schemas/auth-rule-type'
            parameters:
              $ref: '#/components/schemas/auth-rule-parameters'
          required:
            - program_level
      required:
        - parameters
        - type
    patch-auth-rule-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/patch-auth-rule-request.json
      title: Auth Rule Version 2 Patch Request
      type: object
      properties:
        state:
          description: |-
            The desired state of the Auth Rule.

            Note that only deactivating an Auth Rule through this endpoint is supported at this time. If you need to (re-)activate an Auth Rule the /promote endpoint should be used to promote a draft to the currently active version.
          type: string
          const: INACTIVE
    apply-auth-rule-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/apply-auth-rule-request.json
      title: Auth Rule Apply Version 2 Parameters
      anyOf:
        - type: object
          properties:
            account_tokens:
              $ref: '#/components/schemas/account-tokens'
          required:
            - account_tokens
        - type: object
          properties:
            card_tokens:
              $ref: '#/components/schemas/card-tokens'
          required:
            - card_tokens
        - type: object
          properties:
            program_level:
              $ref: '#/components/schemas/program-level'
          required:
            - program_level
    report-token:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/report-token.json
      title: Auth Rule Performance Report Token
      type: string
      format: uuid
      readOnly: true
    financial_event_type:
      $id: https://lithic.com/schemas/treasury/ledger/financial_event_type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Financial Event Type
      type: string
      enum:
        - ACH_ORIGINATION_CANCELLED
        - ACH_ORIGINATION_INITIATED
        - ACH_ORIGINATION_PROCESSED
        - ACH_ORIGINATION_RELEASED
        - ACH_ORIGINATION_REVIEWED
        - ACH_ORIGINATION_SETTLED
        - ACH_RECEIPT_PROCESSED
        - ACH_RECEIPT_SETTLED
        - ACH_RETURN_INITIATED
        - ACH_RETURN_PROCESSED
        - AUTHORIZATION
        - AUTHORIZATION_ADVICE
        - AUTHORIZATION_EXPIRY
        - AUTHORIZATION_REVERSAL
        - BALANCE_INQUIRY
        - BILLING_ERROR
        - BILLING_ERROR_REVERSAL
        - CASH_BACK
        - CASH_BACK_REVERSAL
        - CLEARING
        - CORRECTION_CREDIT
        - CORRECTION_DEBIT
        - CREDIT_AUTHORIZATION
        - CREDIT_AUTHORIZATION_ADVICE
        - CURRENCY_CONVERSION
        - CURRENCY_CONVERSION_REVERSAL
        - DISPUTE_WON
        - EXTERNAL_ACH_CANCELED
        - EXTERNAL_ACH_INITIATED
        - EXTERNAL_ACH_RELEASED
        - EXTERNAL_ACH_REVERSED
        - EXTERNAL_ACH_SETTLED
        - EXTERNAL_CHECK_CANCELED
        - EXTERNAL_CHECK_INITIATED
        - EXTERNAL_CHECK_RELEASED
        - EXTERNAL_CHECK_REVERSED
        - EXTERNAL_CHECK_SETTLED
        - EXTERNAL_TRANSFER_CANCELED
        - EXTERNAL_TRANSFER_INITIATED
        - EXTERNAL_TRANSFER_RELEASED
        - EXTERNAL_TRANSFER_REVERSED
        - EXTERNAL_TRANSFER_SETTLED
        - EXTERNAL_WIRE_CANCELED
        - EXTERNAL_WIRE_INITIATED
        - EXTERNAL_WIRE_RELEASED
        - EXTERNAL_WIRE_REVERSED
        - EXTERNAL_WIRE_SETTLED
        - FINANCIAL_AUTHORIZATION
        - FINANCIAL_CREDIT_AUTHORIZATION
        - INTEREST
        - INTEREST_REVERSAL
        - LATE_PAYMENT
        - LATE_PAYMENT_REVERSAL
        - PROVISIONAL_CREDIT
        - PROVISIONAL_CREDIT_REVERSAL
        - RETURN
        - RETURN_REVERSAL
        - TRANSFER
        - TRANSFER_INSUFFICIENT_FUNDS
    searchable_account_types:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/searchable_account_types.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - CHECKING
        - SAVINGS
      title: Searchable Account Type
    owner_type:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/owner_type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
      title: Owner Type
    account_state:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/account_state.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - ENABLED
        - CLOSED
        - PAUSED
      title: Account State
    verification_state:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/verification_state.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - PENDING
        - ENABLED
        - FAILED_VERIFICATION
        - INSUFFICIENT_FUNDS
      title: Verification State
    verification_method:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/verification_method.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - MANUAL
        - MICRO_DEPOSIT
        - PLAID
        - PRENOTE
        - EXTERNALLY_VERIFIED
      title: Verification Method
    address:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/address.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Address
      type: object
      properties:
        address1:
          type: string
          minLength: 1
          maxLength: 40
        address2:
          type: string
          minLength: 1
          maxLength: 40
        city:
          type: string
          minLength: 1
          maxLength: 40
        state:
          type: string
          minLength: 2
          maxLength: 2
        postal_code:
          type: string
          minLength: 5
          maxLength: 10
          pattern: ^[0-9]{5}(-[0-9]{4})?$
        country:
          type: string
          minLength: 3
          maxLength: 3
          pattern: ^[A-Z]{3}$
      required:
        - address1
        - city
        - state
        - postal_code
        - country
    bank_account_api_response:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/bank_account_api_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Bank Account Api Response
      type: object
      properties:
        token:
          description: A globally unique identifier for this record of an external bank account association. If a program links an external bank account to more than one end-user or to both the program and the end-user, then Lithic will return each record of the association
          type: string
          format: uuid
        owner:
          description: Legal Name of the business or individual who owns the external account. This will appear in statements
          type: string
        routing_number:
          description: Routing Number
          type: string
        last_four:
          description: The last 4 digits of the bank account. Derived by Lithic from the account number passed
          type: string
        name:
          description: The nickname for this External Bank Account
          type: string
        currency:
          description: currency of the external account 3-digit alphabetic ISO 4217 code
          type: string
        country:
          description: The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA
          type: string
        account_token:
          description: Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null
          type: string
          format: uuid
        created:
          description: An ISO 8601 string representing when this funding source was added to the Lithic account.
          type: string
          format: date-time
        company_id:
          description: Optional field that helps identify bank accounts in receipts
          type: string
        dob:
          description: Date of Birth of the Individual that owns the external bank account
          title: Date of Birth
          type: string
          format: date
        doing_business_as:
          description: Doing Business As
          type: string
        user_defined_id:
          description: User Defined ID
          title: User Defined ID
          type: string
        verification_failed_reason:
          description: Optional free text description of the reason for the failed verification. For ACH micro-deposits returned, this field will display the reason return code sent by the ACH network
          type: string
        verification_attempts:
          description: The number of attempts at verification
          type: integer
        financial_account_token:
          description: The financial account token of the operating account to fund the micro deposits
          type: string
          format: uuid
        type:
          description: Account Type
          $ref: '#/components/schemas/searchable_account_types'
        verification_method:
          description: Verification Method
          $ref: '#/components/schemas/verification_method'
        owner_type:
          description: Owner Type
          $ref: '#/components/schemas/owner_type'
        state:
          description: Account State
          $ref: '#/components/schemas/account_state'
        verification_state:
          description: Verification State
          $ref: '#/components/schemas/verification_state'
        address:
          description: Address
          $ref: '#/components/schemas/address'
      required:
        - token
        - type
        - verification_method
        - owner_type
        - owner
        - state
        - verification_state
        - routing_number
        - last_four
        - currency
        - country
        - created
        - verification_attempts
    bank_accounts_api_response:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/bank_accounts_api_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Bank Accounts Api Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/bank_account_api_response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    bank_verified_verification_method:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/bank_verified_verification_method.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - MICRO_DEPOSIT
        - PRENOTE
      title: Bank Verified Verification Methods
    bank_verified_create_bank_account_api_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/bank_verified_create_bank_account_api_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Bank Verified Create Bank Account Api Request
      type: object
      properties:
        verification_method:
          description: Verification Method
          $ref: '#/components/schemas/bank_verified_verification_method'
        owner_type:
          description: Owner Type
          $ref: '#/components/schemas/owner_type'
        owner:
          description: Legal Name of the business or individual who owns the external account. This will appear in statements
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[!-~ ]*$
        account_token:
          description: Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null
          type: string
          format: uuid
        company_id:
          description: Optional field that helps identify bank accounts in receipts
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^[a-zA-Z0-9]*$
        doing_business_as:
          description: Doing Business As
          type: string
          minLength: 1
          maxLength: 40
        dob:
          description: Date of Birth of the Individual that owns the external bank account
          title: Date of Birth
          type: string
          format: date
        user_defined_id:
          description: User Defined ID
          title: User Defined ID
          type: string
          minLength: 1
          maxLength: 256
        type:
          description: Account Type
          $ref: '#/components/schemas/searchable_account_types'
        routing_number:
          description: Routing Number
          type: string
          minLength: 9
          maxLength: 9
          pattern: ^[0-9]{9}$
        account_number:
          description: Account Number
          type: string
          minLength: 1
          maxLength: 17
          pattern: ^[0-9-]{1,17}$
        name:
          description: The nickname for this External Bank Account
          type: string
          minLength: 1
          maxLength: 50
          pattern: ^[!-~ ]*$
        country:
          description: The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA
          type: string
          minLength: 3
          maxLength: 3
          pattern: ^[A-Z]{3}$
        currency:
          description: currency of the external account 3-digit alphabetic ISO 4217 code
          type: string
          minLength: 3
          maxLength: 3
          pattern: ^[A-Z]{3}$
        verification_enforcement:
          type: boolean
          default: true
        address:
          description: Address
          $ref: '#/components/schemas/address'
        financial_account_token:
          description: The financial account token of the operating account to fund the micro deposits
          type: string
          format: uuid
      required:
        - type
        - routing_number
        - account_number
        - country
        - currency
        - verification_method
        - owner_type
        - owner
        - financial_account_token
    plaid_verified_verification_method:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/plaid_verified_verification_method.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - PLAID
      title: Plaid Verified Verification Methods
    plaid_verified_create_bank_account_api_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/plaid_verified_create_bank_account_api_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Plaid Verified Create Bank Account Api Request
      type: object
      properties:
        verification_method:
          description: Verification Method
          $ref: '#/components/schemas/plaid_verified_verification_method'
        owner_type:
          description: Owner Type
          $ref: '#/components/schemas/owner_type'
        owner:
          description: Legal Name of the business or individual who owns the external account. This will appear in statements
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[!-~ ]*$
        account_token:
          description: Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null
          type: string
          format: uuid
        company_id:
          description: Optional field that helps identify bank accounts in receipts
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^[a-zA-Z0-9]*$
        doing_business_as:
          description: Doing Business As
          type: string
          minLength: 1
          maxLength: 40
        dob:
          description: Date of Birth of the Individual that owns the external bank account
          title: Date of Birth
          type: string
          format: date
        user_defined_id:
          description: User Defined ID
          title: User Defined ID
          type: string
          minLength: 1
          maxLength: 256
        processor_token:
          type: string
          minLength: 1
      required:
        - processor_token
        - verification_method
        - owner_type
        - owner
    externally_verified_verification_method:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/externally_verified_verification_method.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - EXTERNALLY_VERIFIED
      title: Externally Verified Verification Methods
    externally_verified_create_bank_account_api_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/externally_verified_create_bank_account_api_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Externally Verified Create Bank Account Api Request
      type: object
      properties:
        verification_method:
          description: Verification Method
          $ref: '#/components/schemas/externally_verified_verification_method'
        owner_type:
          description: Owner Type
          $ref: '#/components/schemas/owner_type'
        owner:
          description: Legal Name of the business or individual who owns the external account. This will appear in statements
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[!-~ ]*$
        account_token:
          description: Indicates which Lithic account the external account is associated with. For external accounts that are associated with the program, account_token field returned will be null
          type: string
          format: uuid
        company_id:
          description: Optional field that helps identify bank accounts in receipts
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^[a-zA-Z0-9]*$
        doing_business_as:
          description: Doing Business As
          type: string
          minLength: 1
          maxLength: 40
        dob:
          description: Date of Birth of the Individual that owns the external bank account
          title: Date of Birth
          type: string
          format: date
        user_defined_id:
          description: User Defined ID
          title: User Defined ID
          type: string
          minLength: 1
          maxLength: 256
        type:
          description: Account Type
          $ref: '#/components/schemas/searchable_account_types'
        routing_number:
          description: Routing Number
          type: string
          minLength: 9
          maxLength: 9
          pattern: ^[0-9]{9}$
        account_number:
          description: Account Number
          type: string
          minLength: 1
          maxLength: 17
          pattern: ^[0-9-]{1,17}$
        name:
          description: The nickname for this External Bank Account
          type: string
          minLength: 1
          maxLength: 50
          pattern: ^[!-~ ]*$
        country:
          description: The country that the bank account is located in using ISO 3166-1. We will only accept USA bank accounts e.g., USA
          type: string
          minLength: 3
          maxLength: 3
          pattern: ^[A-Z]{3}$
        currency:
          description: currency of the external account 3-digit alphabetic ISO 4217 code
          type: string
          minLength: 3
          maxLength: 3
          pattern: ^[A-Z]{3}$
        address:
          description: Address
          $ref: '#/components/schemas/address'
      required:
        - type
        - routing_number
        - account_number
        - country
        - currency
        - verification_method
        - owner_type
        - owner
    update_bank_account_api_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/update_bank_account_api_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Update Bank Account Api Request
      type: object
      properties:
        owner:
          description: Legal Name of the business or individual who owns the external account. This will appear in statements
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[!-~ ]*$
        owner_type:
          description: Owner Type
          $ref: '#/components/schemas/owner_type'
        name:
          description: The nickname for this External Bank Account
          type: string
          minLength: 1
          maxLength: 50
          pattern: ^[!-~ ]*$
        company_id:
          description: Optional field that helps identify bank accounts in receipts
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^[a-zA-Z0-9]*$
        address:
          description: Address
          $ref: '#/components/schemas/address'
        dob:
          description: Date of Birth of the Individual that owns the external bank account
          title: Date of Birth
          type: string
          format: date
        doing_business_as:
          description: Doing Business As
          type: string
          minLength: 1
          maxLength: 40
        user_defined_id:
          description: User Defined ID
          title: User Defined ID
          type: string
          minLength: 1
          maxLength: 256
    micro_deposit_verification_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/micro_deposit_verification_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Micro Deposit Verification Request
      type: object
      properties:
        micro_deposits:
          type: array
          title: Micro Deposits
          maxItems: 2
          minItems: 2
          items:
            type: integer
      required:
        - micro_deposits
    retry_micro_deposit_verification_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/retry_micro_deposit_verification_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Retry Micro Deposit Verification Request
      type: object
      properties:
        financial_account_token:
          type: string
          format: uuid
    retry_prenote_verification_request:
      $id: https://lithic.com/schemas/customer-facing/treasury/cies/retry_prenote_verification_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Retry Prenote Verification Request
      type: object
      properties:
        financial_account_token:
          type: string
          format: uuid
    extended_credit:
      $id: https://lithic.com/schemas/treasury/ledger/extended_credit.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Extended Credit
      type: object
      properties:
        credit_extended:
          type: integer
      required:
        - credit_extended
    instance-financial-account-type:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/instance-financial-account-type.json
      title: Instance Financial Account Type
      description: Type of instance financial account
      type: string
      enum:
        - ISSUING
        - RESERVE
        - OPERATING
    account-financial-account-type:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/account-financial-account-type.json
      title: Account Financial Account Type
      description: Type of account financial account
      type: string
      enum:
        - ISSUING
        - OPERATING
    financial-account-state:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-account-state.json
      title: Financial Account State
      description: State of the financial account
      type: string
      enum:
        - PENDING
        - CURRENT
        - DELINQUENT
        - CHARGED_OFF
    charged-off-reason:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/charged-off-reason.json
      title: Charged Off Reason
      description: Reason for the financial account being marked as Charged Off
      type: string
      enum:
        - DELINQUENT
        - FRAUD
    financial-account-credit-config:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-account-credit-config.json
      title: Financial Account Credit Config
      type:
        - object
        - 'null'
      properties:
        credit_limit:
          type:
            - integer
            - 'null'
        external_bank_account_token:
          type:
            - string
            - 'null'
          format: uuid
        credit_product_token:
          type:
            - string
            - 'null'
          description: Globally unique identifier for the credit product
        tier:
          type:
            - string
            - 'null'
          description: Tier assigned to the financial account
        is_spend_blocked:
          type: boolean
        financial_account_state:
          anyOf:
            - $ref: '#/components/schemas/financial-account-state'
            - type: 'null'
        charged_off_reason:
          anyOf:
            - $ref: '#/components/schemas/charged-off-reason'
            - type: 'null'
      required:
        - credit_limit
        - external_bank_account_token
        - credit_product_token
        - tier
        - financial_account_state
        - charged_off_reason
        - is_spend_blocked
    financial-account-response:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-account-response.json
      title: Financial Account Response
      type: object
      properties:
        token:
          type: string
          description: Globally unique identifier for the account
          example: b68b7424-aa69-4cbc-a946-30d90181b621
          format: uuid
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        type:
          oneOf:
            - $ref: '#/components/schemas/instance-financial-account-type'
            - $ref: '#/components/schemas/account-financial-account-type'
        routing_number:
          type:
            - string
            - 'null'
        account_number:
          type:
            - string
            - 'null'
        nickname:
          type:
            - string
            - 'null'
        account_token:
          type:
            - string
            - 'null'
          format: uuid
        is_for_benefit_of:
          type: boolean
          description: Whether financial account is for the benefit of another entity
        credit_configuration:
          $ref: '#/components/schemas/financial-account-credit-config'
      required:
        - token
        - created
        - updated
        - type
        - nickname
        - is_for_benefit_of
        - account_token
        - credit_configuration
    financial-accounts-response:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-accounts-response.json
      title: Financial Accounts Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/financial-account-response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    charge-off-account-request:
      $id: https://lithic.com/schemas/treasury/ledger/charge_off_account_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Charge off account request
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/charged-off-reason'
      required:
        - reason
      examples:
        - reason: FRAUD
    financial-account-credit-config-response:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-account-credit-config-response.json
      title: Financial Account Credit Configuration Response
      type: object
      properties:
        account_token:
          type: string
          description: Globally unique identifier for the account
          example: b68b7424-aa69-4cbc-a946-30d90181b621
          format: uuid
        credit_limit:
          type:
            - integer
            - 'null'
        external_bank_account_token:
          type:
            - string
            - 'null'
          format: uuid
        credit_product_token:
          type:
            - string
            - 'null'
          description: Globally unique identifier for the credit product
        tier:
          type:
            - string
            - 'null'
          description: Tier assigned to the financial account
        financial_account_state:
          $ref: '#/components/schemas/financial-account-state'
        is_spend_blocked:
          type: boolean
        charged_off_reason:
          anyOf:
            - $ref: '#/components/schemas/charged-off-reason'
            - type: 'null'
      required:
        - account_token
        - is_spend_blocked
        - charged_off_reason
        - credit_limit
        - financial_account_state
        - external_bank_account_token
        - credit_product_token
        - tier
    financial-account-credit-config-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account/2024-01-15/financial-account-credit-config-request.json
      title: Financial Account Credit Configuration Request
      type: object
      properties:
        credit_limit:
          type: integer
          minimum: 0
        external_bank_account_token:
          type: string
          format: uuid
        credit_product_token:
          type: string
          description: Globally unique identifier for the credit product
        tier:
          type: string
          description: Tier to assign to a financial account
          minLength: 1
      required: []
    statement_totals:
      $id: https://lithic.com/schemas/treasury/statements/statements_totals.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statement Totals
      type: object
      properties:
        payments:
          type: integer
          description: Any funds transfers which affective the balance in cents
        purchases:
          type: integer
          description: Net card transaction volume less any cash advances in cents
        fees:
          type: integer
          description: Volume of debit management operation transactions less any interest in cents
        credits:
          type: integer
          description: Volume of credit management operation transactions less any balance transfers in cents
        interest:
          type: integer
          description: Interest accrued in cents
        cash_advances:
          type: integer
          description: ATM and cashback transactions in cents
        balance_transfers:
          type: integer
          description: Opening balance transferred from previous account in cents
      required:
        - payments
        - purchases
        - fees
        - credits
        - interest
        - cash_advances
        - balance_transfers
    period_state:
      $id: https://lithic.com/schemas/treasury/statements/period_state.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - STANDARD
        - PROMO
        - PENALTY
      title: Period State
    account_standing:
      $id: https://lithic.com/schemas/treasury/statements/account_standing.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Account Standing
      type: object
      properties:
        period_state:
          $ref: '#/components/schemas/period_state'
        period_number:
          description: Current overall period number
          type: integer
        consecutive_minimum_payments_made:
          description: Number of consecutive minimum payments made
          type: integer
        consecutive_minimum_payments_missed:
          description: Number of consecutive minimum payments missed
          type: integer
        consecutive_full_payments_made:
          description: Number of consecutive full payments made
          type: integer
        days_past_due:
          description: Number of days past due
          type: integer
        has_grace:
          description: Whether the account currently has grace or not
          type: boolean
      required:
        - period_state
        - period_number
        - consecutive_minimum_payments_made
        - consecutive_minimum_payments_missed
        - consecutive_full_payments_made
        - days_past_due
        - has_grace
    amount_due:
      $id: https://lithic.com/schemas/treasury/statements/amount_due.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Amount Due
      type: object
      properties:
        amount:
          description: Payment due at the end of the billing period in cents. Negative amount indicates something is owed. If the amount owed is positive there was a net credit. If auto-collections are enabled this is the amount that will be requested on the payment due date
          type: integer
        past_due:
          description: Amount past due for statement in cents
          type: integer
      required:
        - amount
        - past_due
    interest_calculation_method:
      $id: https://lithic.com/schemas/treasury/statements/interest_calculation_method.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - DAILY
        - AVERAGE_DAILY
      title: Interest Calculation method
    category_details:
      $id: https://lithic.com/schemas/treasury/statements/category_details.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Category Details
      type: object
      properties:
        purchases:
          type: string
        cash_advances:
          type: string
        balance_transfers:
          type: string
      required:
        - purchases
        - cash_advances
        - balance_transfers
    interest_details:
      $id: https://lithic.com/schemas/treasury/statements/interest_details.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Interest Details
      type: object
      properties:
        prime_rate:
          type:
            - string
            - 'null'
        interest_calculation_method:
          $ref: '#/components/schemas/interest_calculation_method'
        effective_apr:
          $ref: '#/components/schemas/category_details'
        interest_for_period:
          $ref: '#/components/schemas/category_details'
        daily_balance_amounts:
          $ref: '#/components/schemas/category_details'
        minimum_interest_charged:
          type:
            - integer
            - 'null'
        actual_interest_charged:
          type:
            - integer
            - 'null'
      required:
        - prime_rate
        - interest_calculation_method
        - effective_apr
        - interest_for_period
        - actual_interest_charged
        - daily_balance_amounts
    statement_type:
      $id: https://lithic.com/schemas/treasury/statements/statement_type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - INITIAL
        - PERIOD_END
      title: Statement Type
    statement_response:
      $id: https://lithic.com/schemas/treasury/statements/statement_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statement Response
      type: object
      properties:
        token:
          type: string
          description: Globally unique identifier for a statement
          title: Statement Token
        financial_account_token:
          description: Globally unique identifier for a financial account
          type: string
          format: uuid
        statement_start_date:
          description: Date when the billing period began
          type: string
          format: date
        statement_end_date:
          description: Date when the billing period ended
          type: string
          format: date
        next_statement_end_date:
          description: Date when the next billing period will end
          type: string
          format: date
        payment_due_date:
          description: Date when the payment is due
          type: string
          format: date
        next_payment_due_date:
          description: Date when the next payment is due
          type: string
          format: date
        days_in_billing_cycle:
          description: Number of days in the billing cycle
          type: integer
        credit_limit:
          description: This is the maximum credit balance extended by the lender in cents
          type: integer
        available_credit:
          description: Amount of credit available to spend in cents
          type: integer
        starting_balance:
          description: Balance at the start of the billing period
          type: integer
        ending_balance:
          description: Balance at the end of the billing period. For charge cards, this should be the same at the statement amount due in cents
          type: integer
        period_totals:
          $ref: '#/components/schemas/statement_totals'
        ytd_totals:
          $ref: '#/components/schemas/statement_totals'
        created:
          description: Timestamp of when the statement was created
          type: string
          format: date-time
        updated:
          description: Timestamp of when the statement was updated
          type: string
          format: date-time
        credit_product_token:
          description: Globally unique identifier for a credit product
          type: string
        account_standing:
          $ref: '#/components/schemas/account_standing'
        amount_due:
          $ref: '#/components/schemas/amount_due'
        interest_details:
          anyOf:
            - type: 'null'
            - $ref: '#/components/schemas/interest_details'
        statement_type:
          $ref: '#/components/schemas/statement_type'
      required:
        - token
        - financial_account_token
        - statement_start_date
        - statement_end_date
        - payment_due_date
        - days_in_billing_cycle
        - credit_limit
        - available_credit
        - starting_balance
        - ending_balance
        - amount_due
        - period_totals
        - ytd_totals
        - created
        - updated
        - credit_product_token
        - account_standing
        - statement_type
    statements_response:
      $id: https://lithic.com/schemas/treasury/statements/statements_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statements Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/statement_response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    transaction_category:
      $id: https://lithic.com/schemas/treasury/ledger/transaction_category.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Category
      type: string
      enum:
        - ACH
        - CARD
        - EXTERNAL_ACH
        - EXTERNAL_CHECK
        - EXTERNAL_TRANSFER
        - EXTERNAL_WIRE
        - MANAGEMENT_ADJUSTMENT
        - MANAGEMENT_DISPUTE
        - MANAGEMENT_FEE
        - MANAGEMENT_REWARD
    statement_line_item_response:
      $id: https://lithic.com/schemas/treasury/statements/statement_line_item_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statement Line Item Response
      type: object
      properties:
        token:
          type: string
          description: Globally unique identifier for a Statement Line Item
        financial_account_token:
          description: Globally unique identifier for a financial account
          type: string
          format: uuid
        card_token:
          description: Globally unique identifier for a card
          type: string
          format: uuid
        financial_transaction_token:
          description: Globally unique identifier for a financial transaction
          type: string
          format: uuid
        financial_transaction_event_token:
          description: Globally unique identifier for a financial transaction event
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/transaction_category'
        event_type:
          $ref: '#/components/schemas/financial_event_type'
        effective_date:
          description: Date that the transaction effected the account balance
          type: string
          format: date
        descriptor:
          type: string
        amount:
          type: integer
          description: Transaction amount in cents
        currency:
          type: string
          description: 3-digit alphabetic ISO 4217 code for the settling currency of the transaction
        created:
          type: string
          format: date-time
          description: Timestamp of when the line item was generated
      required:
        - token
        - financial_account_token
        - financial_transaction_token
        - financial_transaction_event_token
        - category
        - event_type
        - effective_date
        - amount
        - currency
        - created
    statement_line_items_response:
      $id: https://lithic.com/schemas/treasury/statements/statementline_items_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statement Line Items Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/statement_line_item_response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    category_balances:
      $id: https://lithic.com/schemas/treasury/statements/category_balances.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Category Balances
      type: object
      properties:
        interest:
          type: integer
        principal:
          type: integer
        fees:
          type: integer
      required:
        - interest
        - principal
        - fees
    balances:
      $id: https://lithic.com/schemas/treasury/statements/balances.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Balances
      type: object
      properties:
        past_due:
          description: Amount not paid off on previous due dates
          $ref: '#/components/schemas/category_balances'
        due:
          description: Amount due for the prior billing cycle. Any amounts not fully paid off on this due date will be considered past due the next day
          $ref: '#/components/schemas/category_balances'
        past_statements_due:
          description: Amount due for the past billing cycles.
          $ref: '#/components/schemas/category_balances'
        next_statement_due:
          description: Amount due for the current billing cycle. Any amounts not paid off by early payments or credits will be considered due at the end of the current billing period
          $ref: '#/components/schemas/category_balances'
      required:
        - past_due
        - due
        - past_statements_due
        - next_statement_due
    balance_details:
      $id: https://lithic.com/schemas/treasury/statements/balance_details.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Balance Details
      type: object
      properties:
        amount:
          type: integer
        remaining:
          type: integer
      required:
        - amount
        - remaining
    loan_tape_response:
      $id: https://lithic.com/schemas/treasury/statements/loan_tape_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Loan Tape Response
      type: object
      properties:
        token:
          type: string
          description: Globally unique identifier for a loan tape
          title: Loan Tape Token
        financial_account_token:
          description: Globally unique identifier for a financial account
          type: string
          format: uuid
        date:
          description: Date of transactions that this loan tape covers
          type: string
          format: date
        created:
          description: Timestamp of when the loan tape was created
          type: string
          format: date-time
        updated:
          description: Timestamp of when the loan tape was updated
          type: string
          format: date-time
        version:
          description: Version number of the loan tape. This starts at 1
          type: integer
        ytd_totals:
          $ref: '#/components/schemas/statement_totals'
        period_totals:
          $ref: '#/components/schemas/statement_totals'
        day_totals:
          $ref: '#/components/schemas/statement_totals'
        balances:
          $ref: '#/components/schemas/balances'
        starting_balance:
          description: Balance at the start of the day
          type: integer
        ending_balance:
          description: Balance at the end of the day
          type: integer
        credit_limit:
          description: For prepay accounts, this is the minimum prepay balance that must be maintained. For charge card accounts, this is the maximum credit balance extended by a lender
          type: integer
        available_credit:
          description: Amount of credit available to spend in cents
          type: integer
        excess_credits:
          description: Excess credits in the form of provisional credits, payments, or purchase refunds. If positive, the account is in net credit state with no outstanding balances. An overpayment could land an account in this state
          type: integer
        account_standing:
          $ref: '#/components/schemas/account_standing'
        credit_product_token:
          description: Globally unique identifier for a credit product
          type: string
        tier:
          description: Interest tier to which this account belongs to
          type: string
        payment_allocation:
          $ref: '#/components/schemas/category_balances'
        minimum_payment_balance:
          $ref: '#/components/schemas/balance_details'
        previous_statement_balance:
          $ref: '#/components/schemas/balance_details'
        interest_details:
          anyOf:
            - type: 'null'
            - $ref: '#/components/schemas/interest_details'
      required:
        - token
        - financial_account_token
        - date
        - created
        - updated
        - version
        - ytd_totals
        - period_totals
        - day_totals
        - credit_limit
        - excess_credits
        - account_standing
        - credit_product_token
        - payment_allocation
        - balances
        - minimum_payment_balance
        - previous_statement_balance
        - starting_balance
        - ending_balance
        - available_credit
        - interest_details
    loan_tapes_response:
      $id: https://lithic.com/schemas/treasury/statements/loan_tapes_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Loan Tapes Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/loan_tape_response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    simulate_receipt_request:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/simulate_receipt_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Simulate Receipt Request
      type: object
      properties:
        financial_account_token:
          description: Financial Account Token
          type: string
          format: uuid
        token:
          description: Payment token
          type: string
          format: uuid
        receipt_type:
          description: Receipt Type
          type: string
          enum:
            - RECEIPT_CREDIT
            - RECEIPT_DEBIT
        amount:
          description: Amount
          type: integer
          minimum: 0
        memo:
          description: Memo
          type: string
      required:
        - financial_account_token
        - token
        - receipt_type
        - amount
    result:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/result.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - APPROVED
        - DECLINED
      title: Result
    simulate_payment_response:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/simulate_payment_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Simulate Payment Response
      type: object
      properties:
        result:
          description: Request Result
          $ref: '#/components/schemas/result'
        transaction_event_token:
          description: Transaction Event Token
          type: string
          format: uuid
        debugging_request_id:
          description: Debugging Request Id
          type: string
          format: uuid
      required:
        - result
        - transaction_event_token
        - debugging_request_id
    simulate_origination_release_request:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/simulate_origination_release_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Simulate Origination Release Request
      type: object
      properties:
        payment_token:
          description: Payment Token
          type: string
          format: uuid
      required:
        - payment_token
    simulate_origination_return_request:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/simulate_origination_return_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Simulate Origination Return Request
      type: object
      properties:
        payment_token:
          description: Payment Token
          type: string
          format: uuid
        return_reason_code:
          description: Return Reason Code
          type: string
          default: R01
          pattern: ^R[0-9][0-9]$
      required:
        - payment_token
    supported_simulation_types:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/supported_simulation_types.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - ACH_ORIGINATION_REVIEWED
        - ACH_ORIGINATION_RELEASED
        - ACH_ORIGINATION_PROCESSED
        - ACH_ORIGINATION_SETTLED
        - ACH_RECEIPT_SETTLED
        - ACH_RETURN_INITIATED
        - ACH_RETURN_PROCESSED
      title: Supported Simulation Types
    supported_simulation_decline_reasons:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/supported_simulation_decline_reasons.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - PROGRAM_TRANSACTION_LIMIT_EXCEEDED
        - PROGRAM_DAILY_LIMIT_EXCEEDED
        - PROGRAM_MONTHLY_LIMIT_EXCEEDED
      title: Supported Simulation Decline Reasons
    simulate_action_request:
      $id: https://lithic.com/schemas/internal/treasury/simulation-api/simulate_action_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Simulate Action Request
      type: object
      properties:
        event_type:
          description: Event Type
          $ref: '#/components/schemas/supported_simulation_types'
        return_reason_code:
          description: Return Reason Code
          type: string
        decline_reason:
          description: Decline reason
          $ref: '#/components/schemas/supported_simulation_decline_reasons'
      required:
        - event_type
    simulate-enrollment-review-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/simulations/simulate-enrollment-review.json
      title: Simulate account holder enrollment review request body
      type: object
      properties:
        account_holder_token:
          description: The account holder which to perform the simulation upon.
          type: string
        status:
          description: An account holder's status for use within the simulation.
          type: string
          enum:
            - ACCEPTED
            - REJECTED
        status_reasons:
          description: Status reason that will be associated with the simulated account holder status. Only required for a `REJECTED` status.
          type: array
          items:
            type: string
            enum:
              - PRIMARY_BUSINESS_ENTITY_ID_VERIFICATION_FAILURE
              - PRIMARY_BUSINESS_ENTITY_ADDRESS_VERIFICATION_FAILURE
              - PRIMARY_BUSINESS_ENTITY_NAME_VERIFICATION_FAILURE
              - PRIMARY_BUSINESS_ENTITY_BUSINESS_OFFICERS_NOT_MATCHED
              - PRIMARY_BUSINESS_ENTITY_SOS_FILING_INACTIVE
              - PRIMARY_BUSINESS_ENTITY_SOS_NOT_MATCHED
              - PRIMARY_BUSINESS_ENTITY_CMRA_FAILURE
              - PRIMARY_BUSINESS_ENTITY_WATCHLIST_FAILURE
              - PRIMARY_BUSINESS_ENTITY_REGISTERED_AGENT_FAILURE
              - CONTROL_PERSON_BLOCKLIST_ALERT_FAILURE
              - CONTROL_PERSON_ID_VERIFICATION_FAILURE
              - CONTROL_PERSON_DOB_VERIFICATION_FAILURE
              - CONTROL_PERSON_NAME_VERIFICATION_FAILURE
              - BENEFICIAL_OWNER_INDIVIDUAL_DOB_VERIFICATION_FAILURE
              - BENEFICIAL_OWNER_INDIVIDUAL_BLOCKLIST_ALERT_FAILURE
              - BENEFICIAL_OWNER_INDIVIDUAL_ID_VERIFICATION_FAILURE
              - BENEFICIAL_OWNER_INDIVIDUAL_NAME_VERIFICATION_FAILURE
    status:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/status.json
      title: KYC/KYB Status
      description: Enrollment status for KYC/KYB
      type: string
      enum:
        - ACCEPTED
        - PENDING_DOCUMENT
        - PENDING_RESUBMIT
        - REJECTED
    verification-application:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/verification-application.json
      title: Verification Application
      type: object
      description: Represents the status of an identity verification application for an account holder
      properties:
        created:
          type: string
          format: date-time
          description: Timestamp of when the application was created.
        status:
          description: |-
            KYC and KYB evaluation states.

            Note: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.
          $ref: '#/components/schemas/status'
        status_reasons:
          type: array
          items:
            $ref: '#/components/schemas/status-reasons'
          description: Reason for the evaluation status.
        updated:
          type: string
          format: date-time
          description: Timestamp of when the application was last updated.
      required:
        - created
        - status
        - status_reasons
        - updated
    address-2:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/api-shared/2024-01-15/address.json
      title: Address
      type: object
      properties:
        address1:
          description: Valid deliverable address (no PO boxes).
          example: 123 Old Forest Way
          type: string
        address2:
          description: Unit or apartment number (if applicable).
          type: string
        city:
          description: Name of city.
          example: Omaha
          type: string
        country:
          description: Valid country code. Only USA is currently supported, entered in uppercase ISO 3166-1 alpha-3 three-character format.
          example: USA
          type: string
        postal_code:
          description: Valid postal code. Only USA ZIP codes are currently supported, entered as a five-digit ZIP or nine-digit ZIP+4.
          example: '68022'
          type: string
        state:
          description: Valid state code. Only USA state codes are currently supported, entered in uppercase ISO 3166-2 two-character format.
          example: NE
          type: string
      required:
        - address1
        - city
        - country
        - postal_code
        - state
    individual:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/individual.json
      title: Individual
      type: object
      properties:
        address:
          $ref: '#/components/schemas/address-2'
          description: Individual's current address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable. Only USA addresses are currently supported.
        dob:
          type: string
          example: '1991-03-08 08:00:00'
          description: Individual's date of birth, as an RFC 3339 date.
        email:
          type: string
          example: tom@middle-earth.com
          description: Individual's email address. If utilizing Lithic for chargeback processing, this customer email address may be used to communicate dispute status and resolution.
        first_name:
          type: string
          example: Tom
          description: Individual's first name, as it appears on government-issued identity documents.
        last_name:
          type: string
          example: Bombadil
          description: Individual's last name, as it appears on government-issued identity documents.
        phone_number:
          type: string
          example: '+12124007676'
          description: Individual's phone number, entered in E.164 format.
        government_id:
          type: string
          example: 111-23-1412
          description: Government-issued identification number (required for identity verification and compliance with banking regulations). Social Security Numbers (SSN) and Individual Taxpayer Identification Numbers (ITIN) are currently supported, entered as full nine-digits, with or without hyphens
          writeOnly: true
    kyb-business-entity:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/kyb-workflows/kyb-business-entity.json
      title: KYB Business Entity
      type: object
      properties:
        address:
          $ref: '#/components/schemas/address-2'
          description: Business''s physical address - PO boxes, UPS drops, and FedEx drops are not acceptable; APO/FPO are acceptable.
        dba_business_name:
          description: Any name that the business operates under that is not its legal business name (if applicable).
          type: string
        government_id:
          description: Government-issued identification number. US Federal Employer Identification Numbers (EIN) are currently supported, entered as full nine-digits, with or without hyphens.
          example: 114-123-1513
          type: string
        legal_business_name:
          description: Legal (formal) business name.
          example: Acme, Inc.
          type: string
        parent_company:
          description: Parent company name (if applicable).
          type: string
        phone_numbers:
          description: One or more of the business's phone number(s), entered as a list in E.164 format.
          items:
            description: Business phone number, entered in E.164 format.
            example: '+12124007676'
            type: string
          minItems: 1
          type: array
      required:
        - address
        - government_id
        - legal_business_name
        - phone_numbers
    account-holder-response:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/account-holder-response.json
      title: Account Holder
      type: object
      properties:
        token:
          description: Globally unique identifier for the account holder.
          type: string
          format: uuid
        account_token:
          description: Globally unique identifier for the account.
          type: string
          format: uuid
        business_account_token:
          description: Only applicable for customers using the KYC-Exempt workflow to enroll authorized users of businesses. Pass the account_token of the enrolled business associated with the AUTHORIZED_USER in this field.
          type: string
          format: uuid
        created:
          description: Timestamp of when the account holder was created.
          type: string
          format: date-time
        exemption_type:
          description: The type of KYC exemption for a KYC-Exempt Account Holder. "None" if the account holder is not KYC-Exempt.
          type: string
          enum:
            - AUTHORIZED_USER
            - PREPAID_CARD_USER
        external_id:
          description: Customer-provided token that indicates a relationship with an object outside of the Lithic ecosystem.
          type: string
          format: string
        user_type:
          description: |-
            The type of Account Holder. If the type is "INDIVIDUAL", the "individual" attribute will be present.

            If the type is "BUSINESS" then the "business_entity", "control_person", "beneficial_owner_individuals", "beneficial_owner_entities",

            "nature_of_business", and "website_url" attributes will be present.
          type: string
          enum:
            - BUSINESS
            - INDIVIDUAL
        verification_application:
          $ref: '#/components/schemas/verification-application'
          description: Information about the most recent identity verification attempt
        individual:
          $ref: '#/components/schemas/individual'
          description: Only present when user_type == "INDIVIDUAL". Information about the individual for which the account is being opened and KYC is being run.
        business_entity:
          $ref: '#/components/schemas/kyb-business-entity'
          description: Only present when user_type == "BUSINESS". Information about the business for which the account is being opened and KYB is being run.
        beneficial_owner_entities:
          description: Only present when user_type == "BUSINESS". List of all entities with >25% ownership in the company.
          type: array
          items:
            $ref: '#/components/schemas/kyb-business-entity'
          minItems: 0
        beneficial_owner_individuals:
          description: Only present when user_type == "BUSINESS". List of all individuals with >25% ownership in the company.
          type: array
          items:
            $ref: '#/components/schemas/individual'
          minItems: 0
        control_person:
          $ref: '#/components/schemas/individual'
          description: |-
            Only present when user_type == "BUSINESS".

            An individual with significant responsibility for managing the legal entity (e.g., a Chief Executive Officer, Chief Financial Officer, Chief Operating Officer,

            Managing Member, General Partner, President, Vice President, or Treasurer). This can be an executive, or someone who will have program-wide access

            to the cards that Lithic will provide. In some cases, this individual could also be a beneficial owner listed above.
        nature_of_business:
          description: Only present when user_type == "BUSINESS". User-submitted description of the business.
          type: string
          format: string
        website_url:
          description: Only present when user_type == "BUSINESS". Business's primary website.
          type: string
          format: string
        email:
          description: |
            <
              Deprecated.
              Use control_person.email when user_type == "BUSINESS".
              Use individual.phone_number when user_type == "INDIVIDUAL".
            >
            Primary email of Account Holder.
          type: string
        phone_number:
          description: |
            <
              Deprecated.
              Use control_person.phone_number when user_type == "BUSINESS".
              Use individual.phone_number when user_type == "INDIVIDUAL".
            >
            Primary phone of Account Holder, entered in E.164 format.
          type: string
        status:
          description: |+
            <Deprecated. Use verification_application.status instead>

            KYC and KYB evaluation states.

            Note: `PENDING_RESUBMIT` and `PENDING_DOCUMENT` are only applicable for the `ADVANCED` workflow.

          $ref: '#/components/schemas/status'
        status_reasons:
          description: <Deprecated. Use verification_application.status_reasons> Reason for the evaluation status.
          type: array
          items:
            $ref: '#/components/schemas/status-reasons'
        required_documents:
          description: Only present for "KYB_BASIC" and "KYC_ADVANCED" workflows. A list of documents required for the account holder to be approved.
          type: array
          items:
            $ref: '#/components/schemas/required-document'
    error:
      $id: https://lithic.com/schemas/customer-facing/api-shared/error.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Error
      type: object
      properties:
        debugging_request_id:
          type: string
          format: uuid
          description: Identifier to help debug an error.
        message:
          type: string
          description: Explanation of error response.
      required:
        - debugging_request_id
        - message
    simulate-enrollment-document-review-request:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/account-holder/2024-01-15/kyc/simulations/simulate-enrollment-document-review.json
      title: Simulate account holder enrollment document review request body
      type: object
      properties:
        document_upload_token:
          description: The account holder document upload which to perform the simulation upon.
          type: string
        status:
          description: An account holder document's upload status for use within the simulation.
          type: string
          enum:
            - UPLOADED
            - ACCEPTED
            - REJECTED
            - PARTIAL_APPROVAL
        status_reason:
          $ref: '#/components/schemas/document-upload-status-reasons'
          description: Status reason that will be associated with the simulated account holder status. Only required for a `REJECTED` status or `PARTIAL_APPROVAL` status.
        accepted_entity_status_reasons:
          description: A list of status reasons associated with a KYB account holder in PENDING_REVIEW
          type: array
          items:
            type: string
      required:
        - document_upload_token
        - status
    currency:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/currency.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: ISO 4217 currency.  Its enumerants are ISO 4217 currencies except for some special currencies like ``XXX``.  Enumerants names are lowercase currency code e.g. `EUR`, `USD`.
      example: USD
      title: Currency
      type: string
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRU
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLE
        - SLL
        - SOS
        - SRD
        - SSP
        - STN
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - UYI
        - UYU
        - UYW
        - UZS
        - VED
        - VES
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XSU
        - XTS
        - XUA
        - XXX
        - YER
        - ZAR
        - ZMW
        - ZWL
    transaction_amounts:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/transaction_amounts.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Amounts
      type: object
      properties:
        cardholder:
          properties:
            amount:
              description: The aggregate settled amount in the cardholder billing currency.
              type: integer
              example: -1000
            conversion_rate:
              description: The conversion rate used to convert the merchant amount to the cardholder billing amount.
              type: string
              example: '1.000000'
            currency:
              $ref: '#/components/schemas/currency'
          type: object
          required:
            - amount
            - conversion_rate
            - currency
        hold:
          properties:
            amount:
              description: The aggregate authorization amount of the transaction in the anticipated settlement currency.
              type: integer
              example: 0
            currency:
              $ref: '#/components/schemas/currency'
          type: object
          required:
            - amount
            - currency
        merchant:
          properties:
            amount:
              description: The aggregate settled amount in the merchant currency.
              type: integer
              example: -1000
            currency:
              $ref: '#/components/schemas/currency'
          type: object
          required:
            - amount
            - currency
        settlement:
          properties:
            amount:
              description: The aggregate settled amount in the settlement currency.
              type: integer
              example: -1000
            currency:
              $ref: '#/components/schemas/currency'
          type: object
          required:
            - amount
            - currency
      required:
        - cardholder
        - hold
        - merchant
        - settlement
    avs:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/avs.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Address Verification Service
      type: object
      properties:
        address:
          description: Cardholder address
          type: string
        zipcode:
          description: Cardholder ZIP code
          type: string
      required:
        - address
        - zipcode
    cardholder_authentication:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/cardholder_authentication.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Cardholder Authentication
      type: object
      properties:
        3ds_version:
          oneOf:
            - type: 'null'
              description: 3DS version not available
            - type: string
              example: '2'
              description: The 3DS version used for the authentication
        acquirer_exemption:
          description: Whether an acquirer exemption applied to the transaction.
          enum:
            - AUTHENTICATION_OUTAGE_EXCEPTION
            - LOW_VALUE
            - MERCHANT_INITIATED_TRANSACTION
            - NONE
            - RECURRING_PAYMENT
            - SECURE_CORPORATE_PAYMENT
            - STRONG_CUSTOMER_AUTHENTICATION_DELEGATION
            - TRANSACTION_RISK_ANALYSIS
          example: NONE
          type: string
        authentication_result:
          description: Indicates what the outcome of the 3DS authentication process is.
          enum:
            - ATTEMPTS
            - DECLINE
            - NONE
            - SUCCESS
          example: SUCCESS
          type: string
        decision_made_by:
          description: Indicates which party made the 3DS authentication decision.
          enum:
            - CUSTOMER_ENDPOINT
            - LITHIC_DEFAULT
            - LITHIC_RULES
            - NETWORK
            - UNKNOWN
          example: LITHIC_RULES
          type: string
        liability_shift:
          description: |+
            Indicates whether chargeback liability shift applies to the transaction. Possible enum values:

                * `3DS_AUTHENTICATED`: The transaction was fully authenticated through a 3-D Secure flow, chargeback liability shift applies.

                * `ACQUIRER_EXEMPTION`: The acquirer utilised an exemption to bypass Strong Customer Authentication (`transStatus = N`, or `transStatus = I`). Liability remains with the acquirer and in this case the `acquirer_exemption` field is expected to be not `NONE`.

                * `NONE`: Chargeback liability shift has not shifted to the issuer, i.e. the merchant is liable.

               * `TOKEN_AUTHENTICATED`: The transaction was a tokenized payment with validated cryptography, possibly recurring. Chargeback liability shift to the issuer applies.

          enum:
            - 3DS_AUTHENTICATED
            - ACQUIRER_EXEMPTION
            - NONE
            - TOKEN_AUTHENTICATED
          type: string
        three_ds_authentication_token:
          oneOf:
            - type: 'null'
              description: 3DS authentication token not available.
            - type: string
              example: a6e372d0-b40a-43eb-b0d1-4e1aebef5875
              format: uuid
              description: Unique identifier you can use to match a given 3DS authentication (available via the three_ds_authentication.created event webhook) and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.
        verification_attempted:
          description: Indicates whether a 3DS challenge flow was used, and if so, what the verification method was. (deprecated, use `authentication_result`)
          enum:
            - NONE
            - OTHER
          example: NONE
          type: string
        verification_result:
          description: Indicates whether a transaction is considered 3DS authenticated. (deprecated, use `authentication_result`)
          enum:
            - CANCELLED
            - FAILED
            - FRICTIONLESS
            - NOT_ATTEMPTED
            - REJECTED
            - SUCCESS
          example: FRICTIONLESS
          type: string
      required:
        - 3ds_version
        - acquirer_exemption
        - authentication_result
        - decision_made_by
        - liability_shift
        - three_ds_authentication_token
        - verification_attempted
        - verification_result
    transaction_event_amounts:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/transaction_event_amounts.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Event Amounts
      type: object
      properties:
        cardholder:
          type: object
          properties:
            amount:
              description: The amount in the cardholder billing currency.
              type: integer
              example: 1000
            conversion_rate:
              description: The conversion rate used to convert the merchant amount to the cardholder billing amount.
              type: string
              example: '1.000000'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - conversion_rate
            - currency
        merchant:
          type: object
          properties:
            amount:
              description: The amount in the merchant currency.
              type: integer
              example: 1000
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
        settlement:
          type:
            - object
            - 'null'
          properties:
            amount:
              description: Amount of the event, if it is financial, in the settlement currency.
              type: integer
              example: 1000
            conversion_rate:
              description: Conversion rate used to convert the merchant amount to the settlement amount.
              type: string
              example: '1.000000'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - conversion_rate
            - currency
      required:
        - cardholder
        - merchant
        - settlement
    detailed_result:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/detailed_result.json
      $schema: https://json-schema.org/draft/2020-12/schema
      example: APPROVED
      title: Detailed Result
      type: string
      enum:
        - ACCOUNT_DAILY_SPEND_LIMIT_EXCEEDED
        - ACCOUNT_DELINQUENT
        - ACCOUNT_INACTIVE
        - ACCOUNT_LIFETIME_SPEND_LIMIT_EXCEEDED
        - ACCOUNT_MONTHLY_SPEND_LIMIT_EXCEEDED
        - ACCOUNT_UNDER_REVIEW
        - ADDRESS_INCORRECT
        - APPROVED
        - AUTH_RULE_ALLOWED_COUNTRY
        - AUTH_RULE_ALLOWED_MCC
        - AUTH_RULE_BLOCKED_COUNTRY
        - AUTH_RULE_BLOCKED_MCC
        - CARD_CLOSED
        - CARD_CRYPTOGRAM_VALIDATION_FAILURE
        - CARD_EXPIRED
        - CARD_EXPIRY_DATE_INCORRECT
        - CARD_INVALID
        - CARD_NOT_ACTIVATED
        - CARD_PAUSED
        - CARD_PIN_INCORRECT
        - CARD_RESTRICTED
        - CARD_SECURITY_CODE_INCORRECT
        - CARD_SPEND_LIMIT_EXCEEDED
        - CONTACT_CARD_ISSUER
        - CUSTOMER_ASA_TIMEOUT
        - CUSTOM_ASA_RESULT
        - DECLINED
        - DO_NOT_HONOR
        - DRIVER_NUMBER_INVALID
        - FORMAT_ERROR
        - INSUFFICIENT_FUNDING_SOURCE_BALANCE
        - INSUFFICIENT_FUNDS
        - LITHIC_SYSTEM_ERROR
        - LITHIC_SYSTEM_RATE_LIMIT
        - MALFORMED_ASA_RESPONSE
        - MERCHANT_INVALID
        - MERCHANT_LOCKED_CARD_ATTEMPTED_ELSEWHERE
        - MERCHANT_NOT_PERMITTED
        - OVER_REVERSAL_ATTEMPTED
        - PIN_BLOCKED
        - PROGRAM_CARD_SPEND_LIMIT_EXCEEDED
        - PROGRAM_SUSPENDED
        - PROGRAM_USAGE_RESTRICTION
        - REVERSAL_UNMATCHED
        - SECURITY_VIOLATION
        - SINGLE_USE_CARD_REATTEMPTED
        - TRANSACTION_INVALID
        - TRANSACTION_NOT_PERMITTED_TO_ACQUIRER_OR_TERMINAL
        - TRANSACTION_NOT_PERMITTED_TO_ISSUER_OR_CARDHOLDER
        - TRANSACTION_PREVIOUSLY_COMPLETED
        - UNAUTHORIZED_MERCHANT
        - VEHICLE_NUMBER_INVALID
    decline_result:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/decline_result.json
      $schema: https://json-schema.org/draft/2020-12/schema
      example: APPROVED
      title: Result of the transaction
      type: string
      enum:
        - ACCOUNT_STATE_TRANSACTION_FAIL
        - APPROVED
        - BANK_CONNECTION_ERROR
        - BANK_NOT_VERIFIED
        - CARD_CLOSED
        - CARD_PAUSED
        - DECLINED
        - FRAUD_ADVICE
        - IGNORED_TTL_EXPIRY
        - INACTIVE_ACCOUNT
        - INCORRECT_PIN
        - INVALID_CARD_DETAILS
        - INSUFFICIENT_FUNDS
        - INSUFFICIENT_FUNDS_PRELOAD
        - INVALID_TRANSACTION
        - MERCHANT_BLACKLIST
        - ORIGINAL_NOT_FOUND
        - PREVIOUSLY_COMPLETED
        - SINGLE_USE_RECHARGED
        - SWITCH_INOPERATIVE_ADVICE
        - UNAUTHORIZED_MERCHANT
        - UNKNOWN_HOST_TIMEOUT
        - USER_TRANSACTION_LIMIT
    transaction_event:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/avs.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Event
      type: object
      properties:
        amount:
          description: Amount of the event in the settlement currency.
          example: 1000
          type: integer
        amounts:
          $ref: '#/components/schemas/transaction_event_amounts'
        created:
          description: RFC 3339 date and time this event entered the system. UTC time zone.
          example: '2023-09-26T21:14:28.637Z'
          format: date-time
          type: string
        detailed_results:
          items:
            $ref: '#/components/schemas/detailed_result'
          type: array
        effective_polarity:
          description: Indicates whether the transaction event is a credit or debit to the account.
          example: DEBIT
          enum:
            - CREDIT
            - DEBIT
          type: string
        result:
          $ref: '#/components/schemas/decline_result'
        token:
          description: Transaction event identifier.
          example: 0c2adae9-f535-4505-8c35-421dad9bd0b6
          format: uuid
          type: string
        type:
          description: Type of transaction event
          example: CLEARING
          enum:
            - AUTHORIZATION
            - AUTHORIZATION_ADVICE
            - AUTHORIZATION_EXPIRY
            - AUTHORIZATION_REVERSAL
            - BALANCE_INQUIRY
            - CLEARING
            - CORRECTION_CREDIT
            - CORRECTION_DEBIT
            - CREDIT_AUTHORIZATION
            - CREDIT_AUTHORIZATION_ADVICE
            - FINANCIAL_AUTHORIZATION
            - FINANCIAL_CREDIT_AUTHORIZATION
            - RETURN
            - RETURN_REVERSAL
          type: string
      required:
        - amount
        - amounts
        - created
        - detailed_results
        - effective_polarity
        - result
        - token
        - type
    merchant:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/merchant.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Merchant
      type: object
      properties:
        acceptor_id:
          description: Unique alphanumeric identifier for the payment card acceptor (merchant).
          example: '333301802529120'
          type: string
        acquiring_institution_id:
          description: Unique numeric identifier of the acquiring institution.
          example: '191231'
          type: string
        city:
          description: City of card acceptor. Note that in many cases, particularly in card-not-present transactions, merchants may send through a phone number or URL in this field.
          example: NEW YORK
          type: string
        country:
          description: 'Country or entity of card acceptor. Possible values are: (1) all ISO 3166-1 alpha-3 country codes, (2) QZZ for Kosovo, and (3) ANT for Netherlands Antilles.'
          example: USA
          type: string
        descriptor:
          description: Short description of card acceptor.
          example: COFFEE SHOP
          type: string
        mcc:
          description: Merchant category code (MCC). A four-digit number listed in ISO 18245. An MCC is used to classify a business by the types of goods or services it provides.
          example: '5812'
          type: string
        state:
          description: Geographic state of card acceptor.
          example: NY
          type: string
      required:
        - acceptor_id
        - acquiring_institution_id
        - city
        - country
        - descriptor
        - mcc
        - state
    merchant_currency:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/merchant_currency.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Merchant Currency
      description: 3-digit alphabetic ISO 4217 code for the local currency of the transaction.
      example: USD
      type: string
    network_risk_score:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/network_risk_score.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Network Risk Score
      type:
        - integer
        - 'null'
      description: Network-provided score assessing risk level associated with a given authorization. Scores are on a range of 0-999, with 0 representing the lowest risk and 999 representing the highest risk. For Visa transactions, where the raw score has a range of 0-99, Lithic will normalize the score by multiplying the raw score by 10x.
    pos_entry_mode:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/pos_entry_mode.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Point of Sale Entry Mode
      type: object
      properties:
        card:
          type: string
          enum:
            - NOT_PRESENT
            - PREAUTHORIZED
            - PRESENT
            - UNKNOWN
          description: Card presence indicator
        cardholder:
          type: string
          enum:
            - DEFERRED_BILLING
            - ELECTRONIC_ORDER
            - INSTALLMENT
            - MAIL_ORDER
            - NOT_PRESENT
            - PREAUTHORIZED
            - PRESENT
            - REOCCURRING
            - TELEPHONE_ORDER
            - UNKNOWN
          description: Cardholder presence indicator
        pan:
          type: string
          enum:
            - AUTO_ENTRY
            - BAR_CODE
            - CONTACTLESS
            - CREDENTIAL_ON_FILE
            - ECOMMERCE
            - ERROR_KEYED
            - ERROR_MAGNETIC_STRIPE
            - ICC
            - KEY_ENTERED
            - MAGNETIC_STRIPE
            - MANUAL
            - OCR
            - SECURE_CARDLESS
            - UNKNOWN
            - UNSPECIFIED
          description: Method of entry for the PAN
        pin_entered:
          type: boolean
          description: Indicates whether the cardholder entered the PIN. True if the PIN was entered.
      required:
        - card
        - cardholder
        - pan
        - pin_entered
    pos_terminal:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/pos_terminal.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Point of Sale Terminal
      type: object
      properties:
        attended:
          description: True if a clerk is present at the sale.
          type: boolean
        card_retention_capable:
          description: True if the terminal is capable of retaining the card.
          type: boolean
        on_premise:
          description: True if the sale was made at the place of business (vs. mobile).
          type: boolean
        operator:
          description: The person that is designated to swipe the card
          enum:
            - ADMINISTRATIVE
            - CARDHOLDER
            - CARD_ACCEPTOR
            - UNKNOWN
          type: string
        partial_approval_capable:
          type: boolean
          description: 'True if the terminal is capable of partial approval. Partial approval is when part of a transaction is approved and another payment must be used for the remainder. Example scenario: A $40 transaction is attempted on a prepaid card with a $25 balance. If partial approval is enabled, $25 can be authorized, at which point the POS will prompt the user for an additional payment of $15.'
        pin_capability:
          description: Status of whether the POS is able to accept PINs
          enum:
            - CAPABLE
            - INOPERATIVE
            - NOT_CAPABLE
            - UNSPECIFIED
          type: string
        type:
          description: POS Type
          enum:
            - ADMINISTRATIVE
            - ATM
            - AUTHORIZATION
            - COUPON_MACHINE
            - DIAL_TERMINAL
            - ECOMMERCE
            - ECR
            - FUEL_MACHINE
            - HOME_TERMINAL
            - MICR
            - OFF_PREMISE
            - PAYMENT
            - PDA
            - PHONE
            - POINT
            - POS_TERMINAL
            - PUBLIC_UTILITY
            - SELF_SERVICE
            - TELEVISION
            - TELLER
            - TRAVELERS_CHECK_MACHINE
            - VENDING
            - VOICE
            - UNKNOWN
          type: string
      required:
        - attended
        - card_retention_capable
        - on_premise
        - operator
        - partial_approval_capable
        - pin_capability
        - type
    pos:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transactions/pos.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Point of Sale
      type: object
      properties:
        entry_mode:
          $ref: '#/components/schemas/pos_entry_mode'
        terminal:
          $ref: '#/components/schemas/pos_terminal'
      required:
        - entry_mode
        - terminal
    token_info:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/token_info.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Token Info
      type:
        - object
        - 'null'
      properties:
        wallet_type:
          description: The wallet_type field will indicate the source of the token. Possible token sources include digital wallets (Apple, Google, or Samsung Pay), merchant tokenization, and “other” sources like in-flight commerce. Masterpass is not currently supported and is included for future use.
          enum:
            - APPLE_PAY
            - GOOGLE_PAY
            - MASTERPASS
            - MERCHANT
            - OTHER
            - SAMSUNG_PAY
          type: string
      required:
        - wallet_type
    card_transaction:
      $id: https://lithic.com/schemas/treasury/2024-01-15/card_transaction/card_transactions/card_transaction.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Card Transaction
      type: object
      properties:
        acquirer_fee:
          description: Fee assessed by the merchant and paid for by the cardholder in the smallest unit of the currency. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.
          example: 0
          type:
            - integer
            - 'null'
        acquirer_reference_number:
          description: Unique identifier assigned to a transaction by the acquirer that can be used in dispute and chargeback filing.
          example: '12345678987654321234567'
          maxLength: 23
          minLength: 23
          type:
            - string
            - 'null'
        account_token:
          description: The token for the account associated with this transaction.
          example: bd5e5649-1be8-4117-9bc5-3268258d1417
          format: uuid
          type: string
        amount:
          description: When the transaction is pending, this represents the authorization amount of the transaction in the anticipated settlement currency. Once the transaction has settled, this field represents the settled amount in the settlement currency.
          example: 1000
          type: integer
        amounts:
          $ref: '#/components/schemas/transaction_amounts'
        authorization_amount:
          description: The authorization amount of the transaction in the anticipated settlement currency.
          example: 1000
          type:
            - integer
            - 'null'
        authorization_code:
          description: A fixed-width 6-digit numeric identifier that can be used to identify a transaction with networks.
          example: '123456'
          maxLength: 6
          minLength: 6
          type:
            - string
            - 'null'
        avs:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/avs'
        card_token:
          description: Token for the card used in this transaction.
          example: 19c22c47-7a75-43ee-9891-595419830f7e
          format: uuid
          type: string
        cardholder_authentication:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/cardholder_authentication'
        created:
          description: Date and time when the transaction first occurred. UTC time zone.
          example: '2023-09-26T21:14:28.637Z'
          format: date-time
          type: string
        events:
          items:
            $ref: '#/components/schemas/transaction_event'
          type: array
        merchant:
          $ref: '#/components/schemas/merchant'
        merchant_amount:
          description: Analogous to the 'amount', but in the merchant currency.
          example: 1000
          type:
            - integer
            - 'null'
        merchant_authorization_amount:
          description: Analogous to the 'authorization_amount', but in the merchant currency.
          example: 1000
          type:
            - integer
            - 'null'
        merchant_currency:
          $ref: '#/components/schemas/merchant_currency'
        network:
          description: Card network of the authorization. Can be `INTERLINK`, `MAESTRO`, `MASTERCARD`, `VISA`, or `UNKNOWN`. Value is `UNKNOWN` when Lithic cannot determine the network code from the upstream provider.
          enum:
            - INTERLINK
            - MAESTRO
            - MASTERCARD
            - UNKNOWN
            - VISA
          example: MASTERCARD
          type:
            - string
            - 'null'
        network_risk_score:
          $ref: '#/components/schemas/network_risk_score'
        result:
          $ref: '#/components/schemas/decline_result'
        pos:
          $ref: '#/components/schemas/pos'
        settled_amount:
          title: Settled Amount
          description: The settled amount of the transaction in the settlement currency.
          type: integer
          example: 1000
        status:
          description: Status of the transaction.
          enum:
            - DECLINED
            - EXPIRED
            - PENDING
            - SETTLED
            - VOIDED
          example: SETTLED
          type: string
        token:
          description: Globally unique identifier.
          format: uuid
          type: string
        token_info:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/token_info'
        updated:
          description: Date and time when the transaction last updated. UTC time zone.
          example: '2023-09-26T21:14:28.637Z'
          format: date-time
          type: string
      required:
        - acquirer_fee
        - acquirer_reference_number
        - account_token
        - amount
        - amounts
        - authorization_amount
        - authorization_code
        - avs
        - card_token
        - cardholder_authentication
        - created
        - merchant_amount
        - merchant_authorization_amount
        - merchant_currency
        - merchant
        - network
        - network_risk_score
        - result
        - pos
        - settled_amount
        - status
        - token
        - token_info
        - updated
      examples:
        - account_token: db3942f0-0627-4887-a190-1ea83b46d091
          acquirer_fee: 0
          acquirer_reference_number: null
          amount: 1800
          amounts:
            cardholder:
              amount: 0
              conversion_rate: '1.000000'
              currency: USD
            hold:
              amount: -1800
              currency: USD
            merchant:
              amount: 0
              currency: USD
            settlement:
              amount: 0
              currency: USD
          authorization_amount: 1800
          authorization_code: '071471'
          avs:
            zipcode: '95006'
            address: 123 Evergreen Terrace
          card_token: aac502f9-aecc-458a-954e-4bcf6edb6123
          cardholder_authentication:
            verification_attempted: OTHER
            verification_result: SUCCESS
            liability_shift: 3DS_AUTHENTICATED
            3ds_version: null
            acquirer_exemption: MERCHANT_INITIATED_TRANSACTION
            authentication_result: SUCCESS
            three_ds_authentication_token: fc60d37d-95f7-419c-b628-dd9fbf9d80d0
            decision_made_by: NETWORK
          created: '2023-08-03T18:42:30Z'
          events:
            - amount: 1800
              amounts:
                cardholder:
                  amount: 1800
                  conversion_rate: '1.000000'
                  currency: USD
                merchant:
                  amount: 1800
                  currency: USD
                settlement: null
              created: '2023-08-03T18:42:30Z'
              detailed_results:
                - APPROVED
              effective_polarity: DEBIT
              result: APPROVED
              token: bbbf1e86-322d-11ee-9779-00505685a123
              type: AUTHORIZATION
          merchant:
            acceptor_id: '452322000053360'
            acquiring_institution_id: '333301802529120'
            city: gosq.com
            country: USA
            descriptor: SQ *SOMA EATS
            mcc: '5812'
            state: CA
          merchant_amount: 1800
          merchant_authorization_amount: 1800
          merchant_currency: USD
          network: MASTERCARD
          network_risk_score: 5
          pos:
            entry_mode:
              card: NOT_PRESENT
              cardholder: NOT_PRESENT
              pan: ECOMMERCE
              pin_entered: false
            terminal:
              attended: false
              card_retention_capable: false
              on_premise: false
              operator: UNKNOWN
              partial_approval_capable: false
              pin_capability: NOT_CAPABLE
              type: UNKNOWN
          result: APPROVED
          settled_amount: 0
          status: PENDING
          token: c30c2182-1e69-4e0d-b40f-eec0d2a19123
          token_info:
            wallet_type: APPLE_PAY
          updated: '2023-08-03T18:42:30Z'
    list_transactions_response:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/list_transactions_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: List Transactions Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/card_transaction'
        has_more:
          description: Indicates whether there are more transactions to be retrieved.
          type: boolean
      examples:
        - data:
            - account_token: db3942f0-0627-4887-a190-1ea83b46d091
              acquirer_fee: 0
              acquirer_reference_number: null
              amount: 1800
              amounts:
                cardholder:
                  amount: 0
                  conversion_rate: '1.000000'
                  currency: USD
                hold:
                  amount: -1800
                  currency: USD
                merchant:
                  amount: 0
                  currency: USD
                settlement:
                  amount: 0
                  currency: USD
              authorization_amount: 1800
              authorization_code: '071471'
              avs:
                zipcode: '95006'
                address: 123 Evergreen Terrace
              card_token: aac502f9-aecc-458a-954e-4bcf6edb6123
              cardholder_authentication:
                verification_attempted: OTHER
                verification_result: SUCCESS
                liability_shift: 3DS_AUTHENTICATED
                3ds_version: null
                acquirer_exemption: MERCHANT_INITIATED_TRANSACTION
                authentication_result: SUCCESS
                three_ds_authentication_token: fc60d37d-95f7-419c-b628-dd9fbf9d80d0
                decision_made_by: NETWORK
              created: '2023-08-03T18:42:30Z'
              events:
                - amount: 1800
                  amounts:
                    cardholder:
                      amount: 1800
                      conversion_rate: '1.000000'
                      currency: USD
                    merchant:
                      amount: 1800
                      currency: USD
                    settlement: null
                  created: '2023-08-03T18:42:30Z'
                  detailed_results:
                    - APPROVED
                  effective_polarity: DEBIT
                  result: APPROVED
                  token: bbbf1e86-322d-11ee-9779-00505685a123
                  type: AUTHORIZATION
              merchant:
                acceptor_id: '452322000053360'
                acquiring_institution_id: '333301802529120'
                city: gosq.com
                country: USA
                descriptor: SQ *SOMA EATS
                mcc: '5812'
                state: CA
              merchant_amount: 1800
              merchant_authorization_amount: 1800
              merchant_currency: USD
              network: MASTERCARD
              network_risk_score: 5
              pos:
                entry_mode:
                  card: NOT_PRESENT
                  cardholder: NOT_PRESENT
                  pan: ECOMMERCE
                  pin_entered: false
                terminal:
                  attended: false
                  card_retention_capable: false
                  on_premise: false
                  operator: UNKNOWN
                  partial_approval_capable: false
                  pin_capability: NOT_CAPABLE
                  type: UNKNOWN
              result: APPROVED
              settled_amount: 0
              status: PENDING
              token: c30c2182-1e69-4e0d-b40f-eec0d2a19123
              token_info:
                wallet_type: APPLE_PAY
              updated: '2023-08-03T18:42:30Z'
          has_more: false
    external_payment_category:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_category.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Category
      type: string
      enum:
        - EXTERNAL_WIRE
        - EXTERNAL_ACH
        - EXTERNAL_CHECK
        - EXTERNAL_TRANSFER
    transaction_result:
      $id: https://lithic.com/schemas/treasury/ledger/transaction_result.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Result
      type: string
      enum:
        - APPROVED
        - DECLINED
    transaction_status:
      $id: https://lithic.com/schemas/treasury/ledger/transaction_status.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Transaction Status
      type: string
      enum:
        - PENDING
        - SETTLED
        - DECLINED
        - REVERSED
        - CANCELED
    external_payment_event_type:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_event_type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Event Type
      type: string
      enum:
        - EXTERNAL_WIRE_INITIATED
        - EXTERNAL_WIRE_CANCELED
        - EXTERNAL_WIRE_SETTLED
        - EXTERNAL_WIRE_REVERSED
        - EXTERNAL_WIRE_RELEASED
        - EXTERNAL_ACH_INITIATED
        - EXTERNAL_ACH_CANCELED
        - EXTERNAL_ACH_SETTLED
        - EXTERNAL_ACH_REVERSED
        - EXTERNAL_ACH_RELEASED
        - EXTERNAL_TRANSFER_INITIATED
        - EXTERNAL_TRANSFER_CANCELED
        - EXTERNAL_TRANSFER_SETTLED
        - EXTERNAL_TRANSFER_REVERSED
        - EXTERNAL_TRANSFER_RELEASED
        - EXTERNAL_CHECK_INITIATED
        - EXTERNAL_CHECK_CANCELED
        - EXTERNAL_CHECK_SETTLED
        - EXTERNAL_CHECK_REVERSED
        - EXTERNAL_CHECK_RELEASED
    detailed_results:
      $id: https://lithic.com/schemas/treasury/ledger/detailed_results.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Detailed Results
      type: string
      enum:
        - APPROVED
    external_payment_event:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_event.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Event
      type: object
      properties:
        amount:
          type: integer
        type:
          $ref: '#/components/schemas/external_payment_event_type'
        result:
          $ref: '#/components/schemas/transaction_result'
        detailed_results:
          type: array
          items:
            $ref: '#/components/schemas/detailed_results'
        created:
          type: string
          format: date-time
        token:
          type: string
          format: uuid
        memo:
          type: string
        effective_date:
          type: string
          format: date
      required:
        - amount
        - type
        - result
        - detailed_results
        - created
        - token
        - memo
        - effective_date
    external_payment_direction:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_direction.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Direction
      type: string
      enum:
        - DEPOSIT
        - WITHDRAWAL
    external_payment_response:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Response
      type: object
      properties:
        token:
          type: string
          format: uuid
        result:
          $ref: '#/components/schemas/transaction_result'
        category:
          $ref: '#/components/schemas/external_payment_category'
        status:
          $ref: '#/components/schemas/transaction_status'
        settled_amount:
          type: integer
        pending_amount:
          type: integer
        currency:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/external_payment_event'
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        user_defined_id:
          type: string
        financial_account_token:
          type: string
          format: uuid
        payment_type:
          $ref: '#/components/schemas/external_payment_direction'
      required:
        - token
        - result
        - category
        - status
        - settled_amount
        - pending_amount
        - currency
        - events
        - created
        - updated
        - financial_account_token
        - payment_type
    external_payments_response:
      $id: https://lithic.com/schemas/treasury/ledger/external_payments_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payments Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/external_payment_response'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    external_payment_progress_to:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_progress_to.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Progress To
      type: string
      enum:
        - SETTLED
        - RELEASED
    create_external_payment_request:
      $id: https://lithic.com/schemas/treasury/ledger/create_external_payment_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Create External Payment Request
      type: object
      properties:
        category:
          $ref: '#/components/schemas/external_payment_category'
        financial_account_token:
          type: string
          format: uuid
        amount:
          type: integer
        memo:
          type: string
        user_defined_id:
          type: string
        effective_date:
          type: string
          format: date
        token:
          type: string
          format: uuid
        payment_type:
          $ref: '#/components/schemas/external_payment_direction'
        progress_to:
          $ref: '#/components/schemas/external_payment_progress_to'
      required:
        - category
        - financial_account_token
        - amount
        - effective_date
        - payment_type
    external_payment_action_with_progress_to_request:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_action_with_progress_to_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Action with Progress to Request
      type: object
      properties:
        memo:
          type: string
        effective_date:
          type: string
          format: date
        progress_to:
          $ref: '#/components/schemas/external_payment_progress_to'
      required:
        - effective_date
    external_payment_action_request:
      $id: https://lithic.com/schemas/treasury/ledger/external_payment_action_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: External Payment Action Request
      type: object
      properties:
        memo:
          type: string
        effective_date:
          type: string
          format: date
      required:
        - effective_date
    management_operation_category:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_category.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Category
      type: string
      enum:
        - MANAGEMENT_FEE
        - MANAGEMENT_DISPUTE
        - MANAGEMENT_REWARD
        - MANAGEMENT_ADJUSTMENT
    management_operation_event_type:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_event_type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Event Type
      type: string
      enum:
        - CASH_BACK
        - CURRENCY_CONVERSION
        - INTEREST
        - LATE_PAYMENT
        - BILLING_ERROR
        - PROVISIONAL_CREDIT
        - CASH_BACK_REVERSAL
        - CURRENCY_CONVERSION_REVERSAL
        - INTEREST_REVERSAL
        - LATE_PAYMENT_REVERSAL
        - BILLING_ERROR_REVERSAL
        - PROVISIONAL_CREDIT_REVERSAL
    management_operation_event:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_event.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Event
      type: object
      properties:
        amount:
          type: integer
        type:
          $ref: '#/components/schemas/management_operation_event_type'
        subtype:
          type: string
        result:
          $ref: '#/components/schemas/transaction_result'
        detailed_results:
          type: array
          items:
            $ref: '#/components/schemas/detailed_results'
        created:
          type: string
          format: date-time
        token:
          type: string
          format: uuid
        memo:
          type: string
        effective_date:
          type: string
          format: date
      required:
        - amount
        - type
        - result
        - detailed_results
        - created
        - token
        - memo
        - effective_date
    management_operation_direction:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_direction.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Direction
      type: string
      enum:
        - CREDIT
        - DEBIT
    management_operation_transaction:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_transaction.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Transaction
      type: object
      properties:
        token:
          type: string
          format: uuid
        result:
          $ref: '#/components/schemas/transaction_result'
        category:
          $ref: '#/components/schemas/management_operation_category'
        status:
          $ref: '#/components/schemas/transaction_status'
        settled_amount:
          type: integer
        pending_amount:
          type: integer
        currency:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/management_operation_event'
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        user_defined_id:
          type: string
        financial_account_token:
          type: string
          format: uuid
        direction:
          $ref: '#/components/schemas/management_operation_direction'
      required:
        - token
        - result
        - category
        - status
        - settled_amount
        - pending_amount
        - currency
        - events
        - created
        - updated
        - financial_account_token
        - direction
    management_operation_transactions_response:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_transactions_response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Transactions Response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/management_operation_transaction'
        has_more:
          type: boolean
      required:
        - data
        - has_more
    create_management_operation_request:
      $id: https://lithic.com/schemas/treasury/ledger/create_management_operation_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Create Management Operation Request
      type: object
      properties:
        category:
          $ref: '#/components/schemas/management_operation_category'
        event_type:
          $ref: '#/components/schemas/management_operation_event_type'
        subtype:
          type: string
        financial_account_token:
          type: string
          format: uuid
        amount:
          type: integer
        memo:
          type: string
        user_defined_id:
          type: string
        effective_date:
          type: string
          format: date
        token:
          type: string
          format: uuid
        direction:
          $ref: '#/components/schemas/management_operation_direction'
      required:
        - category
        - event_type
        - financial_account_token
        - amount
        - effective_date
        - direction
    management_operation_action_request:
      $id: https://lithic.com/schemas/treasury/ledger/management_operation_action_request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Management Operation Action Request
      type: object
      properties:
        memo:
          type: string
        effective_date:
          type: string
          format: date
      required:
        - effective_date
    card-type:
      $id: https://lithic.com/schemas/authorization/card/card-type.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: string
      enum:
        - SINGLE_USE
        - MERCHANT_LOCKED
        - UNLOCKED
        - PHYSICAL
        - DIGITAL_WALLET
        - VIRTUAL
    asa_request_card:
      description: Card object in ASA
      type: object
      properties:
        hostname:
          description: Hostname of card’s locked merchant (will be empty if not applicable)
          type: string
        last_four:
          description: Last four digits of the card number
          type: string
        memo:
          description: Customizable name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.
          type: string
        spend_limit:
          description: |-
            Amount (in cents) to limit approved authorizations. Purchase requests above the spend limit will be declined (refunds and credits will be approved).

            Note that while spend limits are enforced based on authorized and settled volume on a card, they are not recommended to be used for balance or reconciliation-level accuracy. Spend limits also cannot block force posted charges (i.e., when a merchant sends a clearing message without a prior authorization).
          type: number
        spend_limit_duration:
          description: Note that to support recurring monthly payments, which can occur on different day every month, the time window we consider for MONTHLY velocity starts 6 days after the current calendar date one month prior.
          type: string
          enum:
            - ANNUALLY
            - FOREVER
            - MONTHLY
            - TRANSACTION
        state:
          type: string
          enum:
            - CLOSED
            - OPEN
            - PAUSED
            - PENDING_ACTIVATION
            - PENDING_FULFILLMENT
        type:
          $ref: '#/components/schemas/card-type'
        token:
          description: Globally unique identifier for the card.
          type: string
          format: uuid
    asa_request_cardholder_authentication:
      description: Cardholder Authentication object in ASA
      type: object
      properties:
        3ds_version:
          oneOf:
            - type: 'null'
              description: 3DS version not available
            - type: string
              description: The 3DS version used for the authentication
        acquirer_exemption:
          type: string
          description: Whether an acquirer exemption applied to the transaction.
          enum:
            - NONE
            - MERCHANT_INITIATED_TRANSACTION
            - TRANSACTION_RISK_ANALYSIS
            - RECURRING_PAYMENT
            - LOW_VALUE
            - STRONG_CUSTOMER_AUTHENTICATION_DELEGATION
            - SECURE_CORPORATE_PAYMENT
            - AUTHENTICATION_OUTAGE_EXCEPTION
        liability_shift:
          type: string
          description: Indicates whether liability shift to the issuer applies to the transaction.
          enum:
            - NONE
            - 3DS_AUTHENTICATED
            - TOKEN_AUTHENTICATED
        verification_attempted:
          type: string
          description: Indicates whether a 3DS challenge flow was used, and if so, what the verification method was. (deprecated, use `authentication_result`)
          enum:
            - NONE
            - OTHER
        verification_result:
          type: string
          description: Indicates whether a transaction is considered 3DS authenticated. (deprecated, use `authentication_result`)
          enum:
            - SUCCESS
            - FRICTIONLESS
            - NOT_ATTEMPTED
        authentication_result:
          type: string
          description: Indicates what the outcome of the 3DS authentication process is.
          enum:
            - SUCCESS
            - DECLINE
            - ATTEMPTS
            - NONE
        decision_made_by:
          type: string
          description: Indicates which party made the 3DS authentication decision.
          enum:
            - NETWORK
            - LITHIC_DEFAULT
            - LITHIC_RULES
            - CUSTOMER_ENDPOINT
            - UNKNOWN
        three_ds_authentication_token:
          oneOf:
            - type: 'null'
              description: 3DS authentication token not available.
            - type: string
              description: Unique identifier you can use to match a given 3DS authentication (available via the three_ds_authentication.created event webhook) and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.
    asa_request_pos_entry_mode:
      description: POS > Entry Mode object in ASA
      type: object
      properties:
        card:
          description: Card Presence Indicator
          type: string
          enum:
            - PRESENT
            - NOT_PRESENT
            - UNKNOWN
        cardholder:
          description: Cardholder Presence Indicator
          type: string
          enum:
            - DEFERRED_BILLING
            - ELECTRONIC_ORDER
            - INSTALLMENT
            - MAIL_ORDER
            - NOT_PRESENT
            - PRESENT
            - REOCCURRING
            - TELEPHONE_ORDER
            - UNKNOWN
        pan:
          description: Method of entry for the PAN
          type: string
          enum:
            - AUTO_ENTRY
            - BAR_CODE
            - CONTACTLESS
            - ECOMMERCE
            - ERROR_KEYED
            - ERROR_MAGNETIC_STRIPE
            - ICC
            - KEY_ENTERED
            - MAGNETIC_STRIPE
            - MANUAL
            - OCR
            - SECURE_CARDLESS
            - UNSPECIFIED
            - UNKNOWN
            - CREDENTIAL_ON_FILE
            - ECOMMERCE
        pin_entered:
          type: boolean
          description: Indicates whether the cardholder entered the PIN. True if the PIN was entered.
    asa_request_status:
      type: string
      description: The type of authorization request that this request is for. Note that `CREDIT_AUTHORIZATION` and `FINANCIAL_CREDIT_AUTHORIZATION` is only available to users with credit decisioning via ASA enabled.
      enum:
        - AUTHORIZATION
        - CREDIT_AUTHORIZATION
        - FINANCIAL_AUTHORIZATION
        - FINANCIAL_CREDIT_AUTHORIZATION
        - BALANCE_INQUIRY
    asa_request_fleet_info:
      description: Optional Object containing information if the Card is a part of a Fleet managed program
      type: object
      properties:
        driver_number:
          oneOf:
            - type: 'null'
              description: 'Driver Number was not provided as part of the transaction '
            - type: string
              description: Number representing the driver
        vehicle_number:
          oneOf:
            - type: 'null'
              description: Vehicle Number was not provided as part of the transaction
            - type: string
              description: Number associated with the vehicle
        fleet_restriction_code:
          type: string
          description: Code indicating which restrictions, if any, there are on purchase. This is configured at a program level and is a static configuration, and does not change on a request to request basis
          enum:
            - NO_RESTRICTIONS
            - FUEL_ONLY
        fleet_prompt_code:
          type: string
          description: Code indicating what the driver was prompted to enter at time of purchase. This is configured at a program level and is a static configuration, and does not change on a request to request basis
          enum:
            - NO_PROMPT
            - VEHICLE_NUMBER
            - DRIVER_NUMBER
    asa-request:
      $id: https://lithic.com/schemas/authorization/asa/asa-request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: The Auth Stream Access request payload that was sent to the ASA responder.
      type: object
      properties:
        merchant:
          $ref: '#/components/schemas/merchant'
        avs:
          $ref: '#/components/schemas/avs'
        card:
          $ref: '#/components/schemas/asa_request_card'
        cardholder_authentication:
          oneOf:
            - description: Cardholder Authentication information not available
              type: 'null'
            - $ref: '#/components/schemas/asa_request_cardholder_authentication'
        pos:
          type: object
          properties:
            entry_mode:
              $ref: '#/components/schemas/asa_request_pos_entry_mode'
            terminal:
              $ref: '#/components/schemas/pos_terminal'
        amount:
          type: number
          description: Authorization amount of the transaction (in cents), including any acquirer fees. The contents of this field are identical to `authorization_amount`.
        acquirer_fee:
          type: number
          description: Fee (in cents) assessed by the merchant and paid for by the cardholder. Will be zero if no fee is assessed. Rebates may be transmitted as a negative value to indicate credited fees.
        authorization_amount:
          type: number
          description: The base transaction amount (in cents) plus the acquirer fee field. This is the amount the issuer should authorize against unless the issuer is paying the acquirer fee on behalf of the cardholder.
        cardholder_currency:
          type: string
          description: ISO 4217 alpha 3 code for cardholder's billing currency.
        cash_amount:
          type: number
          description: |-
            The portion of the transaction requested as cash back by the cardholder, and does not include any acquirer fees. The amount field includes the purchase amount, the requested cash back amount, and any acquirer fees.

            If no cash back was requested, the value of this field will be 0, and the field will always be present.
        cashback:
          type: number
          description: Deprecated, use `cash_amount`.
        token_info:
          $ref: '#/components/schemas/token_info'
        ttl:
          description: 'Deprecated: approximate time-to-live for the authorization.'
          type: string
          format: date-time
        conversion_rate:
          description: If the transaction was requested in a currency other than the settlement currency, this field will be populated to indicate the rate used to translate the merchant_amount to the amount (i.e., `merchant_amount` x `conversion_rate` = `amount`). Note that the `merchant_amount` is in the local currency and the amount is in the settlement currency.
          type: number
        created:
          type: string
          format: date-time
          description: Date and time when the transaction first occurred in UTC.
        merchant_amount:
          type: number
          description: The amount that the merchant will receive, denominated in `merchant_currency` and in the smallest currency unit. Note the amount includes `acquirer_fee`, similar to `authorization_amount`. It will be different from `authorization_amount` if the merchant is taking payment in a different currency.
        merchant_currency:
          $ref: '#/components/schemas/merchant_currency'
        network:
          type: string
          description: Card network of the authorization.
          enum:
            - INTERLINK
            - MAESTRO
            - MASTERCARD
            - VISA
            - UNKNOWN
        network_risk_score:
          $ref: '#/components/schemas/network_risk_score'
        settled_amount:
          type: number
          description: Amount (in cents) of the transaction that has been settled, including any acquirer fees
        status:
          $ref: '#/components/schemas/asa_request_status'
        token:
          description: The provisional transaction group uuid associated with the authorization
          type: string
          format: uuid
        event_token:
          description: The event token associated with the authorization. This field is only set for programs enrolled into the beta.
          type: string
          format: uuid
        fleet_info:
          oneOf:
            - type: 'null'
              description: Transaction is not associated with a fleet program
            - $ref: '#/components/schemas/asa_request_fleet_info'
      $defs:
        asa_request_status:
          type: string
          description: The type of authorization request that this request is for. Note that `CREDIT_AUTHORIZATION` and `FINANCIAL_CREDIT_AUTHORIZATION` is only available to users with credit decisioning via ASA enabled.
          enum:
            - AUTHORIZATION
            - CREDIT_AUTHORIZATION
            - FINANCIAL_AUTHORIZATION
            - FINANCIAL_CREDIT_AUTHORIZATION
            - BALANCE_INQUIRY
        asa_request_pos_entry_mode:
          description: POS > Entry Mode object in ASA
          type: object
          properties:
            card:
              description: Card Presence Indicator
              type: string
              enum:
                - PRESENT
                - NOT_PRESENT
                - UNKNOWN
            cardholder:
              description: Cardholder Presence Indicator
              type: string
              enum:
                - DEFERRED_BILLING
                - ELECTRONIC_ORDER
                - INSTALLMENT
                - MAIL_ORDER
                - NOT_PRESENT
                - PRESENT
                - REOCCURRING
                - TELEPHONE_ORDER
                - UNKNOWN
            pan:
              description: Method of entry for the PAN
              type: string
              enum:
                - AUTO_ENTRY
                - BAR_CODE
                - CONTACTLESS
                - ECOMMERCE
                - ERROR_KEYED
                - ERROR_MAGNETIC_STRIPE
                - ICC
                - KEY_ENTERED
                - MAGNETIC_STRIPE
                - MANUAL
                - OCR
                - SECURE_CARDLESS
                - UNSPECIFIED
                - UNKNOWN
                - CREDENTIAL_ON_FILE
                - ECOMMERCE
            pin_entered:
              type: boolean
              description: Indicates whether the cardholder entered the PIN. True if the PIN was entered.
        asa_request_fleet_info:
          description: Optional Object containing information if the Card is a part of a Fleet managed program
          type: object
          properties:
            driver_number:
              oneOf:
                - type: 'null'
                  description: 'Driver Number was not provided as part of the transaction '
                - type: string
                  description: Number representing the driver
            vehicle_number:
              oneOf:
                - type: 'null'
                  description: Vehicle Number was not provided as part of the transaction
                - type: string
                  description: Number associated with the vehicle
            fleet_restriction_code:
              type: string
              description: Code indicating which restrictions, if any, there are on purchase. This is configured at a program level and is a static configuration, and does not change on a request to request basis
              enum:
                - NO_RESTRICTIONS
                - FUEL_ONLY
            fleet_prompt_code:
              type: string
              description: Code indicating what the driver was prompted to enter at time of purchase. This is configured at a program level and is a static configuration, and does not change on a request to request basis
              enum:
                - NO_PROMPT
                - VEHICLE_NUMBER
                - DRIVER_NUMBER
        asa_request_cardholder_authentication:
          description: Cardholder Authentication object in ASA
          type: object
          properties:
            3ds_version:
              oneOf:
                - type: 'null'
                  description: 3DS version not available
                - type: string
                  description: The 3DS version used for the authentication
            acquirer_exemption:
              type: string
              description: Whether an acquirer exemption applied to the transaction.
              enum:
                - NONE
                - MERCHANT_INITIATED_TRANSACTION
                - TRANSACTION_RISK_ANALYSIS
                - RECURRING_PAYMENT
                - LOW_VALUE
                - STRONG_CUSTOMER_AUTHENTICATION_DELEGATION
                - SECURE_CORPORATE_PAYMENT
                - AUTHENTICATION_OUTAGE_EXCEPTION
            liability_shift:
              type: string
              description: Indicates whether liability shift to the issuer applies to the transaction.
              enum:
                - NONE
                - 3DS_AUTHENTICATED
                - TOKEN_AUTHENTICATED
            verification_attempted:
              type: string
              description: Indicates whether a 3DS challenge flow was used, and if so, what the verification method was. (deprecated, use `authentication_result`)
              enum:
                - NONE
                - OTHER
            verification_result:
              type: string
              description: Indicates whether a transaction is considered 3DS authenticated. (deprecated, use `authentication_result`)
              enum:
                - SUCCESS
                - FRICTIONLESS
                - NOT_ATTEMPTED
            authentication_result:
              type: string
              description: Indicates what the outcome of the 3DS authentication process is.
              enum:
                - SUCCESS
                - DECLINE
                - ATTEMPTS
                - NONE
            decision_made_by:
              type: string
              description: Indicates which party made the 3DS authentication decision.
              enum:
                - NETWORK
                - LITHIC_DEFAULT
                - LITHIC_RULES
                - CUSTOMER_ENDPOINT
                - UNKNOWN
            three_ds_authentication_token:
              oneOf:
                - type: 'null'
                  description: 3DS authentication token not available.
                - type: string
                  description: Unique identifier you can use to match a given 3DS authentication (available via the three_ds_authentication.created event webhook) and the transaction. Note that in cases where liability shift does not occur, this token is matched to the transaction on a best-effort basis.
        asa_request_card:
          description: Card object in ASA
          type: object
          properties:
            hostname:
              description: Hostname of card’s locked merchant (will be empty if not applicable)
              type: string
            last_four:
              description: Last four digits of the card number
              type: string
            memo:
              description: Customizable name to identify the card. We recommend against using this field to store JSON data as it can cause unexpected behavior.
              type: string
            spend_limit:
              description: |-
                Amount (in cents) to limit approved authorizations. Purchase requests above the spend limit will be declined (refunds and credits will be approved).

                Note that while spend limits are enforced based on authorized and settled volume on a card, they are not recommended to be used for balance or reconciliation-level accuracy. Spend limits also cannot block force posted charges (i.e., when a merchant sends a clearing message without a prior authorization).
              type: number
            spend_limit_duration:
              description: Note that to support recurring monthly payments, which can occur on different day every month, the time window we consider for MONTHLY velocity starts 6 days after the current calendar date one month prior.
              type: string
              enum:
                - ANNUALLY
                - FOREVER
                - MONTHLY
                - TRANSACTION
            state:
              type: string
              enum:
                - CLOSED
                - OPEN
                - PAUSED
                - PENDING_ACTIVATION
                - PENDING_FULFILLMENT
            type:
              $ref: '#/components/schemas/card-type'
            token:
              description: Globally unique identifier for the card.
              type: string
              format: uuid
    asa-response:
      $id: https://lithic.com/schemas/authorization/asa/asa-response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: The Auth Stream Access response payload that an ASA responder may respond with in response to a request.
      type: object
      properties:
        result:
          description: Result of the Authorization decision. Provide `APPROVED` to accept the authorization. Any other response will decline the authorization. If a value not present in the enumeration is returned the transaction will be declined with the `CUSTOM_ASA_RESULT` detailed result.
          type: string
          enum:
            - APPROVED
            - ACCOUNT_INACTIVE
            - AVS_INVALID
            - CARD_CLOSED
            - CARD_PAUSED
            - INSUFFICIENT_FUNDS
            - UNAUTHORIZED_MERCHANT
            - VELOCITY_EXCEEDED
            - DRIVER_NUMBER_INVALID
            - VEHICLE_NUMBER_INVALID
        token:
          type: string
          description: The transaction token from the ASA request.
        approved_amount:
          type: number
          description: 'The amount approved for the transaction. Note that setting this implies a partial approval. This property should not be present if the intention is to fully approve the transaction. See: https://docs.lithic.com/docs/partial-approval#partial-approval'
        avs_result:
          description: The ASA responder may return an address verification (AVS) match indicator for evaluation by the acquirer. The merchant can choose whether to proceed with the transaction in the case of an approval with AVS failure. When they do not, this typically appears as a subsequent AUTHORIZATION_REVERSAL event following the AUTHORIZATION. Note that AVS data submitted by merchants can be variable in quality, and we recommend card programs exercise adjust their decisioning logic accordingly.
          type: string
          enum:
            - FAIL
            - MATCH
            - MATCH_ADDRESS_ONLY
            - MATCH_ZIP_ONLY
        balance:
          description: Respective available amount and settled amount values (in cents). These values can be used by merchants for authorization decisions as well as balance display at point of sale or ATM.
          type: object
          properties:
            amount:
              oneOf:
                - type: number
                  description: The balance held on the card.
                - type: 'null'
            available:
              oneOf:
                - type: number
                  description: The balance available for the cardholder to spend. This is calculated as the settled amount minus any pending authorizations on the card.
                - type: 'null'
      required:
        - result
    device:
      $id: https://lithic.com/schemas/tokenization/shared/device.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      properties:
        imei:
          description: The IMEI number of the device being provisioned
          example: '123456789012345'
          maxLength: 15
          type: string
        ip_address:
          description: The IP address of the device initiating the request
          example: 1.1.1.1
          maxLength: 64
          type: string
        location:
          description: Latitude and longitude where the device is located during the authorization attempt
          example: 37.3860517,-122.0838511
          maxLength: 64
          type: string
      required:
        - imei
        - ip_address
        - location
    digital-wallet-token-metadata:
      $id: https://lithic.com/schemas/tokenization/shared/digital-wallet-token-metadata.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: Contains the metadata for the digital wallet being tokenized.
      type: object
      properties:
        payment_account_info:
          description: Contains the information of the account responsible for the payment.
          type: object
          properties:
            account_holder_data:
              description: Additional information that can be used to identify the account holder, such as name, address, etc
              type: object
              properties:
                phone_number:
                  description: The phone number, may contain country code along with phone number when countryDialInCode is not present
                  type: string
                  maxLength: 20
            pan_unique_reference:
              description: Reference to the PAN that is unique per Wallet Provider
              type: string
              maxLength: 64
            payment_account_reference:
              description: The unique account reference assigned to the PAN
              type: string
              maxLength: 29
            token_unique_reference:
              description: A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
              type: string
              maxLength: 64
          required:
            - account_holder_data
        payment_app_instance_id:
          description: The identifier of the Payment App instance within a device that will be provisioned with a token
          type: string
          maxLength: 48
        status:
          description: The current status of the digital wallet token. Pending or declined.
          type: string
        token_requestor_id:
          description: The party that requested the digitization
          type: string
          minLength: 11
          maxLength: 11
        token_requestor_name:
          description: Human-readable name of the wallet that the token_requestor_id maps to.
          type: string
          enum:
            - APPLE_PAY
          example: APPLE_PAY
      required:
        - payment_account_info
        - status
    wallet-decisioning-info:
      $id: https://lithic.com/schemas/tokenization/shared/wallet-decisioning-info.json
      $schema: https://json-schema.org/draft/2020-12/schema
      type: object
      properties:
        account_score:
          description: Score given to the account by the Wallet Provider
          example: '100'
          maxLength: 64
          type: string
        device_score:
          description: Score given to the device by the Wallet Provider
          example: '100'
          maxLength: 64
          type: string
        recommendation_reasons:
          description: Reasons provided to the Wallet Provider on how the recommended decision was reached
          type: array
          items:
            type: string
        recommended_decision:
          description: The decision recommended by the Wallet Provider
          example: Decision1
          maxLength: 64
          type: string
      required:
        - account_score
        - device_score
        - recommended_decision
    tokenization-request-base:
      $id: https://lithic.com/schemas/tokenization/shared/tokenization-request-base.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: Base properties shared by both tokenization decisioning requests (with response) and without
      type: object
      properties:
        account_token:
          description: Unique identifier for the user tokenizing a card
          example: 00000000-0000-0000-0000-000000000002
          type: string
        card_token:
          description: Unique identifier for the card being tokenized
          example: 00000000-0000-0000-0000-000000000001
          type: string
        created:
          description: Indicate when the request was received from Mastercard or Visa
          format: date-time
          type: string
        device:
          $ref: '#/components/schemas/device'
        digital_wallet_token_metadata:
          $ref: '#/components/schemas/digital-wallet-token-metadata'
        issuer_decision:
          description: Whether Lithic decisioned on the token, and if so, what the decision was. APPROVED/VERIFICATION_REQUIRED/DENIED.
          enum:
            - APPROVED
            - DENIED
            - VERIFICATION_REQUIRED
          example: APPROVED
          type: string
        tokenization_channel:
          description: The channel through which the tokenization was made.
          enum:
            - DIGITAL_WALLET
            - MERCHANT
          example: DIGITAL_WALLET
          type: string
        tokenization_source:
          description: The source of the tokenization.
          enum:
            - ACCOUNT_ON_FILE
            - MANUAL_PROVISION
            - PUSH_PROVISION
          example: PUSH_PROVISION
          type: string
        tokenization_token:
          description: Unique identifier for the digital wallet token attempt
          type: string
        wallet_decisioning_info:
          $ref: '#/components/schemas/wallet-decisioning-info'
      required:
        - account_token
        - card_token
        - created
        - digital_wallet_token_metadata
        - issuer_decision
        - tokenization_channel
        - tokenization_token
        - wallet_decisioning_info
    tokenization-decisioning-request:
      $id: https://lithic.com/schemas/tokenization/notify-webhooks/tokenization-decisioning-request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: A webhook for tokenization decisioning sent to the customer's responder endpoint
      allOf:
        - $ref: '#/components/schemas/tokenization-request-base'
        - type: object
          properties:
            event_type:
              description: The name of this event
              enum:
                - digital_wallet.tokenization_approval_request
              example: digital_wallet.tokenization_approval_request
              type: string
          required:
            - event_type
          examples:
            - account_token: 00000000-0000-0000-0000-000000000002
              card_token: 00000000-0000-0000-0000-000000000001
              created: '2023-09-18T12:34:56Z'
              device:
                imei: '123456789012345'
                ip_address: 1.1.1.1
                location: 37.3860517,-122.0838511
              digital_wallet_token_metadata:
                payment_account_info:
                  account_holder_data:
                    phone_number: '+123456789012'
                  pan_unique_reference: pan_unique_ref_1234567890123456789012345678
                  payment_account_reference: ref_1234567890123456789012
                  token_unique_reference: token_unique_ref_1234567890123456789012345678
                payment_app_instance_id: app_instance_123456789012345678901234567890
                status: Pending
                token_requestor_id: '12345678901'
                token_requestor_name: APPLE_PAY
              event_type: tokenization.approval_request
              issuer_decision: APPROVED
              tokenization_channel: DIGITAL_WALLET
              tokenization_source: PUSH_PROVISION
              tokenization_token: tok_1234567890abcdef
              wallet_decisioning_info:
                account_score: '100'
                device_score: '100'
                recommendation_reasons:
                  - Reason1
                recommended_decision: Decision1
    tokenization-decisioning-response:
      $id: https://lithic.com/schemas/tokenization/decisioning/tokenization-decisioning-response.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: The response payload that a Tokenization Decisioning responder may respond with in response to a request.
      type: object
      properties:
        tokenization_decision:
          description: The decision for tokenization
          type: string
          enum:
            - APPROVE
            - AUTHENTICATE
            - DECLINE
          example: APPROVE
        phone_number:
          description: Phone number of the end user attempting a tokenization. Lithic must pass this to the card networks to pass to the wallets to display for the user as they select an authentication option in their digital wallet. Lithic will always default to using this value for authentication over the accountholder information on file. E.164 format without hyphens. For example, "+12124007676" for a US phone number.
          type: string
          example: '+15558675309'
        email:
          description: 'Email address of the end user attempting a tokenization to be used for authentication. Lithic must pass this to the card networks to pass to the wallets to display for the user as they select an authentication option in their digital wallet. Lithic will always default to using this value for authentication over the accountholder information on file. Permitted values: Valid email address. For example, "johnny@appleseed.com".'
          type: string
          format: email
          example: test@example.com
        mobile_application_name:
          description: Name of the mobile application that the digital wallet will open for the end user to complete authentication. For example, "Wells Fargo".
          type: string
          example: Wells Fargo
      required:
        - tokenization_decision
        - phone_number
        - email
        - mobile_application_name
      examples:
        - tokenization_decision: AUTHENTICATE
          phone_number: '+15558675309'
          email: test@example.com
          mobile_application_name: Wells Fargo
    rule-stats:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/rule-stats.json
      title: Auth Rule Rule Performance Statistics
      type: object
      properties:
        version:
          $ref: '#/components/schemas/auth-rule-version'
        approved:
          type: integer
          description: The number of times the rule has approved an authorization request (or would have approved if the rule is in shadow mode).
        declined:
          type: integer
          description: The number of times the rule has declined an authorization request (or would have declined if the rule is in shadow mode).
        examples:
          type: array
          description: Example authorization request events that would have been approved or declined.
          items:
            type: object
            properties:
              event_token:
                type: string
                format: uuid
                description: The authorization request event token.
              timestamp:
                type: string
                format: date-time
                description: The timestamp of the authorization request event.
              approved:
                type: boolean
                description: Whether the rule would have approved the authorization request.
    performance-report:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://lithic.com/schemas/authorization/rules-engine/auth-rules/v2/performance-report.json
      title: Auth Rule Performance Report
      type: object
      properties:
        auth_rule_token:
          $ref: '#/components/schemas/auth-rule-token'
        report_token:
          $ref: '#/components/schemas/report-token'
        from:
          description: The start of the time range for the performance report.
          type: string
          format: date-time
        to:
          description: The end of the time range for the performance report.
          type: string
          format: date-time
        current_version_statistics:
          oneOf:
            - type: 'null'
              description: No active version of the Auth Rule is impacting the Authorization stream.
            - description: Statistics for the active version of the Auth Rule that is impacting the Authorization stream.
              $ref: '#/components/schemas/rule-stats'
        draft_version_statistics:
          oneOf:
            - type: 'null'
              description: No draft version of the Auth Rule is running in shadow mode.
            - description: Statistics for the draft version of the Auth Rule that is running in shadow mode in the authorization stream.
              $ref: '#/components/schemas/rule-stats'
      required:
        - auth_rule_token
        - report_token
        - from
        - to
        - current_version_statistics
        - draft_version_statistics
    card_transaction_updated_event:
      $id: https://lithic.com/schemas/common/2024-01-15/card_transaction/card_transaction_updated_event.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Card Transaction Updated Event
      type: object
      allOf:
        - $ref: '#/components/schemas/card_transaction'
        - type: object
          properties:
            event_type:
              description: The type of event that occurred.
              enum:
                - card_transaction.updated
              type: string
          required:
            - event_type
      examples:
        - account_token: db3942f0-0627-4887-a190-1ea83b46d091
          acquirer_fee: 0
          acquirer_reference_number: null
          amount: 1800
          amounts:
            cardholder:
              amount: 0
              conversion_rate: '1.000000'
              currency: USD
            hold:
              amount: -1800
              currency: USD
            merchant:
              amount: 0
              currency: USD
            settlement:
              amount: 0
              currency: USD
          authorization_amount: 1800
          authorization_code: '071471'
          avs:
            zipcode: '95006'
            address: 123 Evergreen Terrace
          card_token: aac502f9-aecc-458a-954e-4bcf6edb6123
          cardholder_authentication:
            verification_attempted: OTHER
            verification_result: SUCCESS
            liability_shift: 3DS_AUTHENTICATED
            3ds_version: null
            acquirer_exemption: MERCHANT_INITIATED_TRANSACTION
            authentication_result: SUCCESS
            three_ds_authentication_token: fc60d37d-95f7-419c-b628-dd9fbf9d80d0
            decision_made_by: NETWORK
          created: '2023-08-03T18:42:30Z'
          event_type: card_transaction.updated
          events:
            - amount: 1800
              amounts:
                cardholder:
                  amount: 1800
                  conversion_rate: '1.000000'
                  currency: USD
                merchant:
                  amount: 1800
                  currency: USD
                settlement: null
              created: '2023-08-03T18:42:30Z'
              detailed_results:
                - APPROVED
              effective_polarity: DEBIT
              result: APPROVED
              token: bbbf1e86-322d-11ee-9779-00505685a123
              type: AUTHORIZATION
          merchant:
            acceptor_id: '452322000053360'
            acquiring_institution_id: '333301802529120'
            city: gosq.com
            country: USA
            descriptor: SQ *SOMA EATS
            mcc: '5812'
            state: CA
          merchant_amount: 1800
          merchant_authorization_amount: 1800
          merchant_currency: USD
          network: MASTERCARD
          network_risk_score: 5
          pos:
            entry_mode:
              card: NOT_PRESENT
              cardholder: NOT_PRESENT
              pan: ECOMMERCE
              pin_entered: false
            terminal:
              attended: false
              card_retention_capable: false
              on_premise: false
              operator: UNKNOWN
              partial_approval_capable: false
              pin_capability: NOT_CAPABLE
              type: UNKNOWN
          result: APPROVED
          settled_amount: 0
          status: PENDING
          token: c30c2182-1e69-4e0d-b40f-eec0d2a19123
          token_info:
            wallet_type: APPLE_PAY
          updated: '2023-08-03T18:42:30Z'
    customer-tokenization-decision:
      $id: https://lithic.com/schemas/tokenization/shared/customer-tokenization-decision.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: Contains the metadata for the customer tokenization decision.
      type: object
      properties:
        latency:
          description: Time in ms it took for the customer's URL to respond
          example: '100'
          type: string
        outcome:
          description: The outcome of the customer's decision
          enum:
            - APPROVED
            - DECLINED
            - ERROR
            - INVALID_RESPONSE
            - REQUIRE_ADDITIONAL_AUTHENTICATION
            - TIMEOUT
          example: APPROVED
          type: string
        responder_url:
          description: The customer's subscribed URL
          example: https://example.com
          type: string
        response_code:
          description: The response code that the customer provided
          example: '123456'
          type: string
      required:
        - outcome
        - responder_url
    digital-wallet-tokenization-approval-request:
      $id: https://lithic.com/schemas/tokenization/notify-webhooks/digital-wallet-tokenization-approval-request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: An event webhook (no responder) to inform that a Tokenization Request was decisioned on.
      allOf:
        - $ref: '#/components/schemas/tokenization-request-base'
        - type: object
          properties:
            customer_tokenization_decision:
              $ref: '#/components/schemas/customer-tokenization-decision'
            event_type:
              description: The name of this event
              enum:
                - digital_wallet.tokenization_approval_request
              example: digital_wallet.tokenization_approval_request
              type: string
          required:
            - customer_tokenization_decision
            - event_type
          examples:
            - account_token: 00000000-0000-0000-0000-000000000002
              card_token: 00000000-0000-0000-0000-000000000001
              created: '2023-09-18T12:34:56Z'
              customer_tokenization_decision:
                latency: '100'
                outcome: APPROVED
                responder_url: https://example.com
                response_code: '123456'
              device:
                imei: '123456789012345'
                ip_address: 1.1.1.1
                location: 37.3860517,-122.0838511
              digital_wallet_token_metadata:
                payment_account_info:
                  account_holder_data:
                    phone_number: '+123456789012'
                  pan_unique_reference: pan_unique_ref_1234567890123456789012345678
                  payment_account_reference: ref_1234567890123456789012
                  token_unique_reference: token_unique_ref_1234567890123456789012345678
                payment_app_instance_id: app_instance_123456789012345678901234567890
                status: Pending
                token_requestor_id: '12345678901'
                token_requestor_name: APPLE_PAY
              event_type: digital_wallet.tokenization_approval_request
              issuer_decision: APPROVED
              tokenization_channel: DIGITAL_WALLET
              tokenization_source: PUSH_PROVISION
              tokenization_token: tok_1234567890abcdef
              wallet_decisioning_info:
                account_score: '100'
                device_score: '100'
                recommendation_reasons:
                  - Reason1
                recommended_decision: Decision1
    statements_created_webhook:
      $id: https://lithic.com/schemas/treasury/statements/statements_created_webhook.json
      $schema: https://json-schema.org/draft/2020-12/schema
      title: Statement Webhook
      type: object
      allOf:
        - $ref: '#/components/schemas/statement_response'
      properties:
        event_type:
          type: string
          enum:
            - statements.created
      required:
        - event_type
    tokenization-approval-request:
      $id: https://lithic.com/schemas/tokenization/notify-webhooks/tokenization-approval-request.json
      $schema: https://json-schema.org/draft/2020-12/schema
      description: An event webhook (no responder) to inform that a Tokenization Request was decisioned on.
      allOf:
        - $ref: '#/components/schemas/tokenization-request-base'
        - type: object
          properties:
            customer_tokenization_decision:
              $ref: '#/components/schemas/customer-tokenization-decision'
            event_type:
              description: The name of this event
              enum:
                - tokenization.approval_request
              example: tokenization.approval_request
              type: string
          required:
            - customer_tokenization_decision
            - event_type
          examples:
            - account_token: 00000000-0000-0000-0000-000000000002
              card_token: 00000000-0000-0000-0000-000000000001
              created: '2023-09-18T12:34:56Z'
              customer_tokenization_decision:
                latency: '100'
                outcome: APPROVED
                responder_url: https://example.com
                response_code: '123456'
              device:
                imei: '123456789012345'
                ip_address: 1.1.1.1
                location: 37.3860517,-122.0838511
              digital_wallet_token_metadata:
                payment_account_info:
                  account_holder_data:
                    phone_number: '+123456789012'
                  pan_unique_reference: pan_unique_ref_1234567890123456789012345678
                  payment_account_reference: ref_1234567890123456789012
                  token_unique_reference: token_unique_ref_1234567890123456789012345678
                payment_app_instance_id: app_instance_123456789012345678901234567890
                status: Pending
                token_requestor_id: '12345678901'
                token_requestor_name: APPLE_PAY
              event_type: tokenization.approval_request
              issuer_decision: APPROVED
              tokenization_channel: DIGITAL_WALLET
              tokenization_source: PUSH_PROVISION
              tokenization_token: tok_1234567890abcdef
              wallet_decisioning_info:
                account_score: '100'
                device_score: '100'
                recommendation_reasons:
                  - Reason1
                recommended_decision: Decision1
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
